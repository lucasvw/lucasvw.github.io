<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Lucas van Walstijn</title>
<link>https://lucasvw.github.io/index.html</link>
<atom:link href="https://lucasvw.github.io/index.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.3.450</generator>
<lastBuildDate>Thu, 14 Sep 2023 00:00:00 GMT</lastBuildDate>
<item>
  <title>Recurrent Neural Networks</title>
  <dc:creator>Lucas van Walstijn</dc:creator>
  <link>https://lucasvw.github.io/posts/15_rnn/index.html</link>
  <description><![CDATA[ 



<p>In the previous <a href="https://lucasvw.github.io/posts/14_mlp/">post</a> we went through a simple MLP language model. We looked in detail at embeddings, and how they can be used to overcome the <em>curse of dimensionality</em> encountered for n-gram based models.</p>
<p>In this post we are going to have a look at recurrent neural networks and how they are different from the MLP developed earlier. As we will see, the concept of an rnn is remarkably similar.</p>
<section id="data" class="level2">
<h2 class="anchored" data-anchor-id="data">Data</h2>
<p>Everything starts with training data, for a description see the earlier <a href="https://lucasvw.github.io/posts/13_ngram/">post</a></p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> functools <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">reduce</span>, partial</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pathlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Path</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> urllib.request <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> urlretrieve</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> nn</span>
<span id="cb1-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn.functional <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> F</span>
<span id="cb1-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-10"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torcheval.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> tem</span>
<span id="cb1-11"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> fastcore.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> fc</span>
<span id="cb1-12"></span>
<span id="cb1-13"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> nntrain.dataloaders <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> DataLoaders</span>
<span id="cb1-14"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> nntrain.learner <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb1-15"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> nntrain.activations <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb1-16"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> nntrain.acceleration <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb1-17"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> nntrain.ngram <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span></code></pre></div>
</details>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">########### Load the data ###########</span></span>
<span id="cb2-2">path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'./data'</span>)</span>
<span id="cb2-3">path.mkdir(parents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, exist_ok<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb2-4">path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'names.txt'</span></span>
<span id="cb2-5">url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'https://raw.githubusercontent.com/karpathy/makemore/master/names.txt'</span></span>
<span id="cb2-6"></span>
<span id="cb2-7">_ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> urlretrieve(url, path)</span>
<span id="cb2-8"></span>
<span id="cb2-9"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(path, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb2-10">    lines <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f.read().splitlines()</span>
<span id="cb2-11">    </span>
<span id="cb2-12">random.seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb2-13">random.shuffle(lines)</span>
<span id="cb2-14"></span>
<span id="cb2-15">train_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span></span>
<span id="cb2-16">val_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span></span>
<span id="cb2-17"></span>
<span id="cb2-18">train_lines <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lines[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(train_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(lines))]</span>
<span id="cb2-19">val_lines <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lines[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(train_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(lines)): <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>((train_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> val_size) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(lines))]</span>
<span id="cb2-20"></span>
<span id="cb2-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">### Create vocabulary and mappings </span><span class="al" style="color: #AD0000;
background-color: null;
font-style: inherit;">###</span></span>
<span id="cb2-22">unique_chars <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>.join(lines)))</span>
<span id="cb2-23">unique_chars.sort()</span>
<span id="cb2-24">vocabulary <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> unique_chars</span>
<span id="cb2-25"></span>
<span id="cb2-26">c2i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {c:i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i, c <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(vocabulary)}</span>
<span id="cb2-27">i2c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {i:c <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i, c <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(vocabulary)}</span>
<span id="cb2-28"></span>
<span id="cb2-29"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> get_dls(bs, context_length):</span>
<span id="cb2-30">    train_ds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> NgramDataset(train_lines, c2i, n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>context_length<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-31">    val_ds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> NgramDataset(val_lines, c2i, n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>context_length<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-32">    train_loader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.utils.data.DataLoader(train_ds, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>bs, num_workers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb2-33">    val_loader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.utils.data.DataLoader(val_ds, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>bs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, num_workers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb2-34">    dls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataLoaders(train_loader, val_loader)</span>
<span id="cb2-35">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> dls</span></code></pre></div>
</div>
</section>
<section id="from-mlp-to-rnn-a-small-change" class="level2">
<h2 class="anchored" data-anchor-id="from-mlp-to-rnn-a-small-change">From MLP to RNN, a small change</h2>
<p>The MLP model encountered in the last post, used an embedding layer to turn the tokens from the context (in the image below of length 3) into vectors. These vectors then got concatenated, and passed through a hidden layer. After that, the activations were mapped to the size of the vocabulary in the output layer:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lucasvw.github.io/posts/15_rnn/arch.png" class="img-fluid figure-img" width="600"></p>
<figcaption class="figure-caption">MLP architecture</figcaption>
</figure>
</div>
<p>For an RNN, we also start-off by turning our integers into vectors making use of an embedding layer. However, instead of concatenating the result and passing it through a hidden layer, we <em>iteratively feed the embedding activations through a single hidden layer</em>. Each time moving on to (the embedding activations of) the next token and adding the hidden activations obtained from the previous iteration. Once all the context has been processed in this way, we finalize with an output layer similar to what we did for the MLP model.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lucasvw.github.io/posts/15_rnn/rnn.drawio.png" class="img-fluid figure-img" width="400"></p>
<figcaption class="figure-caption">RNN architecture</figcaption>
</figure>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>The first time I learned about the summing of embedding activations and hidden activations, I was pretty surprised: how can you expect to get anything meaningful by simple adding activations from two layers together? As it turns out, in neural network literature it happens quite often that the combination / merging of activations simply happens by element-wise addition. In a section below, we will also shortly discuss another way of combining information: by concatenation.</p>
</div>
</div>
<p>Let’s put this RNN architecture into code:</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> FixedContextRNN(nn.Module):</span>
<span id="cb3-2">    </span>
<span id="cb3-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, c2i, hidden_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>):</span>
<span id="cb3-4">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb3-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.c2i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> c2i</span>
<span id="cb3-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.input2hidden   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Embedding(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(c2i), hidden_size)</span>
<span id="cb3-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.hidden2hidden  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Linear(hidden_size, hidden_size)</span>
<span id="cb3-8">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.hidden2out     <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Linear(hidden_size, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(c2i))</span>
<span id="cb3-9">        </span>
<span id="cb3-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x):</span>
<span id="cb3-11">        input1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.relu(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.input2hidden(x[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]))</span>
<span id="cb3-12">        input2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.relu(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.input2hidden(x[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]))</span>
<span id="cb3-13">        input3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.relu(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.input2hidden(x[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]))</span>
<span id="cb3-14">        </span>
<span id="cb3-15">        out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.relu(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.hidden2hidden(input1))</span>
<span id="cb3-16">        out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.relu(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.hidden2hidden(out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> input2))</span>
<span id="cb3-17">        out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.relu(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.hidden2hidden(out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> input3))</span>
<span id="cb3-18">        </span>
<span id="cb3-19">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.hidden2out(out)</span></code></pre></div>
</div>
<p>Observe that both the embedding dimension and the size of the hidden layer need to be equal (<code>hidden_size</code>) because the activations from both these layers are added together and thus need to be of equal shape. This also means that there is just one hyperparameter influencing the amount of parameters in this network.</p>
<p>We can generalize this model, so that it accepts data of arbitrary context length. Also, we will make use of a <em>dummy hidden-layer activation tensor</em> (initialized to zeros) so that we can do the addition for all iterations (and not just for the second iteration onward):</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> VariableContextRNN(nn.Module):</span>
<span id="cb4-2">    </span>
<span id="cb4-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, c2i, hidden_size):</span>
<span id="cb4-4">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb4-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.c2i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> c2i</span>
<span id="cb4-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.hidden_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hidden_size</span>
<span id="cb4-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.input2hidden   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Embedding(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(c2i), hidden_size)</span>
<span id="cb4-8">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.hidden2hidden  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Linear(hidden_size, hidden_size)</span>
<span id="cb4-9">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.hidden2out     <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Linear(hidden_size, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(c2i))</span>
<span id="cb4-10">        </span>
<span id="cb4-11">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x):</span>
<span id="cb4-12">        inputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.input2hidden(x)           <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># [bs, context_length, hidden_size]</span></span>
<span id="cb4-13"></span>
<span id="cb4-14">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create dummy hidden-layer activations for the very first token </span></span>
<span id="cb4-15">        h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros((x.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.hidden_size)).to(device)</span>
<span id="cb4-16">        </span>
<span id="cb4-17">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(x.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]):             <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># iterate through the tokens (context length)</span></span>
<span id="cb4-18">            h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.relu(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.hidden2hidden(h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> inputs[:,i,:])) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># [bs, hidden_size]</span></span>
<span id="cb4-19">            </span>
<span id="cb4-20">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.hidden2out(h)               <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># [bs, classes]</span></span></code></pre></div>
</div>
<p>Let’s see how this model performs with a similar configuration to the first MLP we build in the previous <a href="https://lucasvw.github.io/posts/14_mlp/#using-embeddings-effectively">post</a> (context length of 3 and a hidden size of 50):</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Train parameters</span></span>
<span id="cb5-2">epochs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb5-3">lr     <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-2</span></span>
<span id="cb5-4">bs     <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span></span>
<span id="cb5-5"></span>
<span id="cb5-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Hyperparameters</span></span>
<span id="cb5-7">context_length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb5-8">n_h            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span></span>
<span id="cb5-9"></span>
<span id="cb5-10">dls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_dls(bs, context_length)</span>
<span id="cb5-11">rnn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> VariableContextRNN(c2i, n_h)</span>
<span id="cb5-12"></span>
<span id="cb5-13">subs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [ProgressS(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>),</span>
<span id="cb5-14">        MetricsS(),</span>
<span id="cb5-15">        DeviceS(device)]</span>
<span id="cb5-16"></span>
<span id="cb5-17">scheduler <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> partial(torch.optim.lr_scheduler.OneCycleLR, max_lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>lr, epochs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>epochs, steps_per_epoch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(dls.train))</span>
<span id="cb5-18"></span>
<span id="cb5-19">l <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Learner(rnn, dls, F.cross_entropy, torch.optim.Adam, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, subs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>subs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [SchedulerS(scheduler)])</span>
<span id="cb5-20">l.fit(epochs, lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>lr)</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">
<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">mode</th>
<th data-quarto-table-cell-role="th">loss</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>train</td>
<td>2.636</td>
</tr>
<tr class="even">
<td>0</td>
<td>eval</td>
<td>2.300</td>
</tr>
<tr class="odd">
<td>1</td>
<td>train</td>
<td>2.271</td>
</tr>
<tr class="even">
<td>1</td>
<td>eval</td>
<td>2.247</td>
</tr>
<tr class="odd">
<td>2</td>
<td>train</td>
<td>2.226</td>
</tr>
<tr class="even">
<td>2</td>
<td>eval</td>
<td>2.214</td>
</tr>
<tr class="odd">
<td>3</td>
<td>train</td>
<td>2.195</td>
</tr>
<tr class="even">
<td>3</td>
<td>eval</td>
<td>2.185</td>
</tr>
<tr class="odd">
<td>4</td>
<td>train</td>
<td>2.171</td>
</tr>
<tr class="even">
<td>4</td>
<td>eval</td>
<td>2.178</td>
</tr>
</tbody>
</table>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://lucasvw.github.io/posts/15_rnn/index_files/figure-html/cell-6-output-3.png" class="img-fluid"></p>
</div>
</div>
<p>So it’s doing a bit better (2.280 for the MLP, 2.178 for the RNN)</p>
</section>
<section id="combing-data-addition-or-concatenation" class="level2">
<h2 class="anchored" data-anchor-id="combing-data-addition-or-concatenation">Combing data: addition or concatenation</h2>
<p>As mentioned, the first time I learned about the fact that we are simply adding activations from the hidden layer and the embedding layer, I was pretty surprised. Instead of simple addition of the activations we could also concatenate these activations instead. This means that our <code>hidden2hidden</code> layer shape needs to be updated:</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> VariableContextRNNConcat(nn.Module):</span>
<span id="cb6-2">    </span>
<span id="cb6-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, c2i, hidden_size):</span>
<span id="cb6-4">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb6-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.c2i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> c2i</span>
<span id="cb6-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.hidden_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hidden_size</span>
<span id="cb6-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.input2hidden   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Embedding(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(c2i), hidden_size)</span>
<span id="cb6-8">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.hidden2hidden  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Linear(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>hidden_size, hidden_size)</span>
<span id="cb6-9">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.hidden2out     <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Linear(hidden_size, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(c2i))</span>
<span id="cb6-10">        </span>
<span id="cb6-11">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x):</span>
<span id="cb6-12">        inputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.input2hidden(x)                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># [bs, context_length, hidden_size]</span></span>
<span id="cb6-13">        </span>
<span id="cb6-14">        h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros((x.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.hidden_size)).to(device)</span>
<span id="cb6-15">        </span>
<span id="cb6-16">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(x.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]):</span>
<span id="cb6-17">            h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.cat([h, inputs[:,i,:]], dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># [bs, 2 x hidden_size]</span></span>
<span id="cb6-18">            h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.relu(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.hidden2hidden(h))        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># [bs, hidden_size]</span></span>
<span id="cb6-19">        </span>
<span id="cb6-20">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.hidden2out(h)                    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># [bs, classes]</span></span></code></pre></div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">rnn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> VariableContextRNNConcat(c2i, n_h)</span>
<span id="cb7-2"></span>
<span id="cb7-3">l <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Learner(rnn, dls, F.cross_entropy, torch.optim.Adam, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, subs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>subs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [SchedulerS(scheduler)])</span>
<span id="cb7-4">l.fit(epochs, lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>lr)</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">
<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">mode</th>
<th data-quarto-table-cell-role="th">loss</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>train</td>
<td>2.595</td>
</tr>
<tr class="even">
<td>0</td>
<td>eval</td>
<td>2.287</td>
</tr>
<tr class="odd">
<td>1</td>
<td>train</td>
<td>2.259</td>
</tr>
<tr class="even">
<td>1</td>
<td>eval</td>
<td>2.234</td>
</tr>
<tr class="odd">
<td>2</td>
<td>train</td>
<td>2.217</td>
</tr>
<tr class="even">
<td>2</td>
<td>eval</td>
<td>2.194</td>
</tr>
<tr class="odd">
<td>3</td>
<td>train</td>
<td>2.182</td>
</tr>
<tr class="even">
<td>3</td>
<td>eval</td>
<td>2.173</td>
</tr>
<tr class="odd">
<td>4</td>
<td>train</td>
<td>2.157</td>
</tr>
<tr class="even">
<td>4</td>
<td>eval</td>
<td>2.166</td>
</tr>
</tbody>
</table>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://lucasvw.github.io/posts/15_rnn/index_files/figure-html/cell-8-output-3.png" class="img-fluid"></p>
</div>
</div>
<p>In this configuration, this seems to give a slightly better performance</p>
</section>
<section id="pytorch-rnn" class="level2">
<h2 class="anchored" data-anchor-id="pytorch-rnn">PyTorch RNN</h2>
<p>Let’s use PyTorch’s <code>nn.RNN</code>, in the <code>PyTorchRNN</code> class defined below, we can see that this module replaces our <code>hidden2hidden</code> layer, and also takes care of the loop over the tokens in the context in our forward pass.</p>
<p>Some notes:</p>
<ul>
<li><code>nn.RNN</code> uses a tanh activation by default, we can use a relu activation instead by setting the <code>nonlinearity</code> argument</li>
<li>the (dummy) activations that we add for the processing of the first token need to have an additional empty dimension in first position (for the non bidirectional case) according to the <a href="https://pytorch.org/docs/stable/generated/torch.nn.RNN.html">documentation</a></li>
<li>when forwarding data through the rnn module, it expects the input data to have the context_length as first dimension. We can alter this by setting <code>batch_first=True</code></li>
<li><code>nn.RNN</code> returns two parameters. The first parameter is a tensor containing the hidden activation from each iteration, the second parameter has the final hidden activation. For the moment we are only interested in the last hidden activations and pass it to the output layer but we will use the aggregated hidden activations in a section below</li>
</ul>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> PyTorchRNN(nn.Module):</span>
<span id="cb8-2">    </span>
<span id="cb8-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, c2i, context_length, hidden_size):</span>
<span id="cb8-4">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb8-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.c2i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> c2i</span>
<span id="cb8-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.hidden_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hidden_size</span>
<span id="cb8-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.input2hidden   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Embedding(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(c2i), hidden_size)</span>
<span id="cb8-8">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rnn            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.RNN(hidden_size, hidden_size, nonlinearity<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'relu'</span>, batch_first<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb8-9">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.hidden2out     <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Linear(hidden_size, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(c2i))</span>
<span id="cb8-10">        </span>
<span id="cb8-11">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x):</span>
<span id="cb8-12">        inputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.input2hidden(x) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># [bs, context_length, hidden_size]</span></span>
<span id="cb8-13">        </span>
<span id="cb8-14">        h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, x.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.hidden_size)).to(device)</span>
<span id="cb8-15">        </span>
<span id="cb8-16">        hs, h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rnn(inputs, h)</span>
<span id="cb8-17">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># hs : [bs, context_length, hidden_size] -&gt; all hidden states</span></span>
<span id="cb8-18">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># h  : [1, bs, hidden_size]              -&gt; final hidden state</span></span>
<span id="cb8-19"></span>
<span id="cb8-20">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.hidden2out(h.squeeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># squeeze out the first empty dimension</span></span></code></pre></div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">rnn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PyTorchRNN(c2i, context_length, n_h)</span>
<span id="cb9-2"></span>
<span id="cb9-3">l <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Learner(rnn, dls, F.cross_entropy, torch.optim.Adam, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, subs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>subs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [SchedulerS(scheduler)])</span>
<span id="cb9-4">l.fit(epochs, lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>lr)</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">
<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">mode</th>
<th data-quarto-table-cell-role="th">loss</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>train</td>
<td>2.601</td>
</tr>
<tr class="even">
<td>0</td>
<td>eval</td>
<td>2.285</td>
</tr>
<tr class="odd">
<td>1</td>
<td>train</td>
<td>2.261</td>
</tr>
<tr class="even">
<td>1</td>
<td>eval</td>
<td>2.228</td>
</tr>
<tr class="odd">
<td>2</td>
<td>train</td>
<td>2.216</td>
</tr>
<tr class="even">
<td>2</td>
<td>eval</td>
<td>2.195</td>
</tr>
<tr class="odd">
<td>3</td>
<td>train</td>
<td>2.182</td>
</tr>
<tr class="even">
<td>3</td>
<td>eval</td>
<td>2.173</td>
</tr>
<tr class="odd">
<td>4</td>
<td>train</td>
<td>2.157</td>
</tr>
<tr class="even">
<td>4</td>
<td>eval</td>
<td>2.163</td>
</tr>
</tbody>
</table>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://lucasvw.github.io/posts/15_rnn/index_files/figure-html/cell-10-output-3.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="optimizing-dataloading-and-model-for-sequential-data-bptt" class="level2">
<h2 class="anchored" data-anchor-id="optimizing-dataloading-and-model-for-sequential-data-bptt">Optimizing dataloading and model for sequential data (BPTT)</h2>
<p>Although the previous RNN’s are perfectly valid models, there is a pretty big improvement we can make for the training of these models. To realize that, let’s have a look at the samples for the first name <em>Yuheng</em> in our dataset:</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">xb, yb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dls.train.dataset[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>]</span>
<span id="cb10-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> x,y <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(xb, yb):</span>
<span id="cb10-3">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(i2c[i.item()] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> x), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--&gt;'</span> ,i2c[y.item()])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>['.', '.', '.'] --&gt; y
['.', '.', 'y'] --&gt; u
['.', 'y', 'u'] --&gt; h
['y', 'u', 'h'] --&gt; e
['u', 'h', 'e'] --&gt; n
['h', 'e', 'n'] --&gt; g</code></pre>
</div>
</div>
<p>Consider what happens when we process this data <em>in order</em> with a batch size of 1. In the very first batch (forward pass) we start with an empty hidden state and compute the final hidden state <img src="https://latex.codecogs.com/png.latex?h_0"> from processing the three <code>'.'</code> tokens sequentially. These final activations are mapped to output activations and the loss is computed by comparing to the label <code>'y'</code>.</p>
<p>When moving to the second batch we start again with an empty hidden state, and since we have moved one letter forward we will process 2 <code>'.'</code> tokens and the <code>'y</code> token sequentially to get to the final hidden activation <img src="https://latex.codecogs.com/png.latex?h_1"> of this sample. But this is a bit silly, we could have just remembered our hidden activations <img src="https://latex.codecogs.com/png.latex?h_0"> from the first batch and process the next token (<code>'y'</code>) to get to the same result!</p>
<p>In other words: for each forward pass, we reinitialize the dummy hidden layer activations, and the first two tokens we process are in fact already processed in the previous sample. We could be more efficient by just using the hidden activations we computed on the previous sample and have one iteration over the new token in the context:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lucasvw.github.io/posts/15_rnn/rnn2.drawio.png" class="img-fluid figure-img" width="600"></p>
<figcaption class="figure-caption">More efficient data-processing for sequential data</figcaption>
</figure>
</div>
<p>Let’s simplify things and make the architecture symmetrical by not treating the very first sample in a different way. This also means we can get rid of the triple start symbol (<code>...</code>) and replace it with a single start symbol (<code>.</code>).</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lucasvw.github.io/posts/15_rnn/rnn3.drawio.png" class="img-fluid figure-img" width="600"></p>
<figcaption class="figure-caption">Symmetric architecture for efficient data-processing</figcaption>
</figure>
</div>
<p>With these changes, there are two practical problems we need to address:</p>
<ol type="1">
<li>How are we going to change the dataloader and dataset to feed this into a neural network?</li>
<li>Feeding the hidden activations into the processing of the next token means that the computational graph of the loss is getting more and more complex. If we do this for the entirety of our dataset, the backward pass will become intractable. We thus have to cut it off at some point.</li>
</ol>
<p>We need to go from samples (combinations of <code>X</code> and <code>y</code>) that look like this (and don’t pass over the hidden state from sample to sample):</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">xb, yb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dls.train.dataset[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>]</span>
<span id="cb12-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> x,y <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(xb, yb):</span>
<span id="cb12-3">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(i2c[i.item()] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> x), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--&gt;'</span> ,i2c[y.item()])</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>['.', '.', '.'] --&gt; y
['.', '.', 'y'] --&gt; u
['.', 'y', 'u'] --&gt; h
['y', 'u', 'h'] --&gt; e
['u', 'h', 'e'] --&gt; n
['h', 'e', 'n'] --&gt; g
['e', 'n', 'g'] --&gt; .</code></pre>
</div>
</div>
<p>to samples that simply look like this (and <em>do</em> pass the hidden state from sample to sample):</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.yuheng.'</span></span>
<span id="cb14-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(name)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb14-3">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"['</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>name[i]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'] --&gt; </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>name[i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>['.'] --&gt; y
['y'] --&gt; u
['u'] --&gt; h
['h'] --&gt; e
['e'] --&gt; n
['n'] --&gt; g
['g'] --&gt; .</code></pre>
</div>
</div>
<p>However, we want to keep the sequence length dimension since we will use that as the maximal amount of tokens through which we will backpropagate. This addresses the second issue mentioned above. We thus need a dataset that looks like this (for a sequence length of 3):</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"['.', 'y', 'u']"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--&gt;'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"['y', 'u', 'h']"</span>)</span>
<span id="cb16-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"['h', 'e', 'n']"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--&gt;'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"['e', 'n', 'g']"</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>['.', 'y', 'u'] --&gt; ['y', 'u', 'h']
['h', 'e', 'n'] --&gt; ['e', 'n', 'g']</code></pre>
</div>
</div>
<p>For the above example, we would still pass the hidden state computed in the first sample to the second sample, but only the values are passed and not the computational history. This is essentially what’s referred to as (truncated) backpropagation through time. Also, note that this means that one single sample (<code>['.', 'y', 'u']</code>) will create 3 outputs (for the 3 labels <code>['y', 'u', 'h']</code>). This means we will have to update our loss function as well.</p>
<p>Let’s create a new dataset for this purpose:</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> SequentialDataset():</span>
<span id="cb18-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, lines, c2i, sequence_length):</span>
<span id="cb18-3">        text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"."</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"."</span>.join(lines) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"."</span></span>
<span id="cb18-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb18-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb18-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(text) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> sequence_length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, sequence_length):</span>
<span id="cb18-7">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x.append([c2i[xi] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> xi <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> text[i: i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>sequence_length]])</span>
<span id="cb18-8">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y.append([c2i[yi] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> yi <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> text[i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>: i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>sequence_length<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]])</span>
<span id="cb18-9">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x)</span>
<span id="cb18-10">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y)</span>
<span id="cb18-11">    </span>
<span id="cb18-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__getitem__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, i):</span>
<span id="cb18-13">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x[i], <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y[i]</span>
<span id="cb18-14"></span>
<span id="cb18-15">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__len__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb18-16">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x)</span>
<span id="cb18-17">    </span>
<span id="cb18-18">train_ds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> SequentialDataset(train_lines, c2i, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb18-19">valid_ds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> SequentialDataset(val_lines, c2i, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>):</span>
<span id="cb19-2">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>([i2c[xi.item()] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> xi <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> train_ds[i][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--&gt;'</span>, [i2c[xi.item()] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> xi <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> train_ds[i][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>['.', 'y', 'u'] --&gt; ['y', 'u', 'h']
['h', 'e', 'n'] --&gt; ['e', 'n', 'g']</code></pre>
</div>
</div>
<p>Furthermore, we need to order our data in a different way. We need to be very careful with shuffling: we certainly can’t shuffle individual samples anymore in our Dataloader, since we need to maintain the sequence of our data.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>We could however shuffle the order of the <strong>complete</strong> names, at the beginning of each epoch. But let’s not be concerned with that for now, and just disable shuffling altogether.</p>
</div>
</div>
<p>Also, we need to make sure that the stream <em>continues from sample to sample across batches</em>, so that we can pass the (final) hidden states from the samples in a batch to the samples in the next batch. Consider a dataset consisting of 100 sequential samples:</p>
<p><img src="https://lucasvw.github.io/posts/15_rnn/rnn5.drawio.png" class="img-fluid" width="600"></p>
<p>If we order the data in this way, only the very first batch of each epoch will be using a dummy hidden state equal to zero, all other iterations in all the batches will be using the correct (previously computed and sequentially passed) hidden state.</p>
<p>To get these batches into the model during training, we need to order the data <em>vertically</em>, so 1, 21, 41, 61, 81, 2, 22, 42, etc. Let’s do so with a custom Sampler (for details on samplers, check out this earlier blog <a href="https://lucasvw.github.io/posts/09_nntrain_ds/#next-up-shuffling-the-data">post</a>):</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lucasvw.github.io/posts/15_rnn/sampler_order.drawio.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">“Vertical” sampling order</figcaption>
</figure>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> VerticalSampler():</span>
<span id="cb21-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, ds, batch_size):</span>
<span id="cb21-3">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.batch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> batch_size</span>
<span id="cb21-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.batches <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(ds) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.batch_size</span>
<span id="cb21-5">        </span>
<span id="cb21-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__iter__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb21-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.batches):</span>
<span id="cb21-8">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.batch_size):</span>
<span id="cb21-9">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">yield</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.batches<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>j</span>
<span id="cb21-10">                </span>
<span id="cb21-11">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__len__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb21-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.batches <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.batch_size</span></code></pre></div>
</div>
<p>With this sampler we can then create a dataloader with the associated batch size to load exactly the batches into the model as described!</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">train_dl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.utils.data.DataLoader(train_ds, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, sampler<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>VerticalSampler(train_ds, bs), batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>bs)</span>
<span id="cb22-2">valid_dl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.utils.data.DataLoader(valid_ds, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, sampler<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>VerticalSampler(valid_ds, bs), batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>bs)</span>
<span id="cb22-3"></span>
<span id="cb22-4">dls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataLoaders(train_dl, valid_dl)</span></code></pre></div>
</div>
<p>Now let’s update our model to pass all the hidden states to the output layer:</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> PyTorchRNNMultiOutput(nn.Module):</span>
<span id="cb23-2">    </span>
<span id="cb23-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, c2i, hidden_size, bs):</span>
<span id="cb23-4">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb23-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.c2i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> c2i</span>
<span id="cb23-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.bs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bs</span>
<span id="cb23-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.hidden_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hidden_size</span>
<span id="cb23-8">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.register_buffer(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'h'</span>, torch.zeros((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, bs, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.hidden_size)))</span>
<span id="cb23-9">        </span>
<span id="cb23-10">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.input2hidden   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Embedding(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(c2i), hidden_size)</span>
<span id="cb23-11">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rnn            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.RNN(hidden_size, hidden_size, nonlinearity<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'relu'</span>, batch_first<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb23-12">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.hidden2out     <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Linear(hidden_size, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(c2i))</span>
<span id="cb23-13">        </span>
<span id="cb23-14">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x):</span>
<span id="cb23-15">        inputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.input2hidden(x)</span>
<span id="cb23-16">        hs, h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rnn(inputs, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h)</span>
<span id="cb23-17">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># hs : [bs, context_length, hidden_size]</span></span>
<span id="cb23-18">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># h  : [1, bs, hidden_size]</span></span>
<span id="cb23-19">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> h.detach()</span>
<span id="cb23-20">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.hidden2out(hs)</span></code></pre></div>
</div>
<p>And finally, we have to create a custom loss function that can deal with the multiple output activations and multiple labels:</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> multi_output_cross_entropy(logits, targets):</span>
<span id="cb24-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># logits = [bs, context_length, output_classes]</span></span>
<span id="cb24-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># targets = [bs, context_length]</span></span>
<span id="cb24-4">    </span>
<span id="cb24-5">    targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> targets.view(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb24-6">    </span>
<span id="cb24-7">    bs, context_length, output_classes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> logits.shape</span>
<span id="cb24-8">    logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> logits.view(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, output_classes)</span>
<span id="cb24-9">    </span>
<span id="cb24-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> F.cross_entropy(logits, targets)</span></code></pre></div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> get_dls(context_length, batch_size):</span>
<span id="cb25-2">    train_ds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> SequentialDataset(train_lines, c2i, context_length)</span>
<span id="cb25-3">    valid_ds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> SequentialDataset(val_lines, c2i, context_length)</span>
<span id="cb25-4">        </span>
<span id="cb25-5">    train_dl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.utils.data.DataLoader(train_ds, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, sampler<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>Sampler(train_ds, batch_size), batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>batch_size)</span>
<span id="cb25-6">    valid_dl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.utils.data.DataLoader(valid_ds, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, sampler<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>Sampler(valid_ds, batch_size), batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>batch_size)</span>
<span id="cb25-7"></span>
<span id="cb25-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> DataLoaders(train_dl, valid_dl)</span></code></pre></div>
</div>
<p>Note that we drop the batch size to a value of 300 (1/3 of 1000). We do this, to roughly keep the amount of weight updates per batch constant. Previously, we had 1000 sequences in the batch, and from each sequence we would receive one “weight update”. Now, we have 3 times the amount of sequences in a batch, so we have to reduce the batch size by 3 to keep the amount of “weight updates” roughly equal.</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Train parameters</span></span>
<span id="cb26-2">epochs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb26-3">lr     <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-2</span></span>
<span id="cb26-4">bs     <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span></span>
<span id="cb26-5"></span>
<span id="cb26-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Hyperparameters</span></span>
<span id="cb26-7">context_length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb26-8">n_h            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb26-9"></span>
<span id="cb26-10">dls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_dls(context_length, bs)</span>
<span id="cb26-11">rnn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PyTorchRNNMultiOutput(c2i, n_h, bs)</span>
<span id="cb26-12"></span>
<span id="cb26-13">subs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [ProgressS(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>),</span>
<span id="cb26-14">        MetricsS(),</span>
<span id="cb26-15">        DeviceS(device)]</span>
<span id="cb26-16"></span>
<span id="cb26-17">scheduler <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> partial(torch.optim.lr_scheduler.OneCycleLR, max_lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>lr, epochs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>epochs, steps_per_epoch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(dls.train))</span>
<span id="cb26-18"></span>
<span id="cb26-19">l <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Learner(rnn, dls, multi_output_cross_entropy, torch.optim.Adam, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, subs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>subs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [SchedulerS(scheduler)])</span>
<span id="cb26-20">l.fit(epochs, lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>lr)</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">
<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">mode</th>
<th data-quarto-table-cell-role="th">loss</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>train</td>
<td>2.518</td>
</tr>
<tr class="even">
<td>0</td>
<td>eval</td>
<td>2.226</td>
</tr>
<tr class="odd">
<td>1</td>
<td>train</td>
<td>2.175</td>
</tr>
<tr class="even">
<td>1</td>
<td>eval</td>
<td>2.164</td>
</tr>
<tr class="odd">
<td>2</td>
<td>train</td>
<td>2.115</td>
</tr>
<tr class="even">
<td>2</td>
<td>eval</td>
<td>2.128</td>
</tr>
<tr class="odd">
<td>3</td>
<td>train</td>
<td>2.063</td>
</tr>
<tr class="even">
<td>3</td>
<td>eval</td>
<td>2.101</td>
</tr>
<tr class="odd">
<td>4</td>
<td>train</td>
<td>2.024</td>
</tr>
<tr class="even">
<td>4</td>
<td>eval</td>
<td>2.091</td>
</tr>
</tbody>
</table>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://lucasvw.github.io/posts/15_rnn/index_files/figure-html/cell-22-output-3.png" class="img-fluid"></p>
</div>
</div>
<p>Performance is pretty good, however what’s up with the spikes in the loss? These spikes occur at the beginning of every epoch and they happen because moving from the last batch in an epoch, to the first batch in the next epoch is not a sequential step in the data. Looking at the image above in which we laid out the “vertical ordering of the data”, wee see that for the first batch in any epoch &gt; 1, we would feed the hidden state originating from samples (20, 40, 60, 80, 100) into the samples (1, 21, 41, 61, 81), e.g.:</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">frm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb27-2">to  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">21</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">41</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">61</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">81</span>)</span>
<span id="cb27-3"></span>
<span id="cb27-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> f, t <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(frm,to):</span>
<span id="cb27-5">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'from: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>f<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:3d}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> to: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>t<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:2d}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>from:  20 to:  1
from:  40 to: 21
from:  60 to: 41
from:  80 to: 61
from: 100 to: 81</code></pre>
</div>
</div>
<p>And this is obviously not sequential. The easiest solution is to reset the hidden state to zero at the beginning of each epoch, let’s do this with a very small <code>Subscriber</code>:</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>Based on the observation that we could realign the hidden activations by moving them one row down, I implemented this solution but was surprised to see that this doesn’t improve things at all. I then found that we generally don’t have a fully connected sequential dataset that fits exactly into a whole number of batches, we thus lose some data in the end, and the data doesn’t connect easily by shifting it “one row down”. In terms of the sample ordering diagram above: we generally don’t have (20, 40, 60, 80, 100) as final batch of an epoch but instead something like (18, 38, 58, 78, 98).</p>
</div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> HiddenStateResetterS(Subscriber):</span>
<span id="cb29-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> before_epoch(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, learn):</span>
<span id="cb29-3">        learn.model.reset_hidden_state()</span>
<span id="cb29-4">        </span>
<span id="cb29-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@fc.patch</span></span>
<span id="cb29-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> reset_hidden_state(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>:PyTorchRNNMultiOutput):</span>
<span id="cb29-7">    device <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h.get_device()</span>
<span id="cb29-8">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros_like(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h).to(device)</span></code></pre></div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Train parameters</span></span>
<span id="cb30-2">epochs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb30-3">lr     <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-2</span></span>
<span id="cb30-4">bs     <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span></span>
<span id="cb30-5"></span>
<span id="cb30-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Hyperparameters</span></span>
<span id="cb30-7">context_length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb30-8">n_h            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb30-9"></span>
<span id="cb30-10">dls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_dls(context_length, bs)</span>
<span id="cb30-11">rnn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PyTorchRNNMultiOutput(c2i, context_length, n_h, bs)</span>
<span id="cb30-12"></span>
<span id="cb30-13">subs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [ProgressS(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>),</span>
<span id="cb30-14">        MetricsS(),</span>
<span id="cb30-15">        DeviceS(device),</span>
<span id="cb30-16">        HiddenStateResetterS()]</span>
<span id="cb30-17"></span>
<span id="cb30-18">scheduler <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> partial(torch.optim.lr_scheduler.OneCycleLR, max_lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>lr, epochs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>epochs, steps_per_epoch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(dls.train))</span>
<span id="cb30-19"></span>
<span id="cb30-20">l <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Learner(rnn, dls, multi_output_cross_entropy, torch.optim.Adam, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, subs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>subs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [SchedulerS(scheduler)])</span>
<span id="cb30-21">l.fit(epochs, lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>lr)</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">
<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">mode</th>
<th data-quarto-table-cell-role="th">loss</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>train</td>
<td>2.520</td>
</tr>
<tr class="even">
<td>0</td>
<td>eval</td>
<td>2.221</td>
</tr>
<tr class="odd">
<td>1</td>
<td>train</td>
<td>2.178</td>
</tr>
<tr class="even">
<td>1</td>
<td>eval</td>
<td>2.158</td>
</tr>
<tr class="odd">
<td>2</td>
<td>train</td>
<td>2.113</td>
</tr>
<tr class="even">
<td>2</td>
<td>eval</td>
<td>2.115</td>
</tr>
<tr class="odd">
<td>3</td>
<td>train</td>
<td>2.064</td>
</tr>
<tr class="even">
<td>3</td>
<td>eval</td>
<td>2.080</td>
</tr>
<tr class="odd">
<td>4</td>
<td>train</td>
<td>2.025</td>
</tr>
<tr class="even">
<td>4</td>
<td>eval</td>
<td>2.069</td>
</tr>
</tbody>
</table>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://lucasvw.github.io/posts/15_rnn/index_files/figure-html/cell-25-output-3.png" class="img-fluid"></p>
</div>
</div>
<p>The loss improved a bit from this fix, and the spikes are smaller, but still visible. This is not surprising since the very first batch in each epoch still has the difficulty of working with an empty hidden state. This is not a big issue however, since the hidden state is quickly filling up. Accordingly, the following batches show again a loss that is in-line with the loss of the end of the previous epoch.</p>
<p>Last but not least, PyTorch <code>nn.RNN</code> accepts two parameters, one for the features in the inputs and one for the features in the hidden state. Previously we used one single parameter for this to make sure we can add the activations. Apparently, <code>nn.RNN</code> is doing another multiplication to align them. So let’s use these two values as separate arguments to see whether we can further improve performance through tweaking them.</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> PyTorchRNNMultiOutput(nn.Module):</span>
<span id="cb31-2">    </span>
<span id="cb31-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, c2i, embedding_dim, hidden_size, bs):</span>
<span id="cb31-4">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb31-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.c2i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> c2i</span>
<span id="cb31-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.bs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bs</span>
<span id="cb31-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.embedding_dim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> embedding_dim</span>
<span id="cb31-8">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.hidden_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hidden_size</span>
<span id="cb31-9">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># register as buffer so that its moved to the device by the DeviceS Subscriber</span></span>
<span id="cb31-10">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.register_buffer(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'h'</span>, torch.zeros((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, bs, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.hidden_size))) </span>
<span id="cb31-11">        </span>
<span id="cb31-12">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.input2hidden   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Embedding(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(c2i), embedding_dim)</span>
<span id="cb31-13">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rnn            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.RNN(embedding_dim, hidden_size, nonlinearity<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'relu'</span>, batch_first<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb31-14">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.hidden2out     <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Linear(hidden_size, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(c2i))</span>
<span id="cb31-15">        </span>
<span id="cb31-16">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x):</span>
<span id="cb31-17">        inputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.input2hidden(x)</span>
<span id="cb31-18">        hs, h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rnn(inputs, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h)</span>
<span id="cb31-19">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># hs : [bs, context_length, hidden_size]</span></span>
<span id="cb31-20">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># h  : [1, bs, hidden_size]</span></span>
<span id="cb31-21">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> h.detach()</span>
<span id="cb31-22">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.hidden2out(hs)</span>
<span id="cb31-23">    </span>
<span id="cb31-24">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> reset_hidden_state(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb31-25">        device <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h.get_device()</span>
<span id="cb31-26">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros_like(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h).to(device)</span></code></pre></div>
</div>
<p>Trying for around 10 minutes with different settings shows me that performance can be slightly improved by increasing the size of the hidden state by quite a bit, and keeping the embedding dimension smaller:</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Train parameters</span></span>
<span id="cb32-2">epochs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb32-3">lr     <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-2</span></span>
<span id="cb32-4">bs     <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span></span>
<span id="cb32-5"></span>
<span id="cb32-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Hyperparameters</span></span>
<span id="cb32-7">context_length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb32-8">n_h            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span></span>
<span id="cb32-9">embedding_dim  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb32-10"></span>
<span id="cb32-11">dls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_dls(context_length, bs)</span>
<span id="cb32-12">rnn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PyTorchRNNMultiOutput(c2i, embedding_dim, n_h, bs)</span>
<span id="cb32-13"></span>
<span id="cb32-14">subs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [ProgressS(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>),</span>
<span id="cb32-15">        MetricsS(),</span>
<span id="cb32-16">        DeviceS(device),</span>
<span id="cb32-17">        HiddenStateResetterS()]</span>
<span id="cb32-18"></span>
<span id="cb32-19">scheduler <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> partial(torch.optim.lr_scheduler.OneCycleLR, max_lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>lr, epochs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>epochs, steps_per_epoch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(dls.train))</span>
<span id="cb32-20"></span>
<span id="cb32-21">l <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Learner(rnn, dls, multi_output_cross_entropy, torch.optim.Adam, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, subs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>subs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [SchedulerS(scheduler)])</span>
<span id="cb32-22">l.fit(epochs, lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>lr)</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">
<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">mode</th>
<th data-quarto-table-cell-role="th">loss</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>train</td>
<td>2.370</td>
</tr>
<tr class="even">
<td>0</td>
<td>eval</td>
<td>2.180</td>
</tr>
<tr class="odd">
<td>1</td>
<td>train</td>
<td>2.133</td>
</tr>
<tr class="even">
<td>1</td>
<td>eval</td>
<td>2.131</td>
</tr>
<tr class="odd">
<td>2</td>
<td>train</td>
<td>2.045</td>
</tr>
<tr class="even">
<td>2</td>
<td>eval</td>
<td>2.056</td>
</tr>
<tr class="odd">
<td>3</td>
<td>train</td>
<td>1.928</td>
</tr>
<tr class="even">
<td>3</td>
<td>eval</td>
<td>2.005</td>
</tr>
<tr class="odd">
<td>4</td>
<td>train</td>
<td>1.817</td>
</tr>
<tr class="even">
<td>4</td>
<td>eval</td>
<td>1.986</td>
</tr>
</tbody>
</table>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://lucasvw.github.io/posts/15_rnn/index_files/figure-html/cell-27-output-3.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="sampling-names" class="level2">
<h2 class="anchored" data-anchor-id="sampling-names">Sampling names</h2>
<p>And as we did with the MLP, let’s conclude with some sampled names from this model</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@fc.patch</span></span>
<span id="cb33-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> generate(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>:PyTorchRNNMultiOutput, n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb33-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># For unbatched input we need a 2D hidden state tensor of size [1, hidden_size]</span></span>
<span id="cb33-4">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.hidden_size)).cuda()</span>
<span id="cb33-5">    </span>
<span id="cb33-6">    names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb33-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n):</span>
<span id="cb33-8">        name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span></span>
<span id="cb33-9">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>:</span>
<span id="cb33-10">            idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor([c2i[name[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]]).cuda()</span>
<span id="cb33-11">            logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.forward(idx)</span>
<span id="cb33-12">            s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.multinomial(F.softmax(logits, dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>generator)</span>
<span id="cb33-13">            c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> i2c[s.item()]</span>
<span id="cb33-14">            name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> c</span>
<span id="cb33-15">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>:</span>
<span id="cb33-16">                names.append(name)</span>
<span id="cb33-17">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">break</span></span>
<span id="cb33-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> names</span></code></pre></div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1">rnn.generate()</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>['.elanora.',
 '.alaijah.',
 '.zabra.',
 '.diriyah.',
 '.juannabella.',
 '.kayahni.',
 '.ziak.',
 '.skydir.',
 '.braved.',
 '.robina.']</code></pre>
</div>
</div>
</section>
<section id="outlook" class="level2">
<h2 class="anchored" data-anchor-id="outlook">Outlook</h2>
<p>We have come quite a long way, and we have seen that an RNN is in essence not very different from the MLP created earlier. The complexity in my opinion only has to do with the different way of processing and loading the data, which greatly reduces the time to train such models. In the next post we are going to have a look at long short-term memory (LSTM) networks and gated recurrent unit networks (with lot’s of fancy diagrams 😏).</p>


</section>

 ]]></description>
  <category>code</category>
  <category>neural network</category>
  <category>nlp</category>
  <category>rnns</category>
  <guid>https://lucasvw.github.io/posts/15_rnn/index.html</guid>
  <pubDate>Thu, 14 Sep 2023 00:00:00 GMT</pubDate>
  <media:content url="https://lucasvw.github.io/posts/15_rnn/rnn3.drawio.png" medium="image" type="image/png" height="71" width="144"/>
</item>
<item>
  <title>Multilayer Perceptron language model</title>
  <dc:creator>Lucas van Walstijn</dc:creator>
  <link>https://lucasvw.github.io/posts/14_mlp/index.html</link>
  <description><![CDATA[ 



<p>In the previous <a href="https://lucasvw.github.io/posts/13_ngram/">post</a> we had a first look at language models and discussed the n-gram model. Specifically, we:</p>
<ul>
<li>created a count based model</li>
<li>created a neural network based model</li>
<li>established an equivalence between both (hand-wavingly theoretical and emperical)</li>
<li>discussed the curse of dimensionality and the sparse count matrix for n-grams with increasing values for n</li>
</ul>
<p>In this post we are going to have a look at a neural network that is described in Bengio et al: <a href="https://www.jmlr.org/papers/volume3/bengio03a/bengio03a.pdf">A Neural Probabilistic Language Model</a> which aims to circumvent this curse of dimensionality by making use of embeddings.</p>
<p>This post is inspired by the <a href="https://www.youtube.com/playlist?list=PLAqhIrjkxbuWI23v9cThsA9GvCAUhRvKZ">series</a> from Andrej Karpathy’s on neural networks.</p>
<section id="data" class="level2">
<h2 class="anchored" data-anchor-id="data">Data</h2>
<p>Everything starts with training data, for a description see the previous <a href="https://lucasvw.github.io/posts/13_ngram/">post</a></p>
<div class="cell">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> functools <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">reduce</span>, partial</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pathlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Path</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> urllib.request <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> urlretrieve</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> nn</span>
<span id="cb1-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn.functional <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> F</span>
<span id="cb1-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-10"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torcheval.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> tem</span>
<span id="cb1-11"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> fastcore.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> fc</span>
<span id="cb1-12"></span>
<span id="cb1-13"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> nntrain.dataloaders <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> DataLoaders</span>
<span id="cb1-14"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> nntrain.learner <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb1-15"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> nntrain.activations <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb1-16"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> nntrain.acceleration <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb1-17"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> nntrain.ngram <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span></code></pre></div>
</details>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">########### Load the data ###########</span></span>
<span id="cb2-2">path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'./data'</span>)</span>
<span id="cb2-3">path.mkdir(parents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, exist_ok<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb2-4">path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'names.txt'</span></span>
<span id="cb2-5">url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'https://raw.githubusercontent.com/karpathy/makemore/master/names.txt'</span></span>
<span id="cb2-6"></span>
<span id="cb2-7">_ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> urlretrieve(url, path)</span>
<span id="cb2-8"></span>
<span id="cb2-9"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(path, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb2-10">    lines <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f.read().splitlines()</span>
<span id="cb2-11">    </span>
<span id="cb2-12">random.seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb2-13">random.shuffle(lines)</span>
<span id="cb2-14"></span>
<span id="cb2-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">### Create vocabulary and mappings </span><span class="al" style="color: #AD0000;
background-color: null;
font-style: inherit;">###</span></span>
<span id="cb2-16">unique_chars <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>.join(lines)))</span>
<span id="cb2-17">unique_chars.sort()</span>
<span id="cb2-18">vocabulary <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> unique_chars</span>
<span id="cb2-19"></span>
<span id="cb2-20">c2i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {c:i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i, c <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(vocabulary)}</span>
<span id="cb2-21">i2c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {i:c <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i, c <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(vocabulary)}</span></code></pre></div>
</div>
</section>
<section id="embeddings-relation-to-integer-and-one-hot-encoding" class="level2">
<h2 class="anchored" data-anchor-id="embeddings-relation-to-integer-and-one-hot-encoding">Embeddings: relation to integer and one-hot encoding</h2>
<p>In the previous post we introduced embeddings in the following way:</p>
<div class="callout-embedding-layer">
<p>An <strong>embedding layer</strong> is a layer that is used to “encode” our data, which roughly translates to the way we input our data into a neural network. We already saw above that we numericalized our characters (a-z) as integers. We will have to do something similar for our neural network, since we can’t input characters into a neural network. However, instead of feeding integers into our network, we can also employ an embedding layer, which will basically create a vector out of our integers. Each integer value will be mapped to it’s own vector, and the values contained in this vector will be learned during training. The advantage of this, is that the model can easily learn different “attributes” that make up the individual tokens. For example, it <em>could</em> use the first dimension in the vector to denote whether the token is a vowel (a, e, i, o, u) and the second dimension to represent the likelihood of starting a sentence. The emphasis in the last sentence is on <em>could</em>, since these things have to be learned by the network itself during the training-process.</p>
</div>
<section id="integer-encoding" class="level3">
<h3 class="anchored" data-anchor-id="integer-encoding">Integer encoding</h3>
<p>This is all well and good, but let’s add some more detail and intuition. Let’s go back to ultimate basics and see what happens if we feed numericalized tokens (integers) directly into a model using context length of 1, and a first linear layer consisting of 4 neurons (for simplicity we ignore the bias term). Since we have a context length of 1, one single sample consists of one value (the integer encoded value of our token) and is depicted in blue. We have 4 neurons, which weights are also just a single value, depicted in green. The activations of the 4 neurons are depicted in yellow.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lucasvw.github.io/posts/14_mlp/mm2.png" class="img-fluid figure-img" width="300"></p>
<figcaption class="figure-caption">Matrix multiplication of one sample consisting of 1 token (blue matrix) with a 4 neuron linear layer (green matrix). On the bottom: the simple multiplication associated with the activation of the first neuron</figcaption>
</figure>
</div>
<p>As you can see, the integer values are just being multiplied by the weights of the linear layer. This establishes an implicit relation between our inputs (blue matrix) in terms of the activation (yellow matrix). Consider a context <em>e</em> (numericalized 4) and another context <em>a</em> (numericalized 1). Because of the linearity, the activations of the former will always be 4 times as large as the activations of the latter. No matter how we change the weights in our network, this implicit relation will always be there, and there is no good reason why this should be the case. Moreover, the factor (4) is a result from the ordering of our vocabulary. If instead we would have <img src="https://latex.codecogs.com/png.latex?a"> in 10<sup>th</sup> position, and <img src="https://latex.codecogs.com/png.latex?e"> in 20<sup>th</sup> position, the difference would have been a factor of 2. It should be clear that these kind of implicit linear relations don’t fit to our (<em>nominal</em>) data, and should only be used for <em>ratio</em>, <em>interval</em> and possibly <em>ordinal</em> data.</p>
</section>
<section id="one-hot-encoding" class="level3">
<h3 class="anchored" data-anchor-id="one-hot-encoding">One-hot encoding</h3>
<p>So how then should we treat these variables? If you are familiar with linear regression you have probably heard of <em>one hot encoding</em>. This is a technique in which we replace integer values with a vector. This vector will be of length equal to the amount of possible values the integer can take on and consists of zeros in all but one position, in that nonzero position the value will be <code>1</code>. Each integer will have this <code>1</code> in a different position. For a vocabulary of length 4, the 4 vectors will be:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>):</span>
<span id="cb3-2">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(F.one_hot(torch.tensor(i), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>tensor([1, 0, 0, 0])
tensor([0, 1, 0, 0])
tensor([0, 0, 1, 0])
tensor([0, 0, 0, 1])</code></pre>
</div>
</div>
<p>So we have turned our single integer variable, into 4 distinct (binary) variables. Each of these 4 variables will have it’s own associated weight (parameter) in linear regression and the contributions to the output are thus totally independant of another. To see this, let’s assume we fit a linear function: <img src="https://latex.codecogs.com/png.latex?y%20=%20b%20%5Ccdot%20x"> where <img src="https://latex.codecogs.com/png.latex?x"> is an integer variable taking on 4 values and is transformed into 4 binary variables as shown above <img src="https://latex.codecogs.com/png.latex?z_1,%20..%20,%20z_4">. We then have:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7D%0Ay%20&amp;=%20b_1%20z_1%20+%20b_2%20z_2%20+%20b_3%20z_3%20+%20b_4%20z_4%20%20%5C%5C%0Ay%20&amp;=%20%5Cleft.%0A%20%20%5Cbegin%7Bcases%7D%0A%20%20%20%20b_1,%20&amp;%20%5Ctext%7Bfor%20%7D%20x%20=%201%20(z_1%20=%201,%20z_2%20=%200,%20z_3%20=%200,%20z_4%20=%200)%20%5C%5C%0A%20%20%20%20b_2,%20&amp;%20%5Ctext%7Bfor%20%7D%20x%20=%202%20(z_1%20=%200,%20z_2%20=%201,%20z_3%20=%200,%20z_4%20=%200)%20%5C%5C%0A%20%20%20%20b_3,%20&amp;%20%5Ctext%7Bfor%20%7D%20x%20=%203%20(z_1%20=%200,%20z_2%20=%200,%20z_3%20=%201,%20z_4%20=%200)%20%5C%5C%0A%20%20%20%20b_4,%20&amp;%20%5Ctext%7Bfor%20%7D%20x%20=%204%20(z_1%20=%200,%20z_2%20=%200,%20z_3%20=%200,%20z_4%20=%201)%20%5C%5C%0A%20%20%5Cend%7Bcases%7D%0A%20%20%5Cright%5C%7D%0A%5Cend%7Balign%7D"></p>
<p>Since <img src="https://latex.codecogs.com/png.latex?b_1"> through <img src="https://latex.codecogs.com/png.latex?b_4"> can take on any value during fitting, we got rid of our implicit relation between our tokens!</p>
</section>
<section id="embedding-encoding" class="level3">
<h3 class="anchored" data-anchor-id="embedding-encoding">Embedding encoding</h3>
<p>For a neural network, something very similar happens. Here an example when we feed these 4 vectors into a linear layer consisting of <strong>2 neurons</strong>:</p>
<div class="cell">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">integer_value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb5-2">one_hot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.one_hot(torch.tensor(integer_value), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>).to(torch.float32)</span>
<span id="cb5-3">linear <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.rand(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb5-4"></span>
<span id="cb5-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"integer value"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:&lt;25}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>integer_value<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb5-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"one hot representation"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:&lt;25}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>one_hot<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>tolist()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb5-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'weight matrix of linear layer:'</span>)</span>
<span id="cb5-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(linear)</span>
<span id="cb5-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'activations of one hot encoded vector of integer "0" with linear layer:'</span>)</span>
<span id="cb5-10"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(one_hot<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>linear)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>integer value            : 0
one hot representation   : [1.0, 0.0, 0.0, 0.0]
weight matrix of linear layer:
tensor([[0.1354, 0.9329],
        [0.0975, 0.1335],
        [0.4640, 0.6912],
        [0.3926, 0.5246]])
activations of one hot encoded vector of integer "0" with linear layer:
tensor([0.1354, 0.9329])</code></pre>
</div>
</div>
<p>So the activations are just the weights associated with the first input to both neurons! If you are familiar with the drawing of neural networks as connected neurons, the activations are equal to the highlighted weights in the drawing below:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lucasvw.github.io/posts/14_mlp/mm3.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">The highlighted weights that get pulled out of the weight matrix for a one-hot representation of integer <code>0</code></figcaption>
</figure>
</div>
<p>We conclude: <strong>multiplying a one-hot encoded vector with a weight matrix, simply returns the weights of the associated row of that weight matrix</strong>.</p>
<p>Mathematically this is thus equivalent to indexing into the weight matrix at the row equal to the integer value:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">linear[integer_value]</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>tensor([0.1354, 0.9329])</code></pre>
</div>
</div>
<p>If we compare now the inputs (integer values) with the outputs (vector of floats), we have verified the statement we made earlier: <em>However, instead of feeding integers into our network, we can also employ an embedding layer, which will basically create a vector out of our integers</em>.</p>
<p>And now let’s also do this explicitly with an <code>nn.Embedding</code> layer:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">emb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Embedding(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb9-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'weight matrix of embedding layer:'</span>)</span>
<span id="cb9-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(emb.weight.data)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb9-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'activations of embedding layer of integer "0":'</span>)</span>
<span id="cb9-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(emb(torch.tensor(integer_value)).data)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>weight matrix of embedding layer:
tensor([[-0.5065, -0.5940],
        [-0.9815, -0.3719],
        [-1.2932, -1.1999],
        [ 0.3102,  0.2803]])


activations of embedding layer of integer "0":
tensor([-0.5065, -0.5940])</code></pre>
</div>
</div>
<p>Since the parameters of this layer are learned through backpropagation, Bengio et al refer to this as <em>learning a distributed representation for words</em> (in our case we use it for <em>characters</em> instead of <em>words</em>, but the idea is the same). The distributed representation (in the example above a vector of length 2), is what we previously referred to as the different <em>attributes</em> the model can learn that are associated with the tokens.</p>
</section>
</section>
<section id="embeddings-mapping-inputs-into-n-dimensional-space" class="level2">
<h2 class="anchored" data-anchor-id="embeddings-mapping-inputs-into-n-dimensional-space">Embeddings: mapping inputs into n-dimensional space</h2>
<p>These different <em>attributes</em> is also what we refer to when saying that embedding layers <em>map inputs into an n-dimensional space</em>. With n being the amount of attributes, generally smaller then the size of the vocabulary. For example, if we would create an embedding layer with depth of (number of <em>attributes</em>) 4 we would have:</p>
<ul>
<li>integer encoded tokens: 1D (27 possible values)</li>
<li>one-hot encoding: 27D (binary values: either zero or one)</li>
<li>embedding: 4D (real / float valued)</li>
</ul>
<p>And because the weights are learned, the model can place our inputs into this 4D space in positions it finds useful (for learning the task at hand, that is). Inputs that are similar can be placed closely together, and input that are very different can be placed further apart. Moreover, since this space can (and generally is) high dimensional, it can place inputs close together on certain dimensions, but far apart in other dimensions. This allows for a differentiated representation of our inputs, where on some <em>attributes</em> inputs might be similar, but on other <em>attributes</em> very different.</p>
</section>
<section id="embeddings-the-key-to-generalization" class="level2">
<h2 class="anchored" data-anchor-id="embeddings-the-key-to-generalization">Embeddings: the key to generalization</h2>
<p>A final intuition I would like to share, has to do with being “out of distribution”. Let’s say during training you have encountered the sentences (for this example we switch to sentences and words, instead of names and characters):</p>
<ul>
<li>a dog is walking through the kitchen</li>
<li>a dog is walking through the living room</li>
<li>a dog is walking through the garden</li>
</ul>
<p>But never a similar sentence for a cat. If an n-gram (<img src="https://latex.codecogs.com/png.latex?n%20%3E=%206">) model has to fill in the next word in the sequence: “a cat is walking through the …” it wouldn’t know what to reply, because we are <em>out of distribution</em>: during training we never encountered such a context so it has nothing to go on. The learned probability distribution of an n-gram model is only possible when the model has seen examples of the exact context (possibly with different labels, which are the basis for the <em>probability distribution</em>).</p>
<p>However, for a model using a learned distributed representation, we ideally would like the model to be able to use it’s knowledge of cats being similar to dogs, and thus use the training data it has seen on dogs to be able to answer: <em>kitchen</em>, <em>living room</em> or <em>garden</em>. This kind of generalization becomes possible with embeddings since the model can learn that the vector for cats is similar to the vector for dogs.</p>
<p>This similarity in vector space, will lead to similar outputs. In the words of Bengio et al:</p>
<p><em>“In the proposed model, it will so generalize because “similar” words are expected to have a similar feature vector, and because the probability function is a smooth function of these feature values, a small change in the features will induce a small change in the probability. Therefore, the presence of only one of the above sentences in the training data will increase the probability, not only of that sentence, but also of its combinatorial number of “neighbors” in sentence space (as represented by sequences of feature vectors)“</em>.</p>
</section>
<section id="using-embeddings-effectively" class="level2">
<h2 class="anchored" data-anchor-id="using-embeddings-effectively">Using Embeddings effectively</h2>
<p>Now that we have a better understanding of embeddings both mathematically and conceptually, let’s turn to the paper of Bengio et al.&nbsp;Where they make smart use of embeddings to circumvent the problems with huge weight matrices for n-grams with large n.</p>
<p>The following (simplified) architecture diagram is from that paper and describes pretty well what’s going on.</p>
<p>On the bottom we see three inputs, so we are using a context of length 3. These inputs are feeded into <em>the same</em> embedding layer C. Also, this embedding layer as a depth <em>smaller then the size of the vocabulary</em></p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>For the n-gram neural network model we actually also used an embedding layer, but it has a depth equal to the size of the vocabulary. We were thus mapping our integers into a 27D space, you can imagine that with just 27 integers that space was super sparse!</p>
</div>
</div>
<p>For an n-gram model we would have already <img src="https://latex.codecogs.com/png.latex?27%5E3"> parameters to accomodate all the different possibilities in the context. However, here we just have <code>vocabulary length x embedding depth</code> parameters. Since all the elements of the context are feed through the same embedding layer, it’s not dependant on the context length, which allows us to increase the context length without having a penalty on the amount of parameters. This implicitly means, <em>that the position of the token is ignored as far as the embedding layer is concerned</em>. That is, a letter <em>e</em> in first or second position will give the same embedding activation.</p>
<p>Next, the three embedding vectors are concatenated and passed through a hidden linear layer with a tanh activation function. This is thus where the <em>positional information</em> is dealt with in this model.</p>
<p>Finally the activations get passed through another linear layer, which maps the activations to the correct amount of classes (i.e.&nbsp;the number of tokens in the vocabulary).</p>
<p><img src="https://lucasvw.github.io/posts/14_mlp/arch.png" class="img-fluid" width="600"></p>
<p>Let’s build this model and train it with <code>nntrain</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Datasets and loaders</span></span>
<span id="cb11-2"></span>
<span id="cb11-3">train_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span></span>
<span id="cb11-4">val_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span></span>
<span id="cb11-5"></span>
<span id="cb11-6">train_lines <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lines[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(train_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(lines))]</span>
<span id="cb11-7">val_lines <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lines[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(train_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(lines)): <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>((train_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> val_size) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(lines))]</span>
<span id="cb11-8"></span>
<span id="cb11-9">train_ds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> NgramDataset(train_lines, c2i, n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb11-10">val_ds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> NgramDataset(val_lines, c2i, n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb11-11"></span>
<span id="cb11-12">bs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span></span>
<span id="cb11-13">train_loader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.utils.data.DataLoader(train_ds, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>bs, num_workers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb11-14">val_loader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.utils.data.DataLoader(val_ds, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>bs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, num_workers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb11-15">dls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataLoaders(train_loader, val_loader)</span></code></pre></div>
</div>
<p>As a reminder, let’s have a look at the samples for the first name in the dataset (“Yuheng”)</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">xb, yb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_ds[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>]</span>
<span id="cb12-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> x,y <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(xb, yb):</span>
<span id="cb12-3">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(i2c[i.item()] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> x), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--&gt;'</span> ,i2c[y.item()])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>['.', '.', '.'] --&gt; y
['.', '.', 'y'] --&gt; u
['.', 'y', 'u'] --&gt; h
['y', 'u', 'h'] --&gt; e
['u', 'h', 'e'] --&gt; n
['h', 'e', 'n'] --&gt; g</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> MLP(nn.Module):</span>
<span id="cb14-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, c2i, emb_dim, ctx_len, n_hidden):</span>
<span id="cb14-3">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb14-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.ctx_len <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ctx_len</span>
<span id="cb14-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.emb    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Embedding(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(c2i), emb_dim)</span>
<span id="cb14-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.hidden <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Linear(emb_dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>ctx_len, n_hidden)</span>
<span id="cb14-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.tanh   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Tanh()</span>
<span id="cb14-8">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.out    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Linear(n_hidden, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(c2i))</span>
<span id="cb14-9">        </span>
<span id="cb14-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x):</span>
<span id="cb14-11">        out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.emb(x)</span>
<span id="cb14-12">        out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> out.view(out.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb14-13">        out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.hidden(out)</span>
<span id="cb14-14">        out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.tanh(out)</span>
<span id="cb14-15">        out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.out(out)</span>
<span id="cb14-16">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> out</span></code></pre></div>
</div>
<p>Let’s find a good learning rate:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">mlp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MLP(c2i, emb_dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, ctx_len<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, n_hidden<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>)</span>
<span id="cb15-2"></span>
<span id="cb15-3">subs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [DeviceS(device)]</span>
<span id="cb15-4"></span>
<span id="cb15-5">lrfind <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LRFindS()</span>
<span id="cb15-6">l <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Learner(mlp, dls, F.cross_entropy, torch.optim.Adam, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, subs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>subs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [lrfind])</span>
<span id="cb15-7">l.fit(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-4</span>)</span>
<span id="cb15-8">lrfind.plot()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://lucasvw.github.io/posts/14_mlp/index_files/figure-html/cell-11-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>Let’s take a learning rate of <code>3e-2</code>, and use the <code>OneCycleLR</code> scheduler together with an <code>Adam</code> optimizer:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">epochs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb16-2">N <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(train_loader)</span>
<span id="cb16-3">lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3e-2</span></span>
<span id="cb16-4"></span>
<span id="cb16-5">mlp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MLP(c2i, emb_dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, ctx_len<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, n_hidden<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>)</span>
<span id="cb16-6"></span>
<span id="cb16-7">sch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> partial(torch.optim.lr_scheduler.OneCycleLR, max_lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>lr, epochs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>epochs, steps_per_epoch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>N)</span>
<span id="cb16-8"></span>
<span id="cb16-9">subs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [ProgressS(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>),</span>
<span id="cb16-10">        MetricsS(),</span>
<span id="cb16-11">        DeviceS(device)]</span>
<span id="cb16-12"></span>
<span id="cb16-13">l <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Learner(mlp, dls, F.cross_entropy, torch.optim.Adam, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, subs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>subs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [SchedulerS(sch)])</span>
<span id="cb16-14">l.fit(epochs, lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>lr)</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">
<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">mode</th>
<th data-quarto-table-cell-role="th">loss</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>train</td>
<td>2.697</td>
</tr>
<tr class="even">
<td>0</td>
<td>eval</td>
<td>2.444</td>
</tr>
<tr class="odd">
<td>1</td>
<td>train</td>
<td>2.395</td>
</tr>
<tr class="even">
<td>1</td>
<td>eval</td>
<td>2.358</td>
</tr>
<tr class="odd">
<td>2</td>
<td>train</td>
<td>2.336</td>
</tr>
<tr class="even">
<td>2</td>
<td>eval</td>
<td>2.312</td>
</tr>
<tr class="odd">
<td>3</td>
<td>train</td>
<td>2.304</td>
</tr>
<tr class="even">
<td>3</td>
<td>eval</td>
<td>2.288</td>
</tr>
<tr class="odd">
<td>4</td>
<td>train</td>
<td>2.285</td>
</tr>
<tr class="even">
<td>4</td>
<td>eval</td>
<td>2.280</td>
</tr>
</tbody>
</table>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://lucasvw.github.io/posts/14_mlp/index_files/figure-html/cell-12-output-3.png" class="img-fluid"></p>
</div>
</div>
<p>Next, let’s see if we can tweak the hyperparameters to get the best performance. Below I show the result of trying for around 10 minutes to get the best results:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> get_dls(bs, context_length):</span>
<span id="cb17-2">    train_ds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> NgramDataset(train_lines, c2i, n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>context_length<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb17-3">    val_ds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> NgramDataset(val_lines, c2i, n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>context_length<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb17-4">    train_loader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.utils.data.DataLoader(train_ds, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>bs, num_workers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb17-5">    val_loader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.utils.data.DataLoader(val_ds, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>bs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, num_workers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb17-6">    dls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataLoaders(train_loader, val_loader)</span>
<span id="cb17-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> dls</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Train parameters</span></span>
<span id="cb18-2">epochs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb18-3">lr     <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3e-2</span></span>
<span id="cb18-4">bs     <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span></span>
<span id="cb18-5"></span>
<span id="cb18-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Hyperparameters</span></span>
<span id="cb18-7">context_length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span></span>
<span id="cb18-8">nh             <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">350</span></span>
<span id="cb18-9">emb_dim        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span></span>
<span id="cb18-10"></span>
<span id="cb18-11">dls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_dls(bs, context_length)</span>
<span id="cb18-12">mlp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MLP(c2i, emb_dim, context_length, nh)</span>
<span id="cb18-13">scheduler <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> partial(torch.optim.lr_scheduler.OneCycleLR, max_lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>lr, epochs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>epochs, steps_per_epoch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(dls.train))</span>
<span id="cb18-14"></span>
<span id="cb18-15">l <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Learner(mlp, dls, F.cross_entropy, torch.optim.Adam, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, subs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>subs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [SchedulerS(scheduler)])</span>
<span id="cb18-16">l.fit(epochs, lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>lr)</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">
<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">mode</th>
<th data-quarto-table-cell-role="th">loss</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>train</td>
<td>2.405</td>
</tr>
<tr class="even">
<td>0</td>
<td>eval</td>
<td>2.284</td>
</tr>
<tr class="odd">
<td>1</td>
<td>train</td>
<td>2.254</td>
</tr>
<tr class="even">
<td>1</td>
<td>eval</td>
<td>2.238</td>
</tr>
<tr class="odd">
<td>2</td>
<td>train</td>
<td>2.150</td>
</tr>
<tr class="even">
<td>2</td>
<td>eval</td>
<td>2.104</td>
</tr>
<tr class="odd">
<td>3</td>
<td>train</td>
<td>2.011</td>
</tr>
<tr class="even">
<td>3</td>
<td>eval</td>
<td>2.022</td>
</tr>
<tr class="odd">
<td>4</td>
<td>train</td>
<td>1.890</td>
</tr>
<tr class="even">
<td>4</td>
<td>eval</td>
<td>1.990</td>
</tr>
</tbody>
</table>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://lucasvw.github.io/posts/14_mlp/index_files/figure-html/cell-14-output-3.png" class="img-fluid"></p>
</div>
</div>
<p>And this is looking pretty good. The loss we obtained from n-gram models are around 2.139, with this model we are around 2.</p>
</section>
<section id="tanh-activation-function" class="level2">
<h2 class="anchored" data-anchor-id="tanh-activation-function">Tanh activation function</h2>
<p>The MLP model we have used, is employing a tanh activation function which we haven’t encountered so far. So let’s have a quick look at it:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb19-2">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.tanh(x)</span>
<span id="cb19-3"></span>
<span id="cb19-4">fig, axs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb19-5">axs.plot(x,y)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb19-6">axs.grid()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb19-7">axs.axhline(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'black'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb19-8">axs.axvline(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'black'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://lucasvw.github.io/posts/14_mlp/index_files/figure-html/cell-15-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>Observe that the tanh activation function has y limits at -1 and 1: however large or small the input, the output is always between -1 and 1. These asymptotes are very flat, meaning that the derivatives in these areas are extremely small. Thinking back at the learning mechanism of neural networks, and remembering that gradients are flowing back through the network by making use of the chain rule: having very small local gradients of a tanh activation function leads to the cancelling-out of whatever gradient has been accumulated so far. This means that the weight updates of all upstream weights is impacted. Previously, this behavior was mentioned in terms of the ReLU activation function, see <a href="https://lucasvw.github.io/posts/11_nntrain_activations/#activations">here</a>.</p>
<p>This becomes a serious problem, if for all our data (in a batch, or even worse in an epoch) this is the case. So let’s check how we are doing by creating a <a href="https://github.com/lucasvw/nntrain/blob/main/nntrain/activations.py#L39"><code>ActivationStatsS</code></a> subclass tailored towards tracking stats for the tanh activation.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> TanhActivationS(ActivationStatsS):</span>
<span id="cb20-2">    </span>
<span id="cb20-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> record_stats(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, learn, hook, layer, inp, outp):</span>
<span id="cb20-4">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> learn.model.training:</span>
<span id="cb20-5">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">hasattr</span>(hook, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'stats'</span>): hook.stats <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ([], [])</span>
<span id="cb20-6">            acts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> outp.detach().cpu()</span>
<span id="cb20-7">            hook.stats[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].append(acts.histc(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>,<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))           <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># get the histogram counts with 100 bins in the range (-1,1)</span></span>
<span id="cb20-8">            </span>
<span id="cb20-9">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># computation of the not_firing_rate_per_act</span></span>
<span id="cb20-10">            N <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> acts.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]                 </span>
<span id="cb20-11">            flat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> acts.view(N, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)                              <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># flatten the activations: matrix of [samples, activations]</span></span>
<span id="cb20-12">            nf_rate_p_act <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (flat.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.99</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> N   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># compute not firing rate per activations (so across the samples)</span></span>
<span id="cb20-13">            hook.stats[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].append(nf_rate_p_act)   </span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Train parameters</span></span>
<span id="cb21-2">epochs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb21-3">lr     <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3e-2</span></span>
<span id="cb21-4">bs     <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span></span>
<span id="cb21-5"></span>
<span id="cb21-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Hyperparameters</span></span>
<span id="cb21-7">context_length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span></span>
<span id="cb21-8">nh             <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">350</span></span>
<span id="cb21-9">emb_dim        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span></span>
<span id="cb21-10"></span>
<span id="cb21-11">dls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_dls(bs, context_length)</span>
<span id="cb21-12">mlp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MLP(c2i, emb_dim, context_length, nh)</span>
<span id="cb21-13">scheduler <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> partial(torch.optim.lr_scheduler.OneCycleLR, max_lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>lr, epochs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>epochs, steps_per_epoch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(dls.train))</span>
<span id="cb21-14">tanhS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TanhActivationS([m <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> m <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> mlp.modules() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(m, nn.Tanh)])</span>
<span id="cb21-15"></span>
<span id="cb21-16">l <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Learner(mlp, dls, F.cross_entropy, torch.optim.Adam, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, subs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>subs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [SchedulerS(scheduler)] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [tanhS])</span>
<span id="cb21-17">l.fit(epochs, lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>lr)</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">
<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">mode</th>
<th data-quarto-table-cell-role="th">loss</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>train</td>
<td>2.383</td>
</tr>
<tr class="even">
<td>0</td>
<td>eval</td>
<td>2.262</td>
</tr>
<tr class="odd">
<td>1</td>
<td>train</td>
<td>2.257</td>
</tr>
<tr class="even">
<td>1</td>
<td>eval</td>
<td>2.232</td>
</tr>
<tr class="odd">
<td>2</td>
<td>train</td>
<td>2.150</td>
</tr>
<tr class="even">
<td>2</td>
<td>eval</td>
<td>2.126</td>
</tr>
<tr class="odd">
<td>3</td>
<td>train</td>
<td>2.015</td>
</tr>
<tr class="even">
<td>3</td>
<td>eval</td>
<td>2.035</td>
</tr>
<tr class="odd">
<td>4</td>
<td>train</td>
<td>1.902</td>
</tr>
<tr class="even">
<td>4</td>
<td>eval</td>
<td>1.997</td>
</tr>
</tbody>
</table>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://lucasvw.github.io/posts/14_mlp/index_files/figure-html/cell-17-output-3.png" class="img-fluid"></p>
</div>
</div>
<p>And, let’s now plot all histograms of the activations during training as a heatmap:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))</span>
<span id="cb22-2"></span>
<span id="cb22-3">hist <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.stack(tanhS.hooks[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].stats[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]).T</span>
<span id="cb22-4">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].imshow(hist, cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Blues'</span>, origin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lower'</span>, aspect<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'auto'</span>)</span>
<span id="cb22-5">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_yticks(np.arange(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">100.5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>), [<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(i, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> np.linspace(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>)])<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb22-6">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].imshow(hist[:,:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>], cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Blues'</span>, origin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lower'</span>, aspect<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'auto'</span>)</span>
<span id="cb22-7">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_yticks(np.arange(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">100.5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>), [<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(i, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> np.linspace(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>)])<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://lucasvw.github.io/posts/14_mlp/index_files/figure-html/cell-18-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>On the top, the histograms are shown for all of training (800+ batches), and on the bottom the histograms for the first 20 batches are shown. We observe that during the beginning of training, we don’t have over-saturated tanh activations, but as training progresses the activations become more and more saturated. We can also look at the dead rate per neuron: which is the amount of activations with absolute value &gt; 0.99 across a batch per neuron:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb23-2"></span>
<span id="cb23-3">dead_rate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.stack(tanhS.hooks[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].stats[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]).T</span>
<span id="cb23-4">ax.imshow(dead_rate, cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Greys'</span>, origin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lower'</span>, aspect<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'auto'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://lucasvw.github.io/posts/14_mlp/index_files/figure-html/cell-19-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>However, this doesn’t seem to be problematic. Foremost, we need to make sure that we don’t initialize in a way that causes over-saturated tanh activations. And as mentioned, during the beginning of training, this is not the case. Also, when looking at a histogram of the dead rate per neuron across the very last training batch we see that most neurons have a low dead-rate, and we don’t have any neuron for which the dead-rate is higher then 75%:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">plt.hist(dead_rate[:,<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://lucasvw.github.io/posts/14_mlp/index_files/figure-html/cell-20-output-1.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="sampling-names" class="level2">
<h2 class="anchored" data-anchor-id="sampling-names">Sampling names</h2>
<p>To conclude, let’s sample from this model:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@fc.patch</span></span>
<span id="cb25-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> generate(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>:MLP, n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb25-3">    names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb25-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n):</span>
<span id="cb25-5">        name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.ctx_len)</span>
<span id="cb25-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>:</span>
<span id="cb25-7">            idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor([[c2i[i] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> name[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.ctx_len):]]]).cuda()</span>
<span id="cb25-8">            logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.forward(idx)</span>
<span id="cb25-9">            s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.multinomial(F.softmax(logits, dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>generator)</span>
<span id="cb25-10">            c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> i2c[s.item()]</span>
<span id="cb25-11">            name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> c</span>
<span id="cb25-12">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>:</span>
<span id="cb25-13">                names.append(name)</span>
<span id="cb25-14">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">break</span></span>
<span id="cb25-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> names</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mlp.generate()</span>
<span id="cb26-2">[name[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> name <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> names]</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>['xenleigh',
 'samyah',
 'milena',
 'camrihan',
 'nafraya',
 'aris',
 'marcely',
 'zopierah',
 'serg',
 'oshem']</code></pre>
</div>
</div>
<p>And these neural utterings are starting to sound pretty name-like!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>neural network</category>
  <category>nlp</category>
  <category>embedding</category>
  <guid>https://lucasvw.github.io/posts/14_mlp/index.html</guid>
  <pubDate>Mon, 11 Sep 2023 00:00:00 GMT</pubDate>
  <media:content url="https://lucasvw.github.io/posts/14_mlp/arch.png" medium="image" type="image/png" height="116" width="144"/>
</item>
<item>
  <title>N-gram language models</title>
  <dc:creator>Lucas van Walstijn</dc:creator>
  <link>https://lucasvw.github.io/posts/13_ngram/index.html</link>
  <description><![CDATA[ 



<p>In this post, I’ll discuss a very simple language model: n-grams! To keep things simple we will be concerned with single words, and not for example complete sentences. The goal will be to have a language model that learns from a corpus of (first-)names, and is able to create new <em>name-sounding</em> names. The idea as well as the dataset comes from Andrej Karpahy’s <a href="https://www.youtube.com/playlist?list=PLAqhIrjkxbuWI23v9cThsA9GvCAUhRvKZ">lecture series</a> on Neural Networks.</p>
<p>Like most (any?) language model, n-gram models can be used to predict the next <strong>token</strong> in a sequence. The <em>n</em> in n-gram relates to the length of the used <strong>context</strong>. Bi-gram models only use the previous token as context, tri-gram models use the last two tokens to predict the following token.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li><strong>token</strong>: When creating language models, we have to decide on the granularity of the data. We can for example build a model that deals with single characters (a-z), entire words or word-parts. This decision is formalized by the use of a <strong>dictionary</strong>, which is the list of unique elements occurring in the data. For the character level model we are building, the dictionary will consist of all letters (a-z). The elements of the dictionary are referred to as tokens. Besides the letters a-z, we will also add a token to the dictionary (a dot: “.”) reflecting the start and end of names.</li>
<li><strong>context</strong>: Related to the distinction between <em>features</em> (<img src="https://latex.codecogs.com/png.latex?X">) and <em>labels</em> (<img src="https://latex.codecogs.com/png.latex?y">). The <strong>context</strong> is the equivalent to the <em>features</em>: the data that is used as input to the model and from which a prediction is made (for the next character in a sequence).</li>
</ul>
</div>
</div>
<p>Let’s clarify what we mean with <em>prediction of the next token</em>: an n-gram model learns a probability distribution over any of the tokens that can follow from any of the possible contexts. A bi-gram character-level model has thus a learned probability distribution over all the characters (<em>a</em> through <em>z</em>, and a token to denote the <em>end of a word</em>, so 26+1 tokens) that can follow from any character.</p>
<p>The simplest possible way to <em>learn</em> a probability distribution from training data, is by simply keeping track of the statistics in the training corpus:</p>
<ul>
<li>iterate through all the n-grams in the data</li>
<li>count the occurrences of each n-gram.</li>
</ul>
<p>If we then normalize these counts (by dividing through the sum) we have a probability distribution!</p>
<section id="data" class="level2">
<h2 class="anchored" data-anchor-id="data">Data</h2>
<p>Everything starts with training data:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> functools <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">reduce</span></span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pathlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Path</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> urllib.request <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> urlretrieve</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> nn</span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn.functional <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> F</span>
<span id="cb1-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torcheval.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> tem</span>
<span id="cb1-10"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> fastcore.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> fc</span>
<span id="cb1-11"></span>
<span id="cb1-12"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> nntrain.dataloaders <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> DataLoaders</span>
<span id="cb1-13"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> nntrain.learner <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb1-14"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> nntrain.activations <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'./data'</span>)</span>
<span id="cb2-2">path.mkdir(parents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, exist_ok<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb2-3">path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'names.txt'</span></span>
<span id="cb2-4">url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'https://raw.githubusercontent.com/karpathy/makemore/master/names.txt'</span></span>
<span id="cb2-5"></span>
<span id="cb2-6">_ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> urlretrieve(url, path)</span>
<span id="cb2-7"></span>
<span id="cb2-8"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(path, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb2-9">    lines <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f.read().splitlines()</span>
<span id="cb2-10">    </span>
<span id="cb2-11">random.seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb2-12">random.shuffle(lines)</span>
<span id="cb2-13"></span>
<span id="cb2-14"></span>
<span id="cb2-15"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'first 5 names in array: '</span>, end<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' '</span>)</span>
<span id="cb2-16"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(lines[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>])</span>
<span id="cb2-17"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(lines)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>first 5 names in array:  ['yuheng', 'diondre', 'xavien', 'jori', 'juanluis']
len(lines)=32033</code></pre>
</div>
</div>
</section>
<section id="bi-gram-count-model" class="level2">
<h2 class="anchored" data-anchor-id="bi-gram-count-model">Bi-gram count model</h2>
<p>From the data, we first create the dictionary:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">unique_chars <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>.join(lines)))</span>
<span id="cb4-2">unique_chars.sort()</span>
<span id="cb4-3">dictionary <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> unique_chars <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>]</span>
<span id="cb4-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dictionary<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb4-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(dictionary)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>dictionary=['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '.']
len(dictionary)=27</code></pre>
</div>
</div>
<p>From the dictionary we create a mapping from token to integer. We will use this mapping to encode our tokens (characters) into integers. This is called <strong>numericalisation</strong>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">c2i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {c:i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i, c <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(dictionary)}</span>
<span id="cb6-2">i2c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {i:c <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i, c <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(dictionary)}</span></code></pre></div>
</div>
<p>And just for clarity, let’s have a look at the bi-grams for the first name in the dataset:</p>
<div class="cell">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">cutoff <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(lines) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span>)</span>
<span id="cb7-2">train_lines <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lines[:cutoff]</span>
<span id="cb7-3">val_lines <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lines[cutoff:]</span>
<span id="cb7-4"></span>
<span id="cb7-5">name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"."</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> train_lines[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"."</span></span>
<span id="cb7-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'name : "</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>train_lines[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"'</span>)</span>
<span id="cb7-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'name with start and end token : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb7-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bigrams:'</span>)</span>
<span id="cb7-9">bigrams <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(name[:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], name[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:])</span>
<span id="cb7-10"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> bigram <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> bigrams:</span>
<span id="cb7-11">    context <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bigram[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb7-12">    next_char <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bigram[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb7-13">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>context<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> --&gt; </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>next_char<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> numericalized: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>c2i[context]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:&gt;2}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> --&gt; </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>c2i[next_char]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:&gt;2}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>name : "yuheng"
name with start and end token : .yuheng.
bigrams:
. --&gt; y      numericalized: 26 --&gt; 24
y --&gt; u      numericalized: 24 --&gt; 20
u --&gt; h      numericalized: 20 --&gt;  7
h --&gt; e      numericalized:  7 --&gt;  4
e --&gt; n      numericalized:  4 --&gt; 13
n --&gt; g      numericalized: 13 --&gt;  6
g --&gt; .      numericalized:  6 --&gt; 26</code></pre>
</div>
</div>
<p>To keep track of the occurrences we will use a matrix of size <img src="https://latex.codecogs.com/png.latex?%5B27,%2027%5D"> (the size of the dictionary). The rows reflect the possible values of the context and the columns reflect any possible character following this context. We will initialize this matrix with zeros, and increase the value of the associated cell by one, every time we encounter an n-gram:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">counts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">27</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">27</span>], dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>)              <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># initialize counts matrix</span></span>
<span id="cb9-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> name <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> train_lines:                              <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># iterate through all the names</span></span>
<span id="cb9-3">    name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"."</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"."</span>                           <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># add start and end token to the name</span></span>
<span id="cb9-4">    bigrams <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(name[:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], name[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:])                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create all bi-grams for the name (list of tuples)</span></span>
<span id="cb9-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> bigram <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> bigrams:                            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># iterate through bi-grams</span></span>
<span id="cb9-6">        counts[c2i[bigram[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]], c2i[bigram[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># increase the counts in the matrix for the encountered bi-gram</span></span></code></pre></div>
</div>
<p>The count matrix is visualized below. On the vertical axis (the rows of the matrix) we have the <em>context</em> characters and on the horizontal axis (the columns of the matrix) the characters that follow from this context are shown. Bright (white) colors represent low counts, and dark blue colors represent high counts. The first observation is that the matrix is actually quite sparse. Many bi-grams appear very few times, and a couple of b-grams occur very frequently. We further observe:</p>
<ul>
<li>Looking at the first row: an “a” is followed very often either by an “n” or even more often by a “.”. Names often end with an “a”!</li>
<li>Looking at the last row: names also start pretty often with an “a”</li>
</ul>
<div class="cell">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))</span>
<span id="cb10-2"></span>
<span id="cb10-3">ax.imshow(counts, cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Blues'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-4">ax.set_xticks(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">27</span>)), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(c2i.keys()))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-5">ax.set_yticks(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">27</span>)), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(c2i.keys()))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-6">ax.tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'both'</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'major'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://lucasvw.github.io/posts/13_ngram/index_files/figure-html/cell-8-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>Let’s use this language model to generate some new names:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.Generator().manual_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb11-2"></span>
<span id="cb11-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Normalize over the rows</span></span>
<span id="cb11-4">probs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> counts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> counts.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, keepdim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb11-5"></span>
<span id="cb11-6">names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb11-7"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>):                           <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># generate 20 names</span></span>
<span id="cb11-8">    name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>                                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># initialize each name with a starting token</span></span>
<span id="cb11-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>:                               <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># loop until break</span></span>
<span id="cb11-10">        ctx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> c2i[name[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]                   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># index of last character</span></span>
<span id="cb11-11">        pdf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> probs[ctx]                      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># pdf over characters that follow from last character</span></span>
<span id="cb11-12">        s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.multinomial(pdf, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># draw a sample given the pdf</span></span>
<span id="cb11-13">        c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> i2c[s.item()]                     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># transform to character</span></span>
<span id="cb11-14">        name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> c                             <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># append new character to name</span></span>
<span id="cb11-15">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>:                          <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># stop sampling upon reaching an end of word token</span></span>
<span id="cb11-16">            names.append(name)                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># store away sampled name</span></span>
<span id="cb11-17">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">break</span></span>
<span id="cb11-18"></span>
<span id="cb11-19">names</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>['.akyleloniatanacaro.',
 '.eynn.',
 '.con.',
 '.thmarie.',
 '.di.',
 '.n.',
 '.kahannoa.',
 '.jadde.',
 '.ethann.',
 '.dalaydah.']</code></pre>
</div>
</div>
<p>Hmm, not super great names.. I guess it’s not surprising given the simplicity of this model.</p>
<p>How could we improve on this result? The most obvious way, would be to increase the context length (3-grams, 4-grams etc). This way, the model has more knowledge of what previously occurred, and can possibly create better predictions for the next character. This will probably work fine for n=3 and 4, but with even larger values of n, we will run into problems. The reason for this in short is that the counts matrix is going to be extremely sparse as the amount of rows (= the amount of possible contexts) increases exponentially: For a bi-gram, we have a context of just one token, so 27 possible values. For a tri-gram we have 2 tokens: that’s already <img src="https://latex.codecogs.com/png.latex?27%5E2"> possible values.</p>
<p>We thus have to come up with another strategy to increase the performance of our model, for which we turn to neural networks😏</p>
</section>
<section id="neural-network" class="level2">
<h2 class="anchored" data-anchor-id="neural-network">Neural network</h2>
<p>It turns out that the count model described above, has an equivalence to a very simple neural network that’s composed of an embedding layer and uses cross-entropy loss.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>An <strong>embedding layer</strong> is a layer that is used to “encode” our data, which roughly translates to the way we input our data into a neural network. We already saw above that we numericalized our characters (a-z) as integers. We will have to do something similar for our neural network, since we can’t input characters into a neural network. However, instead of feeding integers into our network, we can also employ an embedding layer, which will basically create a vector out of our integers. Each integer value will be mapped to it’s own vector, and the values contained in this vector will be learned during training. The advantage of this, is that the model can easily learn different “attributes” that make up the individual tokens. For example, it <em>could</em> use the first dimension in the vector to denote whether the token is a vowel (a, e, i, o, u) and the second dimension to represent the likelihood of starting a sentence. The emphasis in the last sentence is on <em>could</em>, since these things have to be learned by the network itself during the training-process.</p>
</div>
</div>
<p>If we create an embedding layer with embedding dimensions equal to that of the dictionary, the outputs of this layer will also conform to the size of our dictionary, e.g.&nbsp;<code>[batch_size * 26]</code>. These raw outputs of our model are referred to as logits, and they can be anything: positive, negative, small or large. We can exponentiate these logits to get numbers that are always positive, and these values are equivalent to values in the “counts” matrix. We can then normalize these exponentiated logits row-wise, to get to probabilities. And finally adding a negative log-likelihood loss on these probabilities is guiding the network to establish an embedding matrix with weights that are practically identical to the (log transformed) counts matrix from above. The combined operation of exponentiating, normalizing and negative log-likelihood is what we call cross-entropy loss. See also an earlier blog <a href="https://lucasvw.github.io/posts/05_crossentropy/">post</a>.</p>
<p>We are going to train this model using <a href="https://lucasvw.github.io/posts/08_nntrain_setup/"><code>nntrain</code></a>, the small neural network training library we have been created before. But before we do, we have to create the datasets and dataloaders. Let’s make the dataset generic so that it can create datasets for any n-gram model we wish. As a reminder, let’s have a quick look how 2-grams, 3-grams and 4-grams look for the first name in the data <em>Emma</em>:</p>
<div class="cell">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lines[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb13-2">name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span></span>
<span id="cb13-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2-grams:'</span>)</span>
<span id="cb13-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(name[:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], name[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:]):</span>
<span id="cb13-5">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(i[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'---&gt;'</span>, i[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>2-grams:
. ---&gt; y
y ---&gt; u
u ---&gt; h
h ---&gt; e
e ---&gt; n
n ---&gt; g
g ---&gt; .</code></pre>
</div>
</div>
<div class="cell">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lines[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb15-2">name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'..'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span></span>
<span id="cb15-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'3-grams:'</span>)</span>
<span id="cb15-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(name[:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>], name[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], name[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>:]):</span>
<span id="cb15-5">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(i[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], i[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'---&gt;'</span>, i[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>])</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>3-grams:
. . ---&gt; y
. y ---&gt; u
y u ---&gt; h
u h ---&gt; e
h e ---&gt; n
e n ---&gt; g
n g ---&gt; .</code></pre>
</div>
</div>
<div class="cell">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lines[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb17-2">name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'...'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span></span>
<span id="cb17-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'4-grams:'</span>)</span>
<span id="cb17-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(name[:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>], name[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>], name[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], name[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>:]):</span>
<span id="cb17-5">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(i[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], i[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], i[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'---&gt;'</span>, i[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>])</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>4-grams:
. . . ---&gt; y
. . y ---&gt; u
. y u ---&gt; h
y u h ---&gt; e
u h e ---&gt; n
h e n ---&gt; g
e n g ---&gt; .</code></pre>
</div>
</div>
<p>We observe:</p>
<ul>
<li>irrespective of n, we always end up with the same amount of samples</li>
<li>when we increase the context to n=3 and n=4, we need to add additional start-word tokens to make sure we don’t skip the first sample(s)</li>
</ul>
<p>Let’s create a dataset in which we can set the value of <code>n</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> NgramDataset():</span>
<span id="cb19-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, lines, n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>):</span>
<span id="cb19-3">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># store the xs, the context, the left hand side of the n-gram</span></span>
<span id="cb19-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># store the ys, the labels, the right hand side of the n-gram</span></span>
<span id="cb19-5">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> line <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> lines:           </span>
<span id="cb19-6">            x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>(n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)         <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the first x is always full of "start word tokens"</span></span>
<span id="cb19-7">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> y <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> line <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>:  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the first y is always the first letter of the name</span></span>
<span id="cb19-8">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x.append([c2i[xi] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> xi <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> x])  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># convert to int and store</span></span>
<span id="cb19-9">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y.append(c2i[y])                 <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># convert to int and store</span></span>
<span id="cb19-10">                x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> y)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:]                       <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># update x</span></span>
<span id="cb19-11">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x)                 <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># from list to tensor </span></span>
<span id="cb19-12">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y).squeeze()       <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># from list to tensor</span></span>
<span id="cb19-13">    </span>
<span id="cb19-14">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__getitem__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, i):</span>
<span id="cb19-15">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x[i], <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y[i]</span>
<span id="cb19-16"></span>
<span id="cb19-17">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__len__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb19-18">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x)</span></code></pre></div>
</div>
<p>Next, let’s create the model, which should also be able to deal with n-grams. Instead of using PyTorch’s <code>nn.Embedding</code> layer, we will use a custom weight tensor which will act as the weights of our embedding layer. The reason for this, is that <code>nn.Embedding</code> is only two dimensional. For an n-gram of n &gt; 2, we would thus have to stack-up all the possible character combinations of the context in the row dimension. This is a bit tedious to implement, so instead we will use an explicit n-dimensional weight tensor. For the trigram this means: the first (second) dimension is for the first (second) character in the context, and the last dimension is for the label.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> NgramNet(nn.Module):</span>
<span id="cb20-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>):</span>
<span id="cb20-3">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb20-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> n</span>
<span id="cb20-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.embedding <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Parameter(torch.randn((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">27</span>,)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>n).requires_grad_())</span>
<span id="cb20-6">        </span>
<span id="cb20-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x):</span>
<span id="cb20-8">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># logits are obtained by indexing into the embedding matrix</span></span>
<span id="cb20-9">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for n=2 this is simply self.embedding[x], for n&gt;2 it's a bit involved:</span></span>
<span id="cb20-10">        logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.embedding[[x[:,i] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)]]</span>
<span id="cb20-11">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> logits</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">train_ds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> NgramDataset(train_lines)</span>
<span id="cb21-2">val_ds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> NgramDataset(val_lines)</span>
<span id="cb21-3"></span>
<span id="cb21-4">bs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span></span>
<span id="cb21-5">train_loader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.utils.data.DataLoader(train_ds, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>bs)</span>
<span id="cb21-6">val_loader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.utils.data.DataLoader(val_ds, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>bs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb21-7">dls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataLoaders(train_loader, val_loader)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> NgramNet()</span>
<span id="cb22-2">n_2gram <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> m.embedding.numel()</span>
<span id="cb22-3"></span>
<span id="cb22-4">subs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [ProgressS(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>),</span>
<span id="cb22-5">        MetricsS(),</span>
<span id="cb22-6">        DeviceS(device)]</span>
<span id="cb22-7"></span>
<span id="cb22-8">l <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Learner(m, dls, F.cross_entropy, torch.optim.Adam, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, subs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>subs)</span>
<span id="cb22-9">l.fit(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-1</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">
<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">mode</th>
<th data-quarto-table-cell-role="th">loss</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>train</td>
<td>2.991</td>
</tr>
<tr class="even">
<td>0</td>
<td>eval</td>
<td>2.575</td>
</tr>
<tr class="odd">
<td>1</td>
<td>train</td>
<td>2.510</td>
</tr>
<tr class="even">
<td>1</td>
<td>eval</td>
<td>2.477</td>
</tr>
<tr class="odd">
<td>2</td>
<td>train</td>
<td>2.468</td>
</tr>
<tr class="even">
<td>2</td>
<td>eval</td>
<td>2.463</td>
</tr>
<tr class="odd">
<td>3</td>
<td>train</td>
<td>2.462</td>
</tr>
<tr class="even">
<td>3</td>
<td>eval</td>
<td>2.460</td>
</tr>
<tr class="odd">
<td>4</td>
<td>train</td>
<td>2.460</td>
</tr>
<tr class="even">
<td>4</td>
<td>eval</td>
<td>2.459</td>
</tr>
</tbody>
</table>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://lucasvw.github.io/posts/13_ngram/index_files/figure-html/cell-16-output-3.png" class="img-fluid"></p>
</div>
</div>
<p>Now, let’s patch our model with a <code>generate()</code> method, returning names sampled from the learned representation. We can pass in a generator to make sure we get the same random behavior as we have seen above when generating names with the counts model:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@fc.patch</span></span>
<span id="cb23-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> generate(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>:NgramNet, n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb23-3">    names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb23-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n):</span>
<span id="cb23-5">        name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb23-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>:</span>
<span id="cb23-7">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the following 2 lines are a involved, but I couldn't find a cleaner way</span></span>
<span id="cb23-8">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># to make this work for both n=2 and n&gt;2, </span></span>
<span id="cb23-9">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># since indexing works differently for both cases</span></span>
<span id="cb23-10">            idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [c2i[i] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> name[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):]]</span>
<span id="cb23-11">            logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">reduce</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> emb, i: emb[i], idx, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.embedding).detach().cpu()</span>
<span id="cb23-12"></span>
<span id="cb23-13">            s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.multinomial(F.softmax(logits, dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>generator)</span>
<span id="cb23-14">            c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> i2c[s.item()]</span>
<span id="cb23-15">            name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> c</span>
<span id="cb23-16">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>:</span>
<span id="cb23-17">                names.append(name)</span>
<span id="cb23-18">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">break</span></span>
<span id="cb23-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> names</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">m.generate(generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.Generator().manual_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>))</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>['.akyleloniatanacaro.',
 '.eynn.',
 '.con.',
 '.thmarie.',
 '.di.',
 '.n.',
 '.kahannoa.',
 '.jadde.',
 '.ethann.',
 '.dalaydah.']</code></pre>
</div>
</div>
<p>As you can see, these names are extremely similar to the ones we created above with the counts based model, and this is actually pretty surprising. One model was based on common sense, logic and simple counting. The other model on neural networks, embedding layers, loss functions, training loops, backward passes etc etc. Nonetheless, the results are the same!</p>
<p>The reason for this, is that the network architecture (and the loss) implies mathematical equivalence between both approaches. This can probably be shown explicitly with lots of complicated math, which I am not even going to try (I guess the answer will involve the principle of “maximum likelihood”..)</p>
<p>We can also have a look at both the weight matrices to see that the embedding matrix is extremely similar to the counts matrix. The way this network is set-up, is thus resulting in a weight matrix which is practically identical to the counts matrix!</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">fig, axs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb26-2"></span>
<span id="cb26-3">axs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].imshow(F.softmax(m.embedding.detach().cpu(), dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).numpy())<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb26-4">axs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'"softmaxed" embedding matrix: </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> turning logits into probabilities'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb26-5">axs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].imshow(probs)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb26-6">axs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Probs matrix from the count model'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://lucasvw.github.io/posts/13_ngram/index_files/figure-html/cell-19-output-1.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="next-steps" class="level2">
<h2 class="anchored" data-anchor-id="next-steps">Next steps</h2>
<p>This extremely cool equivalence means we can switch to a neural network paradigm and tweak the network to improve performance. In other words, we can use any trick in the book for training neural networks! This is neat, because with the explicit counting based approach we were stuck with the “curse of dimensionality” for growing values of n.</p>
<p>In the next post, I’ll discuss a first improvement: a simple but interesting model from Y. Bengio et al described in the paper <em>A Neural Probabilistic Language Model</em>. But let’s quickly train a couple of networks with higher n-grams to see how that goes.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> fit_ngram(n):</span>
<span id="cb27-2">    train_ds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> NgramDataset(train_lines, n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ngram)</span>
<span id="cb27-3">    val_ds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> NgramDataset(val_lines, n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ngram)</span>
<span id="cb27-4"></span>
<span id="cb27-5">    train_loader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.utils.data.DataLoader(train_ds, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>bs)</span>
<span id="cb27-6">    val_loader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.utils.data.DataLoader(val_ds, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>bs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb27-7"></span>
<span id="cb27-8">    dls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataLoaders(train_loader, val_loader)</span>
<span id="cb27-9"></span>
<span id="cb27-10">    m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> NgramNet(n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ngram)</span>
<span id="cb27-11">    n_elem <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> m.embedding.numel()</span>
<span id="cb27-12"></span>
<span id="cb27-13">    l <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Learner(m, dls, F.cross_entropy, torch.optim.Adam, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, subs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>subs)</span>
<span id="cb27-14">    l.fit(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-1</span>)</span>
<span id="cb27-15">    </span>
<span id="cb27-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> n_elem, l.loss.detach().cpu()</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">num_elems, eval_losses <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [], []</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1">ngram <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb29-2">num_elem, eval_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fit_ngram(ngram)</span>
<span id="cb29-3">num_elems.append(num_elem)</span>
<span id="cb29-4">eval_losses.append(eval_loss)</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">
<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">mode</th>
<th data-quarto-table-cell-role="th">loss</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>train</td>
<td>3.072</td>
</tr>
<tr class="even">
<td>0</td>
<td>eval</td>
<td>2.480</td>
</tr>
<tr class="odd">
<td>1</td>
<td>train</td>
<td>2.323</td>
</tr>
<tr class="even">
<td>1</td>
<td>eval</td>
<td>2.257</td>
</tr>
<tr class="odd">
<td>2</td>
<td>train</td>
<td>2.224</td>
</tr>
<tr class="even">
<td>2</td>
<td>eval</td>
<td>2.234</td>
</tr>
<tr class="odd">
<td>3</td>
<td>train</td>
<td>2.208</td>
</tr>
<tr class="even">
<td>3</td>
<td>eval</td>
<td>2.230</td>
</tr>
<tr class="odd">
<td>4</td>
<td>train</td>
<td>2.203</td>
</tr>
<tr class="even">
<td>4</td>
<td>eval</td>
<td>2.228</td>
</tr>
</tbody>
</table>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://lucasvw.github.io/posts/13_ngram/index_files/figure-html/cell-22-output-3.png" class="img-fluid"></p>
</div>
</div>
<p>The evaluation loss went down from 2.595 for the bi-gram model to 2.437 for the tri-gram model, an improvement! Let’s try a 4-gram model as well:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">ngram <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span></span>
<span id="cb30-2">num_elem, eval_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fit_ngram(ngram)</span>
<span id="cb30-3">num_elems.append(num_elem)</span>
<span id="cb30-4">eval_losses.append(eval_loss)</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">
<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">mode</th>
<th data-quarto-table-cell-role="th">loss</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>train</td>
<td>3.067</td>
</tr>
<tr class="even">
<td>0</td>
<td>eval</td>
<td>2.492</td>
</tr>
<tr class="odd">
<td>1</td>
<td>train</td>
<td>2.217</td>
</tr>
<tr class="even">
<td>1</td>
<td>eval</td>
<td>2.195</td>
</tr>
<tr class="odd">
<td>2</td>
<td>train</td>
<td>2.014</td>
</tr>
<tr class="even">
<td>2</td>
<td>eval</td>
<td>2.145</td>
</tr>
<tr class="odd">
<td>3</td>
<td>train</td>
<td>1.956</td>
</tr>
<tr class="even">
<td>3</td>
<td>eval</td>
<td>2.138</td>
</tr>
<tr class="odd">
<td>4</td>
<td>train</td>
<td>1.932</td>
</tr>
<tr class="even">
<td>4</td>
<td>eval</td>
<td>2.139</td>
</tr>
</tbody>
</table>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://lucasvw.github.io/posts/13_ngram/index_files/figure-html/cell-23-output-3.png" class="img-fluid"></p>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1">ngram <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb31-2">num_elem, eval_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fit_ngram(ngram)</span>
<span id="cb31-3">num_elems.append(num_elem)</span>
<span id="cb31-4">eval_losses.append(eval_loss)</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">
<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">mode</th>
<th data-quarto-table-cell-role="th">loss</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>train</td>
<td>3.216</td>
</tr>
<tr class="even">
<td>0</td>
<td>eval</td>
<td>2.690</td>
</tr>
<tr class="odd">
<td>1</td>
<td>train</td>
<td>2.287</td>
</tr>
<tr class="even">
<td>1</td>
<td>eval</td>
<td>2.344</td>
</tr>
<tr class="odd">
<td>2</td>
<td>train</td>
<td>1.955</td>
</tr>
<tr class="even">
<td>2</td>
<td>eval</td>
<td>2.255</td>
</tr>
<tr class="odd">
<td>3</td>
<td>train</td>
<td>1.810</td>
</tr>
<tr class="even">
<td>3</td>
<td>eval</td>
<td>2.230</td>
</tr>
<tr class="odd">
<td>4</td>
<td>train</td>
<td>1.735</td>
</tr>
<tr class="even">
<td>4</td>
<td>eval</td>
<td>2.230</td>
</tr>
</tbody>
</table>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://lucasvw.github.io/posts/13_ngram/index_files/figure-html/cell-24-output-3.png" class="img-fluid"></p>
</div>
</div>
<p>And here, we start to see problems. The train loss is still getting better (1.735 for 5-gram vs 1.932 for 4-gram) but the evaluation loss is worse (2.198 for 5-gram vs 2.129 for 4-gram).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb32-2">ax.bar(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), eval_losses)</span>
<span id="cb32-3">ax.set_xticks(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), [<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'3gram </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> loss: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>eval_losses[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'4gram </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> loss: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>eval_losses[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'5gram </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> loss: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>eval_losses[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>])<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb32-4">ax.set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Exponential increase in parameters'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://lucasvw.github.io/posts/13_ngram/index_files/figure-html/cell-25-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>Let’s also quickly compare the number of elements in the embedding layer for the 2, 3 and 4-gram models:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb33-2">ax.bar(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), num_elems)</span>
<span id="cb33-3">ax.set_xticks(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), [<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'3gram </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> #: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>num_elems[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'4gram </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> #: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>num_elems[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'5gram </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> #: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>num_elems[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>])<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb33-4">ax.set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Exponential increase in parameters'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://lucasvw.github.io/posts/13_ngram/index_files/figure-html/cell-26-output-1.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="final-remarks-on-language-models" class="level2">
<h2 class="anchored" data-anchor-id="final-remarks-on-language-models">Final remarks on language models</h2>
<p>After reading this blog post, I was thinking about <em>what exactly makes this neural network a language model</em>? The neural network obviously doesn’t know it’s a language model. It doesn’t know that the inputs are letters and that it’s predicting the next token in the sequence. Here are some closing thoughts:</p>
<ol type="1">
<li><p>Many samples in the training data have the same context (features), but a different next character (label). Consider a bi-gram model and two names: “Emma”, “Esmeralda”. The first bi-gram for each of these names (skipping the start name token) are (e, m) for Emma and (e, s) for Esmeralda. They have the same context (e) but a different label (m and s respectively). This happens of course quite often in the data, and shows there is not a 1:1 relation from inputs to outputs. The model thus needs to learn a <em>probability distribution</em> over the possible labels. This learned probability distribution is what makes the model <em>generative</em>, since we can sample iteratively from it to create new names.</p></li>
<li><p>The point above is formalized in the models we created, by setting up a loss function that is used for multi-class classification (cross entropy loss). In non-generative models, this loss is used to predict the correct (single!) class for any input. During inference, the class that has the largest logit will be our prediction for the input. However, for generative models we don’t look at the class with the largest logit, instead we look at all the logits and turn it into a probability distribution (by taking the softmax) to sample over it. In this regard, there is no difference in network architecture between generative and non-generative models per se, but a difference in the way we <em>use</em> the network.</p></li>
<li><p>Language models have a finite set of values the inputs and outputs can take on. Since we are working with a dictionary, any input or output token is necessarily an element in this set. This is different for example from a regression problem in which we try to estimate the housing price from the square footage. In that case both the feature (square footage) and the label (price) can take on any value. The fact that the output has a finite set of outcomes is formalized by the loss function described above. The fact that the input is finite, is formalized by making use of an embedding matrix to encode our inputs.</p></li>
<li><p>In the past I have worked a couple of times on time series forecasting. And one simple way to create a <em>probabilistic</em> forecast, would be to employ the n-gram models defined above. The only requirement would be that the values are discretized.</p></li>
</ol>


</section>

 ]]></description>
  <category>code</category>
  <category>neural network</category>
  <category>nlp</category>
  <guid>https://lucasvw.github.io/posts/13_ngram/index.html</guid>
  <pubDate>Wed, 06 Sep 2023 00:00:00 GMT</pubDate>
  <media:content url="https://lucasvw.github.io/posts/13_ngram/image.png" medium="image" type="image/png" height="98" width="144"/>
</item>
<item>
  <title>nntrain (4/n): Accelerated optimization</title>
  <dc:creator>Lucas van Walstijn</dc:creator>
  <link>https://lucasvw.github.io/posts/12_nntrain_accelerations/index.html</link>
  <description><![CDATA[ 



<p>In this series, I want to discuss the creation of a small PyTorch based library for training neural networks: <code>nntrain</code>. It’s based off the excellent <a href="https://course.fast.ai/">part 2</a> of Practical Deep Learning for Coders by Jeremy Howard, in which from lessons 13 to 18 (roughly) the development of the <code>miniai</code> library is discussed.</p>
<p>We’ll try to build everything as much as possible from scratch to understand how things work. Once the main functionality of components is implemented and verified, we can switch over to PyTorch’s version. This is similar to how things are done in the course. However, this is not just a “copy / paste” of the course: on many occasions I take a different route, and most of the code is my own. That is not to say that all of this is meant to be extremely innovative, instead I had the following goals:</p>
<ul>
<li>Deeply understand the training of neural networks with a focus on PyTorch</li>
<li>Try to create an even better narrative then what’s presented in FastAI 🙉🤷‍♂️🙈</li>
<li>Get hands-on experience with creating a library with <a href="https://nbdev.fast.ai/"><code>nb_dev</code></a></li>
</ul>
<p><code>nb_dev</code> is another great project from the fastai community, which allows python libraries to be written in jupyter notebooks. This may sound a bit weird and controversial, but it has the advantage that we can create the source code for our library in the very same environment in which we want to experiment and interact with our methods, objects and structure <strong>while we are building the library</strong>. For more details on why this is a good idea and other nice features of <code>nb_dev</code>, see <a href="https://www.fast.ai/posts/2022-07-28-nbdev2.html">here</a>.</p>
<p>So without further ado, let’s start with where we left off in the previous <a href="https://lucasvw.github.io/posts/11_nntrain_activations/">post</a>:</p>
<section id="end-of-last-post" class="level2">
<h2 class="anchored" data-anchor-id="end-of-last-post">End of last post:</h2>
<p>In the last <a href="https://lucasvw.github.io/posts/11_nntrain_activations/">post</a> we build a convolutional neural network, loaded the Fashion-Mnist data using our <a href="https://lucasvw.github.io/nntrain/dataloaders.html">Dataloaders</a> module, and trained it using the <a href="https://lucasvw.github.io/nntrain/learner.html">Learner</a> module. We created a <a href="https://lucasvw.github.io/nntrain/activations.html">module</a> which helped to understand the fine-print of training a model, more specifically by understanding the activations throughout the network during training.</p>
<p>We finally reached a performance of around 89% (evaluation) accuracy by training 5 epochs. In this post, we are going to look closely into how a model is learning: the step in which we update the weights after the backward pass in the training loop.</p>
<p>Updating the weights takes the form of:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Aw_t%20=%20w_%7Bt-1%7D%20-%20lr%20%5Ccdot%20grad%5E%7Bw%7D_%7Bt-1%7D%0A"> or in more pseudocode style syntax: <img src="https://latex.codecogs.com/png.latex?%0Aw%20%5Cleftarrow%20w%20-%20lr%20%5Ccdot%20grad%5E%7Bw%7D%0A"></p>
<p>Before we dive into different versions of this update step and it’s implications, I would like to have a good look at this remarkebly simple formula. Specifically, it’s important that the change to the weights from one step to another is composed of the product of the learning rate <img src="https://latex.codecogs.com/png.latex?lr"> and the gradient of the loss with respect to the weight we are updating: <img src="https://latex.codecogs.com/png.latex?grad%5Ew">. And since it’s a product, doubling one and reducing the other by a factor of 2, cancel each other out.</p>
<p>For example, consider some training setup with some loss function <img src="https://latex.codecogs.com/png.latex?loss"> and some learning rate <img src="https://latex.codecogs.com/png.latex?lr">. If we would change our loss function by adding a factor of 2: <img src="https://latex.codecogs.com/png.latex?loss_1%20=%202%20%5Ccdot%20loss"> this would have the effect that the gradients would also double. Very similiar to how if</p>
<img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Baligned%7D%0Af(x)%20&amp;=%20x%5E2%20&amp;&amp;%5Crightarrow%20f'(x)%20=%202x%20%5C%5C%0Ag(x)%20&amp;=%202f(x)%20=%202x%5E2%20%20&amp;&amp;%5Crightarrow%20g'(x)%20=%204x%20=%202f'(x)%0A%5Cend%7Baligned%7D">
<p>And since learning rate and gradients are multiplied in the weight update, we could offset the doubling of the loss by reducing the learning rate by 2. It’s thus important to realize how these components interact.</p>
</section>
<section id="weight-decay" class="level2">
<h2 class="anchored" data-anchor-id="weight-decay">Weight decay</h2>
<p>Weight decay is a very common regularization technique. Regularization is meant to reduce overfitting. When a model is overfitting, it basically has learned the structure of the training set to such a degree (e.g.&nbsp;memorized) that it performs very well on the training set, but performance is degraded on the validation set. This means the model is no longer generalizing well to data it was not trained on. And since we are always interested in using a model for making predictions on data it hasn’t seen (e.g.&nbsp;inference), this is an extremely important thing to be aware of.</p>
<p>Weight decay takes the simple form of adding a component to the loss which penalizes large weights:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Aloss_%7Bwd%7D%20=%20loss%20+%20c%5Csum%7Bw_i%5E2%7D%0A"></p>
<p>And since this simple sum we are adding has no interaction terms between weights, we simply get:</p>
<img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Baligned%7D%0Agrad_%7Bwd%7D%20&amp;=%20grad%20+%202c%5Ccdot%20w%20%5C%5C%0A&amp;=%20grad%20+%20d%20%5Ccdot%20w%0A%5Cend%7Baligned%7D">
<p>And then going back to updating the weights:</p>
<img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Baligned%7D%0Aw_%7Bwd%7D%20&amp;%5Cleftarrow%20w_%7Bwd%7D%20-%20lr%20%5Ccdot%20grad_%7Bwd%7D%20%20%5C%5C%0A&amp;=%20w_%7Bwd%7D%20-%20lr%20%5Ccdot%20(grad%20+%20d%20%5Ccdot%20w_%7Bwd%7D)%20%5C%5C%0A&amp;=%20w_%7Bwd%7D%20-%20lr%20%5Ccdot%20grad%20-%20lr%20%5Ccdot%20d%20%5Ccdot%20w_%7Bwd%7D%20%5C%5C%0A&amp;=%20w_%7Bwd%7D(1%20-%20lr%20%5Ccdot%20d)%20-%20lr%20%5Ccdot%20grad%0A%5Cend%7Baligned%7D">
<p>If we compare this expression to the regular update step: <img src="https://latex.codecogs.com/png.latex?w%20%5Cleftarrow%20w%20-%20lr%20%5Ccdot%20grad%5E%7Bw%7D">, we find that we can simply multiply the weights by <img src="https://latex.codecogs.com/png.latex?(1%20-%20lr%20%5Ccdot%20d)"> before we do the step:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| export</span></span>
<span id="cb1-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> SGD:</span>
<span id="cb1-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, params, lr, wd<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>):</span>
<span id="cb1-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(params)</span>
<span id="cb1-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lr</span>
<span id="cb1-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.wd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> wd</span>
<span id="cb1-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb1-8"></span>
<span id="cb1-9">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> step(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):                    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># this is the method that get's called by the Learner</span></span>
<span id="cb1-10">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb1-11">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.params:</span>
<span id="cb1-12">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.reg_step(p)       <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># first add regularization</span></span>
<span id="cb1-13">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.opt_step(p)       <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># then do the actual step</span></span>
<span id="cb1-14">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-15"></span>
<span id="cb1-16">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> opt_step(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, p):</span>
<span id="cb1-17">        p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> p.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lr          <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># regular step</span></span>
<span id="cb1-18">    </span>
<span id="cb1-19">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> reg_step(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, p):</span>
<span id="cb1-20">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.wd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:               <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># only regularize when the weight decay parameter is set</span></span>
<span id="cb1-21">            p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.wd   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># update the weights as described above</span></span>
<span id="cb1-22"></span>
<span id="cb1-23">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> zero_grad(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-24">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.params:</span>
<span id="cb1-25">            p.grad.data.zero_()</span></code></pre></div>
</div>
<p>Let’s try it out:</p>
<div class="cell">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> datasets <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> load_dataset,load_dataset_builder</span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> nntrain.dataloaders <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> DataLoaders, hf_ds_collate_fn</span>
<span id="cb2-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> nntrain.learner <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb2-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> nntrain.activations <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span></code></pre></div>
</details>
</div>
<div class="cell">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torchvision.transforms.functional <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> TF</span>
<span id="cb3-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb3-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> nn</span>
<span id="cb3-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn.functional <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> F</span>
<span id="cb3-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> operator <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> attrgetter</span>
<span id="cb3-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> functools <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> partial</span>
<span id="cb3-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> fastcore.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> fc</span>
<span id="cb3-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> math</span>
<span id="cb3-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torcheval.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> tem</span>
<span id="cb3-10"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb3-11"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random</span>
<span id="cb3-12"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span></code></pre></div>
</details>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fashion_mnist"</span></span>
<span id="cb4-2">ds_builder <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> load_dataset_builder(name)</span>
<span id="cb4-3">hf_dd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> load_dataset(name)</span>
<span id="cb4-4">bs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1024</span></span>
<span id="cb4-5">collate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> partial(hf_ds_collate_fn, flatten<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb4-6">dls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataLoaders.from_hf_dd(hf_dd, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>bs, collate_fn<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>collate)</span>
<span id="cb4-7">set_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb4-8"></span>
<span id="cb4-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># model and initializaton</span></span>
<span id="cb4-10">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cnn_layers().<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(init_weights)</span>
<span id="cb4-11"></span>
<span id="cb4-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># normalization</span></span>
<span id="cb4-13">xb, yb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">iter</span>(dls.train))</span>
<span id="cb4-14">norm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> NormalizationS(xb.mean(), xb.std())</span>
<span id="cb4-15"></span>
<span id="cb4-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># subscribers</span></span>
<span id="cb4-17">subs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [norm, </span>
<span id="cb4-18">        ProgressS(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>),</span>
<span id="cb4-19">        MetricsS(accuracy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>tem.MulticlassAccuracy()),</span>
<span id="cb4-20">        DeviceS(device)]</span>
<span id="cb4-21"></span>
<span id="cb4-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remember that the optim_func get's initialized during fit()</span></span>
<span id="cb4-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># https://github.com/lucasvw/nntrain/blob/main/nntrain/learners.py#L53C65-L53C65</span></span>
<span id="cb4-24">optim_func <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> partial(SGD, wd<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb4-25">lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.4</span></span>
<span id="cb4-26"></span>
<span id="cb4-27">l <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MomentumLearner(model, dls, F.cross_entropy, optim_func, lr, subs)</span>
<span id="cb4-28">l.fit(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"31ebdffcb5af405d8ec502ab213a6844","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"3824d457a7334ddebf622b8745e17e4f","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Downloading and preparing dataset fashion_mnist/fashion_mnist (download: 29.45 MiB, generated: 34.84 MiB, post-processed: Unknown size, total: 64.29 MiB) to /root/.cache/huggingface/datasets/fashion_mnist/fashion_mnist/1.0.0/8d6c32399aa01613d96e2cbc9b13638f359ef62bb33612b077b4c247f6ef99c1...
Dataset fashion_mnist downloaded and prepared to /root/.cache/huggingface/datasets/fashion_mnist/fashion_mnist/1.0.0/8d6c32399aa01613d96e2cbc9b13638f359ef62bb33612b077b4c247f6ef99c1. Subsequent calls will reuse this data.</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"ad0c916106cc4a0babf0402321a0e48d","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"ba611c1bfcf84e9daada7880c6912a60","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"3945309e887b48eaa12a0bd50ba31238","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"5aa81ca5a3c545beaf85c412628cd03f","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"08ee275194344713b9ec63d722a10c11","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"66c380d706e5459b96f2499be1d89686","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"aa6489623b734880857fc76fd990bc0a","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">
<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">mode</th>
<th data-quarto-table-cell-role="th">loss</th>
<th data-quarto-table-cell-role="th">accuracy</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>train</td>
<td>0.590</td>
<td>0.788</td>
</tr>
<tr class="even">
<td>0</td>
<td>eval</td>
<td>0.406</td>
<td>0.846</td>
</tr>
<tr class="odd">
<td>1</td>
<td>train</td>
<td>0.350</td>
<td>0.872</td>
</tr>
<tr class="even">
<td>1</td>
<td>eval</td>
<td>0.365</td>
<td>0.862</td>
</tr>
<tr class="odd">
<td>2</td>
<td>train</td>
<td>0.305</td>
<td>0.888</td>
</tr>
<tr class="even">
<td>2</td>
<td>eval</td>
<td>0.349</td>
<td>0.871</td>
</tr>
<tr class="odd">
<td>3</td>
<td>train</td>
<td>0.280</td>
<td>0.896</td>
</tr>
<tr class="even">
<td>3</td>
<td>eval</td>
<td>0.342</td>
<td>0.876</td>
</tr>
<tr class="odd">
<td>4</td>
<td>train</td>
<td>0.261</td>
<td>0.903</td>
</tr>
<tr class="even">
<td>4</td>
<td>eval</td>
<td>0.308</td>
<td>0.889</td>
</tr>
</tbody>
</table>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://lucasvw.github.io/posts/12_nntrain_accelerations/index_files/figure-html/cell-5-output-15.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="momentum" class="level2">
<h2 class="anchored" data-anchor-id="momentum">Momentum</h2>
<p>Momentum has to do with smartly navigating the loss surface. The loss surface is a high dimensional plain (manifold) where each dimension is a single parameter in the model. Since humans are not made for thinking beyond 3 dimensions, let’s thus quickly replace this by a mental image with just 3 dimensions. Let the loss surface have just 2 parameters that are put on the x and y dimensions, and let z represent the value of our loss function.</p>
<p>Training a neural network is all about finding a low (the lowest) spot on this surface, e.g.&nbsp;a point in this space in which the parameters (x and y) take on a value so that the loss (z direction) is low.</p>
<p>To find such a spot, we have to navigate this surface. Sometimes it might be difficult to find this spot from the point where we are, since the lowest value might lay behind a hill. Realize that we also never “see” the complete surface, we can only navigate it by computing gradients from the point where we currently are. We can draw an analogy of a astronaut being dropped in a completely alien world, having a need to find water (the lowest point on the surface) as quickly as possible (because of limitted oxygen supply) with a visibility of only 1 meter.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lucasvw.github.io/posts/12_nntrain_accelerations/loss_surface2.png" class="img-fluid figure-img" width="400"></p>
<figcaption class="figure-caption">2D Loss surface: difficult to find the lowest spot from a random position with super short visibility!</figcaption>
</figure>
</div>
<p>So what’s our strategy to find water asap? With SGD we compute the gradient based on the contributions of each sample in the minibatch. Then we take a small step in this direction (of size: learning rate x gradient). And we keep repeating this. But imagine that each time we compute this gradient, we find that it’s more or less in the same direction. Would it then not make sense to maybe take a bit of a larger step? This is the intuition behind momentum, don’t just consider the gradient at the current position, but get some sense of the surrounding surface by inferring from the past couple of computed gradients. The following image shows this also nicely:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lucasvw.github.io/posts/12_nntrain_accelerations/momentum.png" class="img-fluid figure-img" width="600"></p>
<figcaption class="figure-caption">On the left SGD without momentum: just compute the gradient each batch and follow that. On the right, use momentum to find an average gradient across multiple batches. Note that this cancels the vertical component of the gradient somewhat out, and reinforces the horizontal component of the gradient, increasing the speed in the right direction.</figcaption>
</figure>
</div>
<p>To implement, we simply do:</p>
<img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Baligned%7D%0Aw%20&amp;%5Cleftarrow%20w%20-%20lr%20%5Ccdot%20grad%5C_avg%0A%5Cend%7Baligned%7D">
<p>The definition of <img src="https://latex.codecogs.com/png.latex?grad%5C_avg"> takes different forms. In PyTorch SGD it’s simply:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Agrad%5C_avg%20%5Cleftarrow%20grad%20+%20%5Cmu%20%5Ccdot%20grad%5C_avg%0A"></p>
<p>And this is also exactly the way we previously implemented in the <a href="https://lucasvw.github.io/posts/10_nntrain_learner/#momentumlearner"><code>MomentumLearner</code></a>. Additionally PyTorch defines a dampening parameter <img src="https://latex.codecogs.com/png.latex?%5Ctau"> (defaulting to zero):</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Agrad%5C_avg%20%5Cleftarrow%20(1%20-%20%5Ctau)%20grad%20+%20%5Cmu%20%5Ccdot%20grad%5C_avg%0A"></p>
<p>Jeremy Howard from Fastai suggests we take a weighted average between the grad and the running average. This is equivalent to setting <img src="https://latex.codecogs.com/png.latex?%5Ctau%20=%20%5Cmu"> (dampening = momentum) in PyTorch:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Agrad%5C_avg%20%5Cleftarrow%20(1-c)%20grad%20+%20c%20%5Ccdot%20grad%5C_avg%0A"></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| export</span></span>
<span id="cb6-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Momentum(SGD):</span>
<span id="cb6-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, params, lr, wd<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>, mom<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9</span>):</span>
<span id="cb6-4">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(params, lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>lr, wd<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>wd)</span>
<span id="cb6-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.mom<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>mom</span>
<span id="cb6-6"></span>
<span id="cb6-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> opt_step(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, p):</span>
<span id="cb6-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">hasattr</span>(p, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'grad_avg'</span>): p.grad_avg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros_like(p.grad)</span>
<span id="cb6-9">        p.grad_avg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p.grad_avg<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.mom <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> p.grad<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.mom)</span>
<span id="cb6-10">        p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> p.grad_avg</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">set_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb7-2"></span>
<span id="cb7-3">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cnn_layers().<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(init_weights)</span>
<span id="cb7-4">optim_func <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Momentum</span>
<span id="cb7-5">lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span></span>
<span id="cb7-6"></span>
<span id="cb7-7">l <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Learner(model, dls, F.cross_entropy, optim_func, lr, subs)</span>
<span id="cb7-8">l.fit(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">
<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">mode</th>
<th data-quarto-table-cell-role="th">loss</th>
<th data-quarto-table-cell-role="th">accuracy</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>train</td>
<td>0.606</td>
<td>0.784</td>
</tr>
<tr class="even">
<td>0</td>
<td>eval</td>
<td>0.439</td>
<td>0.838</td>
</tr>
<tr class="odd">
<td>1</td>
<td>train</td>
<td>0.359</td>
<td>0.869</td>
</tr>
<tr class="even">
<td>1</td>
<td>eval</td>
<td>0.372</td>
<td>0.861</td>
</tr>
<tr class="odd">
<td>2</td>
<td>train</td>
<td>0.322</td>
<td>0.881</td>
</tr>
<tr class="even">
<td>2</td>
<td>eval</td>
<td>0.372</td>
<td>0.864</td>
</tr>
<tr class="odd">
<td>3</td>
<td>train</td>
<td>0.293</td>
<td>0.892</td>
</tr>
<tr class="even">
<td>3</td>
<td>eval</td>
<td>0.329</td>
<td>0.878</td>
</tr>
<tr class="odd">
<td>4</td>
<td>train</td>
<td>0.271</td>
<td>0.900</td>
</tr>
<tr class="even">
<td>4</td>
<td>eval</td>
<td>0.314</td>
<td>0.886</td>
</tr>
</tbody>
</table>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://lucasvw.github.io/posts/12_nntrain_accelerations/index_files/figure-html/cell-7-output-3.png" class="img-fluid"></p>
</div>
</div>
<p>Geoffrey Hinton in this <a href="https://youtu.be/z2rTn8Evav8?si=Sd6surVPoo1c7pr8">lecture</a> on Momentum mentions that one problem with using plain SGD with a large learning rate is that you can get divergent oscillations if you try to travel down a long and narrow canyon. This would be similar to what happens on the left hand side of the figure above, but now with a learning rate so big that we actually diverge from the goal. By adding momentum he argues, it’s easier to find the “dominant” (horizontal) direction and we can thus increase the learning rate without causing divergent oscillations.</p>
<p>One issue he describes, is that in the beginning of training when the gradients are still large, the momentum should be kept much smaller since otherwise the updates become just too big. One way to deal with these would be to change the momentum during training (but more about that later when we start looking into schedulers) or by using something like RMSProp:</p>
</section>
<section id="rmsprop" class="level2">
<h2 class="anchored" data-anchor-id="rmsprop">RMSProp</h2>
<p>RMSProp is a technique (first?) described by Geoffrey Hinton in an online <a href="https://www.youtube.com/watch?v=XhZahXzEuNo">MOOC</a>. Jeremy Howard describes RMSProp as “Momentum, but with the squares of the gradient”. I personally think this is a rather bad explanation, since this is <strong>not at all</strong> what’s going on. Instead it’s a technique that is concerned with the differences in magnitude of the gradients of different weights. This leads to weights getting updated at very different “speeds”. E.g. if you have one weight which gradient is 10 times the gradient of another, that weight get’s an update that’s 10 times as large as the other one.</p>
<p>This can exist between weights at one single step, but also between gradients of a single weight during different times in training.</p>
<p>The reason for this is of course that the learning rate is equal <strong>at all times for all parameters</strong>. RMSProp is a technique which scales the gradients inversely to the (averaged out) magnitude of the gradient:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Aw%20%5Cleftarrow%20w%20-%20lr%20%5Ccdot%20%5Cfrac%7Bgrad%7D%7B%5Csqrt%7Bacc%5C_sqrd%5C_grad%7D%7D%0A"></p>
<p>where</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Aacc%5C_sqrd%5C_grad%20=%20c%20%5Ccdot%20acc%5C_sqrd%5C_grad%20+%20(1-c)%20grad%5E2%0A"></p>
<p>From which it should be clear that using RMSprop has a large impact on the weight updates, you will thus have to recalibrate your learning rate.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| export</span></span>
<span id="cb8-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> RMSProp(SGD):</span>
<span id="cb8-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, params, lr, wd<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>, sqr_mom<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.99</span>, eps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-5</span>):</span>
<span id="cb8-4">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(params, lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>lr, wd<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>wd)</span>
<span id="cb8-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.sqr_mom <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sqr_mom</span>
<span id="cb8-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.eps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> eps</span>
<span id="cb8-7"></span>
<span id="cb8-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> opt_step(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, p):</span>
<span id="cb8-9">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">hasattr</span>(p, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sqr_avg'</span>): </span>
<span id="cb8-10">            p.sqr_avg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p.grad<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb8-11">        p.sqr_avg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p.sqr_avg<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.sqr_mom <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.sqr_mom)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>p.grad<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb8-12">        p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> p.grad<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>(p.sqr_avg.sqrt() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.eps)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">set_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb9-2"></span>
<span id="cb9-3">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cnn_layers().<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(init_weights)</span>
<span id="cb9-4">optim_func <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RMSProp</span>
<span id="cb9-5">lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3e-3</span>                        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># much smaller learning rate!</span></span>
<span id="cb9-6"></span>
<span id="cb9-7">l <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Learner(model, dls, F.cross_entropy, optim_func, lr, subs)</span>
<span id="cb9-8">l.fit(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">
<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">mode</th>
<th data-quarto-table-cell-role="th">loss</th>
<th data-quarto-table-cell-role="th">accuracy</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>train</td>
<td>0.699</td>
<td>0.754</td>
</tr>
<tr class="even">
<td>0</td>
<td>eval</td>
<td>0.472</td>
<td>0.831</td>
</tr>
<tr class="odd">
<td>1</td>
<td>train</td>
<td>0.421</td>
<td>0.847</td>
</tr>
<tr class="even">
<td>1</td>
<td>eval</td>
<td>0.452</td>
<td>0.837</td>
</tr>
<tr class="odd">
<td>2</td>
<td>train</td>
<td>0.373</td>
<td>0.862</td>
</tr>
<tr class="even">
<td>2</td>
<td>eval</td>
<td>0.387</td>
<td>0.858</td>
</tr>
<tr class="odd">
<td>3</td>
<td>train</td>
<td>0.344</td>
<td>0.874</td>
</tr>
<tr class="even">
<td>3</td>
<td>eval</td>
<td>0.378</td>
<td>0.860</td>
</tr>
<tr class="odd">
<td>4</td>
<td>train</td>
<td>0.322</td>
<td>0.881</td>
</tr>
<tr class="even">
<td>4</td>
<td>eval</td>
<td>0.352</td>
<td>0.875</td>
</tr>
</tbody>
</table>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://lucasvw.github.io/posts/12_nntrain_accelerations/index_files/figure-html/cell-9-output-3.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="adam" class="level2">
<h2 class="anchored" data-anchor-id="adam">Adam</h2>
<p>Adam is probably the most common optimizer used in practice, and is nothing more then the combination of RMSProp and Momentum:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Aw%20%5Cleftarrow%20w%20-%20lr%20%5Ccdot%20%5Cfrac%7Bavg%5C_grad%7D%7B%5Csqrt%7Bacc%5C_sqrd%5C_grad%7D%7D%0A"></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| export</span></span>
<span id="cb10-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Adam(SGD):</span>
<span id="cb10-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, params, lr, wd<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>, beta1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9</span>, beta2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.99</span>, eps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-5</span>):</span>
<span id="cb10-4">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(params, lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>lr, wd<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>wd)</span>
<span id="cb10-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.beta1,<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.beta2,<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.eps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> beta1,beta2,eps</span>
<span id="cb10-6"></span>
<span id="cb10-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> opt_step(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, p):</span>
<span id="cb10-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">hasattr</span>(p, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'avg'</span>): </span>
<span id="cb10-9">            p.avg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros_like(p.grad.data)</span>
<span id="cb10-10">            p.sqr_avg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros_like(p.grad.data)</span>
<span id="cb10-11">            </span>
<span id="cb10-12">        p.avg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.beta1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>p.avg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.beta1)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>p.grad</span>
<span id="cb10-13">        unbias_avg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p.avg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.beta1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)))</span>
<span id="cb10-14">        p.sqr_avg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.beta2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>p.sqr_avg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.beta2)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>(p.grad<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb10-15">        unbias_sqr_avg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p.sqr_avg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.beta2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)))</span>
<span id="cb10-16">        p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> unbias_avg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (unbias_sqr_avg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.eps).sqrt()</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">set_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb11-2"></span>
<span id="cb11-3">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cnn_layers().<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(init_weights)</span>
<span id="cb11-4">optim_func <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Adam</span>
<span id="cb11-5">lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">6e-3</span></span>
<span id="cb11-6"></span>
<span id="cb11-7">l <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Learner(model, dls, F.cross_entropy, optim_func, lr, subs)</span>
<span id="cb11-8">l.fit(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">
<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">mode</th>
<th data-quarto-table-cell-role="th">loss</th>
<th data-quarto-table-cell-role="th">accuracy</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>train</td>
<td>0.609</td>
<td>0.783</td>
</tr>
<tr class="even">
<td>0</td>
<td>eval</td>
<td>0.449</td>
<td>0.838</td>
</tr>
<tr class="odd">
<td>1</td>
<td>train</td>
<td>0.366</td>
<td>0.865</td>
</tr>
<tr class="even">
<td>1</td>
<td>eval</td>
<td>0.373</td>
<td>0.866</td>
</tr>
<tr class="odd">
<td>2</td>
<td>train</td>
<td>0.320</td>
<td>0.882</td>
</tr>
<tr class="even">
<td>2</td>
<td>eval</td>
<td>0.365</td>
<td>0.863</td>
</tr>
<tr class="odd">
<td>3</td>
<td>train</td>
<td>0.290</td>
<td>0.893</td>
</tr>
<tr class="even">
<td>3</td>
<td>eval</td>
<td>0.325</td>
<td>0.881</td>
</tr>
<tr class="odd">
<td>4</td>
<td>train</td>
<td>0.269</td>
<td>0.902</td>
</tr>
<tr class="even">
<td>4</td>
<td>eval</td>
<td>0.323</td>
<td>0.882</td>
</tr>
</tbody>
</table>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://lucasvw.github.io/posts/12_nntrain_accelerations/index_files/figure-html/cell-11-output-3.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="learning-rate-schedulers" class="level2">
<h2 class="anchored" data-anchor-id="learning-rate-schedulers">Learning Rate Schedulers</h2>
<p>Now let’s look at learning rate schedulers: these are objects that change important parameters such as the learning rate and momentum <strong>during training</strong>. The <code>OneCycleLR</code> scheduler for example starts with a low learning rate, then increases it to a maximum value and then anneales it back to the lower value.</p>
<p>The idea being that initially, when our weights are random, we don’t want to take too large steps. As the weights are getting somewhat reasonable, we speed up the learning and once we arrive at a better solution because of this, we decrease the learning rate again to make sure we can squeeze out the last bit of performance gain:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">opt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.optim.SGD(model.parameters(), lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3e-3</span>)</span>
<span id="cb12-2"></span>
<span id="cb12-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Every scheduler has the concept of steps. </span></span>
<span id="cb12-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Either specified as done here or as "epochs" and "steps_per_epoch" (=# of batches) as two separate args</span></span>
<span id="cb12-5">steps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>   </span>
<span id="cb12-6">sch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.optim.lr_scheduler.OneCycleLR(opt, max_lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">6e-2</span>, total_steps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>steps)</span>
<span id="cb12-7"></span>
<span id="cb12-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The scheduler has a convenience method for getting the current learning rate</span></span>
<span id="cb12-9">lrs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [sch.get_last_lr()]</span>
<span id="cb12-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># For other parameters such as momentum, we have to look into the optimizer itself</span></span>
<span id="cb12-11">moms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [opt.param_groups[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'momentum'</span>]]</span>
<span id="cb12-12"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>):</span>
<span id="cb12-13">    opt.step()                 </span>
<span id="cb12-14">    sch.step()                       <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># calling step() on the scheduler updates the parameters of the optimizer</span></span>
<span id="cb12-15">    lrs.append(sch.get_last_lr())</span>
<span id="cb12-16">    moms.append(opt.param_groups[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'momentum'</span>])</span>
<span id="cb12-17"></span>
<span id="cb12-18">fig, axs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb12-19">axs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].plot(lrs)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-20">axs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'learning rate'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-21">axs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].plot(moms)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-22">axs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'momentum'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://lucasvw.github.io/posts/12_nntrain_accelerations/index_files/figure-html/cell-12-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>Besides the cycling of the learning rate, the momentum is cycled inversely with the <code>OneCycleLr</code> scheduler</p>
<p>Let’s see if we can create a Subscriber that enables the use of Schedulers in our framework:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| export</span></span>
<span id="cb13-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> SchedulerS(Subscriber):</span>
<span id="cb13-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, scheduler_class):</span>
<span id="cb13-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.scheduler_class <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> scheduler_class</span>
<span id="cb13-5">    </span>
<span id="cb13-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># intialize the scheduler instance after the optimizer has been intialized</span></span>
<span id="cb13-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> before_fit(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, learn):</span>
<span id="cb13-8">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.scheduler <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.scheduler_class(learn.opt) </span>
<span id="cb13-9">        </span>
<span id="cb13-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># step the scheduler after the optimizer has stepped</span></span>
<span id="cb13-11">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> after_step(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, learn):</span>
<span id="cb13-12">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.scheduler.step()</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">set_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb14-2"></span>
<span id="cb14-3">epochs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb14-4">N <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(dls.train)</span>
<span id="cb14-5"></span>
<span id="cb14-6">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cnn_layers().<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(init_weights)</span>
<span id="cb14-7">lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">6e-2</span></span>
<span id="cb14-8">sch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> partial(torch.optim.lr_scheduler.OneCycleLR, max_lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>lr, epochs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>epochs, steps_per_epoch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>N)</span>
<span id="cb14-9">subs_sch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> subs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [SchedulerS(sch)]</span>
<span id="cb14-10"></span>
<span id="cb14-11">l <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Learner(model, dls, F.cross_entropy, torch.optim.Adam, lr, subs_sch)</span>
<span id="cb14-12">l.fit(epochs)</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">
<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">mode</th>
<th data-quarto-table-cell-role="th">loss</th>
<th data-quarto-table-cell-role="th">accuracy</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>train</td>
<td>0.679</td>
<td>0.762</td>
</tr>
<tr class="even">
<td>0</td>
<td>eval</td>
<td>0.818</td>
<td>0.763</td>
</tr>
<tr class="odd">
<td>1</td>
<td>train</td>
<td>0.386</td>
<td>0.859</td>
</tr>
<tr class="even">
<td>1</td>
<td>eval</td>
<td>0.372</td>
<td>0.860</td>
</tr>
<tr class="odd">
<td>2</td>
<td>train</td>
<td>0.298</td>
<td>0.889</td>
</tr>
<tr class="even">
<td>2</td>
<td>eval</td>
<td>0.321</td>
<td>0.880</td>
</tr>
<tr class="odd">
<td>3</td>
<td>train</td>
<td>0.244</td>
<td>0.910</td>
</tr>
<tr class="even">
<td>3</td>
<td>eval</td>
<td>0.278</td>
<td>0.894</td>
</tr>
<tr class="odd">
<td>4</td>
<td>train</td>
<td>0.208</td>
<td>0.923</td>
</tr>
<tr class="even">
<td>4</td>
<td>eval</td>
<td>0.265</td>
<td>0.902</td>
</tr>
</tbody>
</table>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://lucasvw.github.io/posts/12_nntrain_accelerations/index_files/figure-html/cell-14-output-3.png" class="img-fluid"></p>
</div>
</div>
<p>And that helps us to reach 90% accuracy! Not bad for a simple convolutional neural network</p>
</section>
<section id="resnet" class="level2">
<h2 class="anchored" data-anchor-id="resnet">ResNet</h2>
<p>Next, let’s see if we can increase the depth of the model even more: we can use a reduced stride (=1) in the first convolution so that we don’t reduce the pixel-grid. We can thus add one more convolution at the end, to end up with a 1x1 pixel grid:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> cnn_layers_more_depth():</span>
<span id="cb15-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> nn.Sequential(                               <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 28x28  </span></span>
<span id="cb15-3">        conv_block(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> , <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),                    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 28x28</span></span>
<span id="cb15-4">        conv_block(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span> ,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>),                              <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 14x14</span></span>
<span id="cb15-5">        conv_block(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>),                              <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 7x7</span></span>
<span id="cb15-6">        conv_block(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>),                              <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 4x4</span></span>
<span id="cb15-7">        conv_block(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>),                             <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 2x2</span></span>
<span id="cb15-8">        conv_block(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, norm<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, act<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>),      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 1x1</span></span>
<span id="cb15-9">        nn.Flatten())</span>
<span id="cb15-10"></span>
<span id="cb15-11">set_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb15-12"></span>
<span id="cb15-13">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cnn_layers_more_depth().<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(init_weights)</span>
<span id="cb15-14"></span>
<span id="cb15-15">l <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Learner(model, dls, F.cross_entropy, torch.optim.Adam, lr, subs_sch)</span>
<span id="cb15-16">l.fit(epochs)</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">
<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">mode</th>
<th data-quarto-table-cell-role="th">loss</th>
<th data-quarto-table-cell-role="th">accuracy</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>train</td>
<td>0.571</td>
<td>0.801</td>
</tr>
<tr class="even">
<td>0</td>
<td>eval</td>
<td>0.600</td>
<td>0.821</td>
</tr>
<tr class="odd">
<td>1</td>
<td>train</td>
<td>0.325</td>
<td>0.880</td>
</tr>
<tr class="even">
<td>1</td>
<td>eval</td>
<td>0.399</td>
<td>0.864</td>
</tr>
<tr class="odd">
<td>2</td>
<td>train</td>
<td>0.248</td>
<td>0.909</td>
</tr>
<tr class="even">
<td>2</td>
<td>eval</td>
<td>0.302</td>
<td>0.894</td>
</tr>
<tr class="odd">
<td>3</td>
<td>train</td>
<td>0.192</td>
<td>0.929</td>
</tr>
<tr class="even">
<td>3</td>
<td>eval</td>
<td>0.234</td>
<td>0.914</td>
</tr>
<tr class="odd">
<td>4</td>
<td>train</td>
<td>0.143</td>
<td>0.948</td>
</tr>
<tr class="even">
<td>4</td>
<td>eval</td>
<td>0.228</td>
<td>0.919</td>
</tr>
</tbody>
</table>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://lucasvw.github.io/posts/12_nntrain_accelerations/index_files/figure-html/cell-15-output-3.png" class="img-fluid"></p>
</div>
</div>
<p>The question arises whether we can keep increasing the depth of our model to boost our performance. Since we already exhausted the pixel grid, the only way would be to add more stride 1 convolutions.</p>
<p>However, this doesn’t improve performance. Kaiming et al found in “Deep Residual Learning for Image Recognition” that deeper CNN models often perform worse then shallow CNN models. This is surprising since a deeper model can be understood as a superset of a more shallow model. It’s easy to see this if we consider that a deeper model can just duplicate the shallow model in it’s initial layers matching the layers of the shallow model, and keep it’s excess layers as an identity, passing through the data <em>as is</em>. But the observation they made, is that during training deeper model are performing worse and thus this “optimum” is apparently not found while training the deeper model.</p>
<p>To help the training process of deeper models, they came up with an architecture which should be able to <em>more easily</em> replicate the shallow network. And the way they did this, was by adding skip connections:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lucasvw.github.io/posts/12_nntrain_accelerations/skip_connection.png" class="img-fluid figure-img" width="600"></p>
<figcaption class="figure-caption">ResBlock consisting of two paths: a convolutional path, and a path in which the signal is propagated directly</figcaption>
</figure>
</div>
<p>So instead of having a fully sequential model, they added these identity skip connections which connects both the input to and the output of the convolutional path. They argued that by doing so, it would be trivial for the model to forward the data without modifying it. This way, the model could use the convolutional path for the depth of “shallow” model, and use the skip connections for the remaining layers that only the “deep” model has.</p>
<p>Why a double convolutional layer? For that we come back to the idea of adding stride 1 convolution to increase the depth of our model. In the architecture described above, the first convolutional layer is a stride 1 convolution (keeping the pixel grid constant) and increases the number of filters. The second convolution is a stride 2 convolution which reduces the pixel grid by a factor of 2, but keeps the number of filters constant. <strong>The first convolution is thus expanding the data, and the second convolution compresses it, this is different from the standard ResBlock <a href="https://github.com/pytorch/vision/blob/1aef87d01eec2c0989458387fa04baebcc86ea7b/torchvision/models/resnet.py#L48-L51">implementation</a> in Pytorch and works significantly better in my experiments</strong>.</p>
<p>The name for the block shown above is a ResBlock, and a model that is using them is called a ResNet. Res is short for residual, and that name becomes apparent when we look at this block in the following way:</p>
<img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Baligned%7D%0A&amp;%20y%20&amp;&amp;=%20x%20+%20conv_2(conv_1(x))%20%5C%5C%0A&amp;%20y%20-%20x%20&amp;&amp;=%20conv_2(conv_1(x))%20%5C%5C%0A&amp;%20residual%20&amp;&amp;=%20conv_2(conv_1(x))%0A%5Cend%7Baligned%7D">
<p>The term <img src="https://latex.codecogs.com/png.latex?y-x"> is often called “the residual” in statistics. Now let’s see how we can create such a ResBlock, we start with the convolutional path:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| export</span></span>
<span id="cb16-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> conv_conn(in_c, out_c, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>):</span>
<span id="cb16-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> nn.Sequential(</span>
<span id="cb16-4">        conv_block(in_c, out_c, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>kernel_size, stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, act<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, norm<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>),</span>
<span id="cb16-5">        conv_block(out_c, out_c, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>kernel_size, stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>stride, act<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, norm<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb16-6">    )</span></code></pre></div>
</div>
<p>And let’s create the ResBlock with a couple of notes upfront:</p>
<ul>
<li>We can only use a “true” identity connection (<code>y_id = x</code>) under the condition that the convolutions don’t change the number of filters (<code>in_c = out_c</code>) nor the pixel grid (<code>stride=1</code>). In other words, we can only use a true identity connection if the trailing 3 dimensions in our batch NCHW stay constant. If this is not the case, we have to “match up” the identity connection as <em>simple as possible</em> to these new dimensions:
<ul>
<li>If the number of filters has changed we thus add a convolution with stride and kernel size equal to 1, only changing the number of channels.</li>
<li>If the pixel grid has changed (halved in size due to a stride 2 convolution in the convolutional connection), we reduce the size of pixel grid in the same way, making use of a <code>AvgPool2d</code> layer, effectively averaging with a 2x2 kernel size.</li>
</ul></li>
<li>Note also that the second convolution doesn’t have an activation, this is because we want to apply the activation after summing both the contributions from the identity path and the convolutional path</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| export</span></span>
<span id="cb17-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> ResBlock(nn.Module):</span>
<span id="cb17-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, in_c, out_c, stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>):</span>
<span id="cb17-4">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb17-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.in_c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> in_c</span>
<span id="cb17-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.out_c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> out_c</span>
<span id="cb17-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.stride <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stride</span>
<span id="cb17-8">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.conv_conn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> conv_conn(in_c, out_c, stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>stride)</span>
<span id="cb17-9">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.identity_conn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> conv_block(in_c, out_c, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, act<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, norm<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb17-10">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pooling <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.nn.AvgPool2d(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, ceil_mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb17-11">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.relu <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.ReLU()</span>
<span id="cb17-12">        </span>
<span id="cb17-13">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x):</span>
<span id="cb17-14">        y_conv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.conv_conn(x)</span>
<span id="cb17-15">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.in_c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.out_c: y_id <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x</span>
<span id="cb17-16">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.stride <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb17-17">            y_id <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.identity_conn(x)</span>
<span id="cb17-18">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb17-19">            y_id <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pooling(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.identity_conn(x))</span>
<span id="cb17-20">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.relu(y_conv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> y_id)</span></code></pre></div>
</div>
<p>Creating the ResNet is very similar to what we have done before, we basically replace the <code>conv_block</code> with a <code>ResBlock</code>. Additionally we change the head of the model: First we flatten, then we use a linear layer to map to the required dimensions (10 output categories) and we conclude with a final BatchNorm layer.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>Although the final BatchNorm layer has a positive impact on performance, I don’t have a good intuition as to the reasons why. I would think that the distributions of logits would be not very gaussian in an ideal setting: the correct categories should get much higher outputs then the other ones. Perhaps this works in some second order effect as regularization, or perhaps it has to do with the scaling that the BatchNorm layer does after the normalization. If anybody has a good intuition for this, please let me know🙏</p>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| export</span></span>
<span id="cb18-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> resnet():</span>
<span id="cb18-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> nn.Sequential(                             <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># pixel grid input: 28x28  </span></span>
<span id="cb18-4">        ResBlock(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> , <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),                    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 28x28</span></span>
<span id="cb18-5">        ResBlock(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span> ,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>),                              <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 14x14</span></span>
<span id="cb18-6">        ResBlock(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>),                              <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 7x7</span></span>
<span id="cb18-7">        ResBlock(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>),                              <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 4x4</span></span>
<span id="cb18-8">        ResBlock(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>),                             <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 2x2</span></span>
<span id="cb18-9">        ResBlock(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>),                            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 1x1</span></span>
<span id="cb18-10">        nn.Flatten(),                                 <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># flatten to 256 features</span></span>
<span id="cb18-11">        nn.Linear(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, bias<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>),               <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># linear layer to map to 10 output features</span></span>
<span id="cb18-12">        nn.BatchNorm1d(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)                            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># final batchnorm layer</span></span>
<span id="cb18-13">    )</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">set_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb19-2"></span>
<span id="cb19-3">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> resnet().<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(init_weights)</span>
<span id="cb19-4"></span>
<span id="cb19-5">lrfind <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LRFindS()</span>
<span id="cb19-6"></span>
<span id="cb19-7">lrfind_subs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [norm,</span>
<span id="cb19-8">               DeviceS(device),</span>
<span id="cb19-9">               lrfind]</span>
<span id="cb19-10"></span>
<span id="cb19-11">start_lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-5</span></span>
<span id="cb19-12">l <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Learner(model, dls, F.cross_entropy, torch.optim.Adam, start_lr, lrfind_subs)</span>
<span id="cb19-13">l.fit(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb19-14"></span>
<span id="cb19-15">lrfind.plot()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://lucasvw.github.io/posts/12_nntrain_accelerations/index_files/figure-html/cell-19-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">set_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb20-2"></span>
<span id="cb20-3">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> resnet().<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(init_weights)</span>
<span id="cb20-4"></span>
<span id="cb20-5">lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-2</span></span>
<span id="cb20-6">sch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> partial(torch.optim.lr_scheduler.OneCycleLR, max_lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>lr, epochs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>epochs, steps_per_epoch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>N)</span>
<span id="cb20-7"></span>
<span id="cb20-8">subs_sch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> subs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [SchedulerS(sch)]</span>
<span id="cb20-9"></span>
<span id="cb20-10">l <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Learner(model, dls, F.cross_entropy, torch.optim.Adam, lr, subs_sch)</span>
<span id="cb20-11">l.fit(epochs)</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">
<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">mode</th>
<th data-quarto-table-cell-role="th">loss</th>
<th data-quarto-table-cell-role="th">accuracy</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>train</td>
<td>0.815</td>
<td>0.783</td>
</tr>
<tr class="even">
<td>0</td>
<td>eval</td>
<td>0.578</td>
<td>0.846</td>
</tr>
<tr class="odd">
<td>1</td>
<td>train</td>
<td>0.399</td>
<td>0.889</td>
</tr>
<tr class="even">
<td>1</td>
<td>eval</td>
<td>0.372</td>
<td>0.885</td>
</tr>
<tr class="odd">
<td>2</td>
<td>train</td>
<td>0.282</td>
<td>0.914</td>
</tr>
<tr class="even">
<td>2</td>
<td>eval</td>
<td>0.292</td>
<td>0.906</td>
</tr>
<tr class="odd">
<td>3</td>
<td>train</td>
<td>0.212</td>
<td>0.934</td>
</tr>
<tr class="even">
<td>3</td>
<td>eval</td>
<td>0.257</td>
<td>0.918</td>
</tr>
<tr class="odd">
<td>4</td>
<td>train</td>
<td>0.159</td>
<td>0.953</td>
</tr>
<tr class="even">
<td>4</td>
<td>eval</td>
<td>0.237</td>
<td>0.927</td>
</tr>
</tbody>
</table>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://lucasvw.github.io/posts/12_nntrain_accelerations/index_files/figure-html/cell-20-output-3.png" class="img-fluid"></p>
</div>
</div>
<p>Which reaches a score of almost 93% within 5 epochs!</p>
</section>
<section id="parameters-and-macs" class="level2">
<h2 class="anchored" data-anchor-id="parameters-and-macs">Parameters and MACs</h2>
<p>Now that we are able to create fairly deep models, it’s a good idea to be able to track the memory footprint and the amount of compute that is involved in doing a single forward pass. To track the memory, we can look at the amount of parameters of each layer, and for the compute we can try to estimate something equivalent to Multiply–accumulate operations (MACs). Let’s create a small Subscriber that tracks thes stats by running one single batch and then cancels the fit:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| export</span></span>
<span id="cb21-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> ModelMonitorS(Subscriber):</span>
<span id="cb21-3">    </span>
<span id="cb21-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, modules): <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.modules <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> modules</span>
<span id="cb21-5">    </span>
<span id="cb21-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> before_fit(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, learn):</span>
<span id="cb21-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.hooks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [Hook(i, module, partial(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.record_stats, learn)) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i, module <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.modules)]</span>
<span id="cb21-8">        </span>
<span id="cb21-9">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> record_stats(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, learn, hook, layer, inp, outp):</span>
<span id="cb21-10">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> learn.model.training:</span>
<span id="cb21-11">            hook.nparams <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(submodule.numel() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> submodule <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> layer.parameters())</span>
<span id="cb21-12">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(layer, ResBlock):</span>
<span id="cb21-13">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># K × K × Cin × Hout × Wout × Cout source=https://machinethink.net/blog/how-fast-is-my-model/</span></span>
<span id="cb21-14">                mac_conv1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> layer.in_c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> inp[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> inp[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> layer.out_c</span>
<span id="cb21-15">                mac_conv2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> layer.out_c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> outp.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> outp.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> layer.out_c    </span>
<span id="cb21-16">                hook.mac <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (mac_conv1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> mac_conv2) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e6</span></span>
<span id="cb21-17">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> layer.stride <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb21-18">                    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add identity conv</span></span>
<span id="cb21-19">                    hook.mac <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> (layer.in_c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> outp.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> outp.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> layer.out_c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e6</span>)</span>
<span id="cb21-20">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb21-21">                hook.mac <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hook.nparams <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e6</span></span>
<span id="cb21-22">            hook.batch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> inp[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb21-23">            hook.in_shape <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(inp[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:])</span>
<span id="cb21-24">            hook.out_shape <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(outp.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:])</span>
<span id="cb21-25">            </span>
<span id="cb21-26">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> after_batch(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, learn):</span>
<span id="cb21-27">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> h <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.hooks: h.remove()</span>
<span id="cb21-28">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> CancelFitException                   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Only run this for a single batch, then cancel</span></span>
<span id="cb21-29">        </span>
<span id="cb21-30">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__repr__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb21-31">        out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"layer"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:&lt;20}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"input"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:&lt;20}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"output"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:&lt;20}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"# params"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:&gt;10}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"# MACs"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:&gt;10}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span></span>
<span id="cb21-32">        total_params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb21-33">        total_mac <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb21-34">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> h <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.hooks:</span>
<span id="cb21-35">            out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>h<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>layer_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:&lt;20}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(h.in_shape)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:&lt;20}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(h.out_shape)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:&lt;20}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>h<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>nparams<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:&gt;10d}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>h<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>mac<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">: 10.1f}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span></span>
<span id="cb21-36">            total_params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> h.nparams</span>
<span id="cb21-37">            total_mac <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> h.mac</span>
<span id="cb21-38">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Total parameters:"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:&lt;20}{</span>total_params<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:&gt;10d}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Total MACs:"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:&lt;20}{</span>total_mac<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:10.1f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> out</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> resnet().<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(init_weights)</span>
<span id="cb22-2"></span>
<span id="cb22-3">modules <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [module <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> module <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> model.modules() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(module, (ResBlock, nn.Linear, torch.nn.BatchNorm1d))]</span>
<span id="cb22-4">monitor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ModelMonitorS(modules)</span>
<span id="cb22-5"></span>
<span id="cb22-6">l <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Learner(model, dls, F.cross_entropy, torch.optim.Adam, lr, [monitor])</span>
<span id="cb22-7">l.fit(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb22-8"></span>
<span id="cb22-9">monitor</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>Total parameters:      1227900 
Total MACs:                8.4 

layer                : input                : output               :   # params :     # MACs
0_ResBlock           : [1, 28, 28]          : [8, 28, 28]          :        696 :        0.5
1_ResBlock           : [8, 28, 28]          : [16, 14, 14]         :       3664 :        1.4
2_ResBlock           : [16, 14, 14]         : [32, 7, 7]           :      14496 :        1.4
3_ResBlock           : [32, 7, 7]           : [64, 4, 4]           :      57664 :        1.5
4_ResBlock           : [64, 4, 4]           : [128, 2, 2]          :     230016 :        1.8
5_ResBlock           : [128, 2, 2]          : [256, 1, 1]          :     918784 :        1.8
6_Linear             : [256]                : [10]                 :       2560 :        0.0
7_BatchNorm1d        : [10]                 : [10]                 :         20 :        0.0</code></pre>
</div>
</div>
<p>From which we see how data flows through the model, where most parameters are and where most compute is being spend. Although the MACs computation isn’t perfectly valid, it gives a good indication. It especially shows:</p>
<ul>
<li>most parameters are in later layers, those are the layers that cost most memory. In fact the final ResBlock uses more memory as all earlier ResBlocks combined!</li>
<li>this is also where most compute is being used, although the differences between earlier layers is much less pronounced then for the memory footprint, the reason for this is that the pixel grid is reduced a lot in those later layers</li>
</ul>
</section>
<section id="augmentation" class="level2">
<h2 class="anchored" data-anchor-id="augmentation">Augmentation</h2>
<p>We have finally come to the point of data augmentation. Once you have a good model, you would ideally train for much longer times. When doing so, the problem that arises is that of overfitting. Which we described before as the tendency of the model to start to memorize our training data and no longer generalize well to the validation set.</p>
<p>To overcome this, data augmentation is used to increase the variety in the training data. For example we can rotate the images, or (horizontally or vertically) flip the image. For such augmentations the label stays the same, since a rotated image of a shoe is still a shoe, but there exist also augmentations that for example mix images, and thus also the labels are altereed. There are great libraries out there such as <a href="https://demo.albumentations.ai/">Albumentations</a> with a huge variety of transformations that can be applied to images, so we won’t be going into the full details. But let’s at least figure out how we can build this into our framework.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1"> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| export</span></span>
<span id="cb24-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> AugmentS(Subscriber):</span>
<span id="cb24-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, transform):</span>
<span id="cb24-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.transform <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transform</span>
<span id="cb24-5">        </span>
<span id="cb24-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> before_batch(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, learn):</span>
<span id="cb24-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> learn.model.training:                    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># augmentations are only applied to the training data</span></span>
<span id="cb24-8">            learn.batch[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.transform(learn.batch[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchvision <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> transforms</span>
<span id="cb25-2"></span>
<span id="cb25-3">augs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Sequential(transforms.RandomHorizontalFlip(), </span>
<span id="cb25-4">                     transforms.RandomCrop(size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">set_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb26-2"></span>
<span id="cb26-3">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> resnet().<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(init_weights)</span>
<span id="cb26-4"></span>
<span id="cb26-5">epochs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span></span>
<span id="cb26-6">lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-2</span></span>
<span id="cb26-7">sch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> partial(torch.optim.lr_scheduler.OneCycleLR, max_lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>lr, epochs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>epochs, steps_per_epoch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>N)</span>
<span id="cb26-8"></span>
<span id="cb26-9">subs_sch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> subs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [SchedulerS(sch), AugmentS(augs)]</span>
<span id="cb26-10"></span>
<span id="cb26-11">l <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Learner(model, dls, F.cross_entropy, torch.optim.Adam, lr, subs_sch)</span>
<span id="cb26-12">l.fit(epochs)</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">
<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">mode</th>
<th data-quarto-table-cell-role="th">loss</th>
<th data-quarto-table-cell-role="th">accuracy</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>train</td>
<td>1.052</td>
<td>0.694</td>
</tr>
<tr class="even">
<td>0</td>
<td>eval</td>
<td>0.757</td>
<td>0.778</td>
</tr>
<tr class="odd">
<td>1</td>
<td>train</td>
<td>0.641</td>
<td>0.837</td>
</tr>
<tr class="even">
<td>1</td>
<td>eval</td>
<td>0.591</td>
<td>0.841</td>
</tr>
<tr class="odd">
<td>2</td>
<td>train</td>
<td>0.492</td>
<td>0.869</td>
</tr>
<tr class="even">
<td>2</td>
<td>eval</td>
<td>0.587</td>
<td>0.838</td>
</tr>
<tr class="odd">
<td>3</td>
<td>train</td>
<td>0.401</td>
<td>0.882</td>
</tr>
<tr class="even">
<td>3</td>
<td>eval</td>
<td>0.407</td>
<td>0.871</td>
</tr>
<tr class="odd">
<td>4</td>
<td>train</td>
<td>0.340</td>
<td>0.893</td>
</tr>
<tr class="even">
<td>4</td>
<td>eval</td>
<td>0.378</td>
<td>0.873</td>
</tr>
<tr class="odd">
<td>5</td>
<td>train</td>
<td>0.305</td>
<td>0.898</td>
</tr>
<tr class="even">
<td>5</td>
<td>eval</td>
<td>0.349</td>
<td>0.877</td>
</tr>
<tr class="odd">
<td>6</td>
<td>train</td>
<td>0.283</td>
<td>0.902</td>
</tr>
<tr class="even">
<td>6</td>
<td>eval</td>
<td>0.310</td>
<td>0.896</td>
</tr>
<tr class="odd">
<td>7</td>
<td>train</td>
<td>0.251</td>
<td>0.912</td>
</tr>
<tr class="even">
<td>7</td>
<td>eval</td>
<td>0.335</td>
<td>0.883</td>
</tr>
<tr class="odd">
<td>8</td>
<td>train</td>
<td>0.239</td>
<td>0.915</td>
</tr>
<tr class="even">
<td>8</td>
<td>eval</td>
<td>0.279</td>
<td>0.901</td>
</tr>
<tr class="odd">
<td>9</td>
<td>train</td>
<td>0.219</td>
<td>0.923</td>
</tr>
<tr class="even">
<td>9</td>
<td>eval</td>
<td>0.253</td>
<td>0.913</td>
</tr>
<tr class="odd">
<td>10</td>
<td>train</td>
<td>0.210</td>
<td>0.926</td>
</tr>
<tr class="even">
<td>10</td>
<td>eval</td>
<td>0.248</td>
<td>0.911</td>
</tr>
<tr class="odd">
<td>11</td>
<td>train</td>
<td>0.192</td>
<td>0.932</td>
</tr>
<tr class="even">
<td>11</td>
<td>eval</td>
<td>0.260</td>
<td>0.909</td>
</tr>
<tr class="odd">
<td>12</td>
<td>train</td>
<td>0.179</td>
<td>0.937</td>
</tr>
<tr class="even">
<td>12</td>
<td>eval</td>
<td>0.214</td>
<td>0.926</td>
</tr>
<tr class="odd">
<td>13</td>
<td>train</td>
<td>0.167</td>
<td>0.940</td>
</tr>
<tr class="even">
<td>13</td>
<td>eval</td>
<td>0.214</td>
<td>0.922</td>
</tr>
<tr class="odd">
<td>14</td>
<td>train</td>
<td>0.157</td>
<td>0.945</td>
</tr>
<tr class="even">
<td>14</td>
<td>eval</td>
<td>0.197</td>
<td>0.933</td>
</tr>
<tr class="odd">
<td>15</td>
<td>train</td>
<td>0.142</td>
<td>0.950</td>
</tr>
<tr class="even">
<td>15</td>
<td>eval</td>
<td>0.190</td>
<td>0.935</td>
</tr>
<tr class="odd">
<td>16</td>
<td>train</td>
<td>0.133</td>
<td>0.954</td>
</tr>
<tr class="even">
<td>16</td>
<td>eval</td>
<td>0.187</td>
<td>0.935</td>
</tr>
<tr class="odd">
<td>17</td>
<td>train</td>
<td>0.123</td>
<td>0.958</td>
</tr>
<tr class="even">
<td>17</td>
<td>eval</td>
<td>0.186</td>
<td>0.937</td>
</tr>
<tr class="odd">
<td>18</td>
<td>train</td>
<td>0.120</td>
<td>0.959</td>
</tr>
<tr class="even">
<td>18</td>
<td>eval</td>
<td>0.187</td>
<td>0.938</td>
</tr>
<tr class="odd">
<td>19</td>
<td>train</td>
<td>0.117</td>
<td>0.960</td>
</tr>
<tr class="even">
<td>19</td>
<td>eval</td>
<td>0.185</td>
<td>0.939</td>
</tr>
</tbody>
</table>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://lucasvw.github.io/posts/12_nntrain_accelerations/index_files/figure-html/cell-25-output-3.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="final-remarks" class="level2">
<h2 class="anchored" data-anchor-id="final-remarks">Final Remarks</h2>
<p>And that’s it. We have created a model that is performing with close to 94% accuracy on the fashion-mnist dataset, according to <a href="https://paperswithcode.com/sota/image-classification-on-fashion-mnist">papers with code</a>, that puts us in the top 10 of papers that are written about this dataset, and we did so with just 20 epochs of training and limitted data augmentation.</p>
<p>In the previous posts in this series, we have build up a small library <a href="https://lucasvw.github.io/nntrain/"><code>nntrain</code></a> in which we have build more or less everything from scratch, from data loading, training loop, activation tracking, initialization, convolutions, optimizers, schedulers and finally ResNets and data augmentation. We understand in detail how it all works, and it’s fairly straight forward to extend the framework to different kind of Machine Learning challenges.</p>
<p>I can’t thank Jeremy Howard and the people from FastAI enough for all the wonderful things they are doing for the machine learning community, it truly is spectacular and inspiring 🤗. To close off, I would like to share a small snippet from the last “base” lecture in which Jeremy Howard speaks some words about this himself and reinforces the idea that nothing in machine learning is magic, that everything can be understood with common sense and be build from scratch with enough perseverance and tenacity.</p>
<div class="quarto-video ratio ratio-16x9"><iframe data-external="1" src="https://www.youtube.com/embed/nlVOG2Nzc3k?si=QAzDjVCkOO5CM5GD?&amp;start=7260&amp;end=7335" title="" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></div>


</section>

 ]]></description>
  <category>code</category>
  <category>neural network</category>
  <category>deep learning</category>
  <guid>https://lucasvw.github.io/posts/12_nntrain_accelerations/index.html</guid>
  <pubDate>Mon, 28 Aug 2023 00:00:00 GMT</pubDate>
  <media:content url="https://lucasvw.github.io/posts/12_nntrain_accelerations/loss_surface.png" medium="image" type="image/png" height="105" width="144"/>
</item>
<item>
  <title>nntrain (3/n): Activations, Initialization and Normalization</title>
  <dc:creator>Lucas van Walstijn</dc:creator>
  <link>https://lucasvw.github.io/posts/11_nntrain_activations/index.html</link>
  <description><![CDATA[ 



<p>In this series, I want to discuss the creation of a small PyTorch based library for training neural networks: <code>nntrain</code>. It’s based off the excellent <a href="https://course.fast.ai/">part 2</a> of Practical Deep Learning for Coders by Jeremy Howard, in which from lessons 13 to 18 (roughly) the development of the <code>miniai</code> library is discussed.</p>
<p>We’ll try to build everything as much as possible from scratch to understand how things work. Once the main functionality of components is implemented and verified, we can switch over to PyTorch’s version. This is similar to how things are done in the course. However, this is not just a “copy / paste” of the course: on many occasions I take a different route, and most of the code is my own. That is not to say that all of this is meant to be extremely innovative, instead I had the following goals:</p>
<ul>
<li>Deeply understand the training of neural networks with a focus on PyTorch</li>
<li>Try to create an even better narrative then what’s presented in FastAI 🙉🤷‍♂️🙈</li>
<li>Get hands-on experience with creating a library with <a href="https://nbdev.fast.ai/"><code>nb_dev</code></a></li>
</ul>
<p><code>nb_dev</code> is another great project from the fastai community, which allows python libraries to be written in jupyter notebooks. This may sound a bit weird and controversial, but it has the advantage that we can create the source code for our library in the very same environment in which we want to experiment and interact with our methods, objects and structure <strong>while we are building the library</strong>. For more details on why this is a good idea and other nice features of <code>nb_dev</code>, see <a href="https://www.fast.ai/posts/2022-07-28-nbdev2.html">here</a>.</p>
<p>So without further ado, let’s start with where we left off in the previous <a href="https://lucasvw.github.io/posts/10_nntrain_learner/">post</a>:</p>
<section id="end-of-last-post" class="level2">
<h2 class="anchored" data-anchor-id="end-of-last-post">End of last post:</h2>
<p>In the last two posts we build up the <code>learner</code> and <code>dataloader</code> module. In this post, we are going to use everything we have build so far to build and train a new model. From the naive MLP model we have been using so far, we will switch to a convolutional neural network (CNN). We will investigate performance and go into the fine print of making sure the networks trains well. We will do this by looking at the activations throughout the network.</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> datasets <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> load_dataset,load_dataset_builder</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> nntrain.dataloaders <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> DataLoaders, hf_ds_collate_fn</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> nntrain.learner <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span></code></pre></div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| export</span></span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torchvision.transforms.functional <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> TF</span>
<span id="cb2-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb2-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> nn</span>
<span id="cb2-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn.functional <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> F</span>
<span id="cb2-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> operator <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> attrgetter</span>
<span id="cb2-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> functools <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> partial</span>
<span id="cb2-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> fastcore.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> fc</span>
<span id="cb2-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> math</span>
<span id="cb2-10"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torcheval.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> tem</span>
<span id="cb2-11"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb2-12"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random</span>
<span id="cb2-13"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span></code></pre></div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| export</span></span>
<span id="cb3-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> set_seed(seed, deterministic<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>):</span>
<span id="cb3-3">    torch.use_deterministic_algorithms(deterministic)</span>
<span id="cb3-4">    torch.manual_seed(seed)</span>
<span id="cb3-5">    random.seed(seed)</span>
<span id="cb3-6">    np.random.seed(seed)</span></code></pre></div>
</div>
<p>Since a CNN operates on a pixel grid instead of a flat array of pixel values, we have to load the data differently. For this we can use the <code>Dataloaders</code> module we have created in an earlier <a href="https://lucasvw.github.io/posts/09_nntrain_ds/">post</a>. By using the <code>hf_ds_collate_fn</code> with <code>flatten=False</code>, we keep the pixel grid and end up with data have a shape of <code>[batch, channels, height, width]</code>:</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fashion_mnist"</span></span>
<span id="cb4-2">ds_builder <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> load_dataset_builder(name)</span>
<span id="cb4-3">hf_dd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> load_dataset(name)</span>
<span id="cb4-4"></span>
<span id="cb4-5">bs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1024</span></span>
<span id="cb4-6"></span>
<span id="cb4-7">collate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> partial(hf_ds_collate_fn, flatten<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb4-8"></span>
<span id="cb4-9">dls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataLoaders.from_hf_dd(hf_dd, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>bs, collate_fn<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>collate)</span>
<span id="cb4-10"></span>
<span id="cb4-11">xb, yb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">iter</span>(dls.train))</span>
<span id="cb4-12">xb.shape</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"91533630bd8c4c98a583fd3c148f6728","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"7eb891579f1949ba889d2c12d01886c4","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Downloading and preparing dataset fashion_mnist/fashion_mnist (download: 29.45 MiB, generated: 34.84 MiB, post-processed: Unknown size, total: 64.29 MiB) to /root/.cache/huggingface/datasets/fashion_mnist/fashion_mnist/1.0.0/8d6c32399aa01613d96e2cbc9b13638f359ef62bb33612b077b4c247f6ef99c1...
Dataset fashion_mnist downloaded and prepared to /root/.cache/huggingface/datasets/fashion_mnist/fashion_mnist/1.0.0/8d6c32399aa01613d96e2cbc9b13638f359ef62bb33612b077b4c247f6ef99c1. Subsequent calls will reuse this data.</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"df2d7eaca26342f8b44e6afff4a447a9","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"979c0ffc191845d191ef960420b6d1e2","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"d2b6fefb9f6040c28b04bd55a59748bb","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"ec0c8ff5f05f4df3a3525d08959c6c55","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"759faee53e49494783439727494048a3","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"5b0be72becb84fb88840ff7e5f959605","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"cb8bccab33c542d1b3455544845aa5d0","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<pre><code>torch.Size([1024, 1, 28, 28])</code></pre>
</div>
</div>
</section>
<section id="convolutional-neural-network" class="level2">
<h2 class="anchored" data-anchor-id="convolutional-neural-network">Convolutional Neural Network</h2>
<p>Next, let’s create a simple CNN consisting of a couple of convolutions with ReLU activations in between:</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> conv_block(in_c, out_c, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, act<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>):</span>
<span id="cb7-2">    padding <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> kernel_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># don't lose pixels of the edges</span></span>
<span id="cb7-3">    stride <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>                    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># reduce the image size by factor of 2 in x and y directions</span></span>
<span id="cb7-4">    conv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.nn.Conv2d(in_c, out_c, kernel_size, stride, padding)</span>
<span id="cb7-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> act: <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> nn.Sequential(conv, torch.nn.ReLU())</span>
<span id="cb7-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>: <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> conv</span></code></pre></div>
</div>
<p>The model will receive images of shape 28x28 and since we use a stride of 2 in each convolution, the pixel grid will be reduced by a factor of 2 in both the x and y direction (a factor of 4 in total). At the same time we increase the number of filters by a factor of 2 so that the overall data-reduction of a single convolution is roughly a factor of 2.</p>
<p>In the very first convolution we go from 1 input channel to 8 output channels. To do that, we increase the kernel size from 3 to 5. For kernel size 3, we would have 3x3 pixels (x 1 input channel) that would map to single position in the output grid. The output grid has 8 channels, so we would go from 9 (3x3x1) to 8 (1x1x8) values. Going from 9 to 8 values is practically no reduction, which doesn’t allow the convolution to learn anything. So instead we take a kernel of size 5 so that we go from 25 (5x5x1) to 9 values and have roughly a 2x reduction.</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> cnn_layers():</span>
<span id="cb8-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> nn.Sequential(                  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># input image grid=28x28</span></span>
<span id="cb8-3">        conv_block(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> , <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>),  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># pixel grid: 14x14</span></span>
<span id="cb8-4">        conv_block(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span> ,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>),                 <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#             7x7</span></span>
<span id="cb8-5">        conv_block(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>),                 <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#             4x4</span></span>
<span id="cb8-6">        conv_block(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>),                 <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#             2x2</span></span>
<span id="cb8-7">        conv_block(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, act<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>),      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#             1x1</span></span>
<span id="cb8-8">        nn.Flatten())</span>
<span id="cb8-9">cnn_layers()</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>Sequential(
  (0): Sequential(
    (0): Conv2d(1, 8, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2))
    (1): ReLU()
  )
  (1): Sequential(
    (0): Conv2d(8, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (1): ReLU()
  )
  (2): Sequential(
    (0): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (1): ReLU()
  )
  (3): Sequential(
    (0): Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (1): ReLU()
  )
  (4): Conv2d(64, 10, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
  (5): Flatten(start_dim=1, end_dim=-1)
)</code></pre>
</div>
</div>
<p>Let’s see how this trains:</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">set_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb10-2"></span>
<span id="cb10-3">subs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [ProgressS(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>),</span>
<span id="cb10-4">        MetricsS(accuracy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>tem.MulticlassAccuracy()),</span>
<span id="cb10-5">        DeviceS(device)]</span>
<span id="cb10-6"></span>
<span id="cb10-7">l <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MomentumLearner(cnn_layers(), dls, F.cross_entropy, torch.optim.SGD, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, subs)</span>
<span id="cb10-8">l.fit(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">
<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">mode</th>
<th data-quarto-table-cell-role="th">loss</th>
<th data-quarto-table-cell-role="th">accuracy</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>train</td>
<td>2.278</td>
<td>0.154</td>
</tr>
<tr class="even">
<td>0</td>
<td>eval</td>
<td>2.302</td>
<td>0.100</td>
</tr>
<tr class="odd">
<td>1</td>
<td>train</td>
<td>2.212</td>
<td>0.192</td>
</tr>
<tr class="even">
<td>1</td>
<td>eval</td>
<td>2.002</td>
<td>0.288</td>
</tr>
<tr class="odd">
<td>2</td>
<td>train</td>
<td>0.958</td>
<td>0.653</td>
</tr>
<tr class="even">
<td>2</td>
<td>eval</td>
<td>0.701</td>
<td>0.740</td>
</tr>
<tr class="odd">
<td>3</td>
<td>train</td>
<td>0.593</td>
<td>0.783</td>
</tr>
<tr class="even">
<td>3</td>
<td>eval</td>
<td>0.574</td>
<td>0.797</td>
</tr>
<tr class="odd">
<td>4</td>
<td>train</td>
<td>0.516</td>
<td>0.816</td>
</tr>
<tr class="even">
<td>4</td>
<td>eval</td>
<td>0.508</td>
<td>0.823</td>
</tr>
</tbody>
</table>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://lucasvw.github.io/posts/11_nntrain_activations/index_files/figure-html/cell-8-output-3.png" class="img-fluid"></p>
</div>
</div>
<p>Although the accuracy is better then what we had with the MLP model, this doesn’t look good. The loss is going down and then spikes up to a large value. This happens twice before finally the loss is going down in a more stable manner. To understand what’s going on, we have to understand what’s happening to the activations throughout the network while we are training.</p>
</section>
<section id="iterative-matrix-multiplications" class="level2">
<h2 class="anchored" data-anchor-id="iterative-matrix-multiplications">Iterative matrix multiplications</h2>
<p>But before we do, it’s important to realize that in the forward pass of neural networks we iteratively multiply the inputs to the model many times with (different) weight matrices. Let’s see how that works by using some artificial data, we generate 1000 random samples of data each with 10 features taken from a unit gaussian (mean=0 and standard deviation=1)</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>) </span>
<span id="cb11-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>mean()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>std()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>x.mean()=-0.003, x.std()=1.000</code></pre>
</div>
</div>
<p>Now let’s iteratively multiply these inputs with a unit gausian weight matrix mapping from 10 input features to 10 output features and record the mean and standard deviation (std) after each iteration. Theoretically the mean of the outputs should remain 0, since <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BE%7D%5BXY%5D%20=%20%5Cmathbb%7BE%7D%5BX%5D%5Cmathbb%7BE%7D%5BY%5D%20=%200%20*%200%20=%200"> if <img src="https://latex.codecogs.com/png.latex?X"> and <img src="https://latex.codecogs.com/png.latex?Y"> are independant. But what happens to the std?</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>):</span>
<span id="cb13-2">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'"x" multiplied </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:02d}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> times: mean=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>mean()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>item()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:10.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">,   std=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>std()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>item()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:15.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb13-3">    w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb13-4">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>w</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>"x" multiplied 00 times: mean=    -0.003,   std=          1.000
"x" multiplied 01 times: mean=     0.013,   std=          3.317
"x" multiplied 02 times: mean=    -0.013,   std=          9.330
"x" multiplied 03 times: mean=    -0.009,   std=         32.389
"x" multiplied 04 times: mean=     0.484,   std=        103.563
"x" multiplied 05 times: mean=     2.104,   std=        299.863
"x" multiplied 06 times: mean=     4.431,   std=        948.056
"x" multiplied 07 times: mean=    -4.135,   std=       3229.121
"x" multiplied 08 times: mean=   -74.124,   std=      11527.234
"x" multiplied 09 times: mean=   -38.169,   std=      35325.461</code></pre>
</div>
</div>
<p>We observe some pretty unstable activations:</p>
<ul>
<li>the standard deviation grows exponentially</li>
<li>initially the mean remains around 0, but eventually it starts to deviate. Probably because the standard deviation is getting larger and larger</li>
</ul>
<p>This is a big problem for the training of neural networks as input data is passing through the network. When activations are ever increasing so are the gradients which causes the updates to the weights to explode.</p>
<p>Let’s try the same with a weight matrix that has a smaller standard deviation:</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>) </span>
<span id="cb15-2"></span>
<span id="cb15-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>):    </span>
<span id="cb15-4">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'"x" multiplied </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:02d}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> times: mean=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>mean()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>item()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:10.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">,   std=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>std()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>item()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:15.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb15-5">    w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># reduce the standard deviation to 0.1</span></span>
<span id="cb15-6">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>w</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>"x" multiplied 00 times: mean=     0.004,   std=          1.001
"x" multiplied 01 times: mean=    -0.000,   std=          0.279
"x" multiplied 02 times: mean=    -0.000,   std=          0.072
"x" multiplied 03 times: mean=    -0.000,   std=          0.027
"x" multiplied 04 times: mean=    -0.000,   std=          0.011
"x" multiplied 05 times: mean=     0.000,   std=          0.003
"x" multiplied 06 times: mean=    -0.000,   std=          0.001
"x" multiplied 07 times: mean=     0.000,   std=          0.000
"x" multiplied 08 times: mean=    -0.000,   std=          0.000
"x" multiplied 09 times: mean=     0.000,   std=          0.000</code></pre>
</div>
</div>
<p>This is not any better, all activations are about the same, and they are all zero! If this happens in a neural network, the network is not learning at all, since the activations and gradients will all be zero.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>You might wonder whether this analysis still holds if we are having a network which consists of convolutional layers. Since the matrix multiplications just shown ofcourse resemble the linear layer style straight up matrix multiplications and not any convolutional arithmetic. And indeed this analysis still holds, because in fact convolutional arithmetic can be rewritten in a form in which we:</p>
<ul>
<li>flatten out the CHW dimensions into a flat array</li>
<li>multiply with a weight matrix constructed out of the weights in the kernels, configured in a special way</li>
</ul>
<p>And thus resembles a special form of linear layer matrix multiplications. See for example <a href="https://stackoverflow.com/a/44039201">here</a></p>
</div>
</div>
</section>
<section id="activations" class="level2">
<h2 class="anchored" data-anchor-id="activations">Activations</h2>
<p>From the above it follows that it’s important to keep track of the activations as data flows through the network. Let’s try to build this into our framework.</p>
<p>To track the activations we can make use of PyTorch hooks: a function that you can attach to any <code>nn.Module</code> and which will be called after the module is being called either during the forward (<code>register_forward_hook()</code>) or backward pass (<code>register_backward_hook()</code>). Let’s create a small <code>Hook</code> class that wraps this logic and which can remove the hook after we are done with it. We will also store the tracked metrics as attributes on this class.</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| export</span></span>
<span id="cb17-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Hook():</span>
<span id="cb17-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, nr, layer, func):</span>
<span id="cb17-4">        wrapped_func <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> partial(func, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># pass the Hook object into the function</span></span>
<span id="cb17-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.hook <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> layer.register_forward_hook(wrapped_func)</span>
<span id="cb17-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.layer_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>nr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>layer<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>__class__<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span></span>
<span id="cb17-7">        </span>
<span id="cb17-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> remove(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb17-9">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.hook.remove()</span></code></pre></div>
</div>
<p>And let’s create a Subscriber, that creates and removes the hooks and keeps track of the statistics:</p>
<ul>
<li>We will keep track of mean and std as the main metrics we have also been looking at above</li>
<li>keep track of the histogram counts for additional visibility into the activations</li>
<li>keep track of the average firing rate per activation over the batch, but more about that later</li>
</ul>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| export</span></span>
<span id="cb18-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> ActivationStatsS(Subscriber):</span>
<span id="cb18-3">    </span>
<span id="cb18-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, modules):</span>
<span id="cb18-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.modules <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> modules</span>
<span id="cb18-6">    </span>
<span id="cb18-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> before_fit(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, learn):</span>
<span id="cb18-8">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.hooks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [Hook(i, module, partial(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.record_stats, learn)) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i, module <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.modules)]</span>
<span id="cb18-9">        </span>
<span id="cb18-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> record_stats(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, learn, hook, layer, inp, outp):</span>
<span id="cb18-11">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> learn.model.training:</span>
<span id="cb18-12">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">hasattr</span>(hook, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'stats'</span>): hook.stats <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ([], [], [], [])</span>
<span id="cb18-13">            acts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> outp.detach().cpu()</span>
<span id="cb18-14">            hook.stats[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].append(acts.mean())              <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># get the means over all activations</span></span>
<span id="cb18-15">            hook.stats[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].append(acts.std())               <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># get the stds over all activations</span></span>
<span id="cb18-16">            hook.stats[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>].append(acts.histc(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>,<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># get the histogram counts with 20 bins (-10,10)</span></span>
<span id="cb18-17">            </span>
<span id="cb18-18">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># computation of the not_firing_rate_per_activation</span></span>
<span id="cb18-19">            N <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> acts.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]                 </span>
<span id="cb18-20">            flat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> acts.view(N, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)                        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># flatten the activations: matrix of [samples, activations]</span></span>
<span id="cb18-21">            nf_rate_p_act <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (flat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> N   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># compute not firing rate per activations (so across the samples)</span></span>
<span id="cb18-22">            hook.stats[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>].append(nf_rate_p_act)   </span>
<span id="cb18-23"></span>
<span id="cb18-24">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> after_fit(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, learn):</span>
<span id="cb18-25">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> h <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.hooks: h.remove()</span></code></pre></div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This code is folded by default to not clutter the blog</span></span>
<span id="cb19-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@fc.patch</span>()</span>
<span id="cb19-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> plot(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>:ActivationStatsS, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>), average_firing_rate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>):</span>
<span id="cb19-4">    plots <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> average_firing_rate <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb19-5">    fig,axs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,plots, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>figsize)</span>
<span id="cb19-6">    legend <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb19-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> h <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.hooks:</span>
<span id="cb19-8">        axs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].plot(h.stats[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb19-9">        axs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mean'</span>)</span>
<span id="cb19-10">        axs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].plot(h.stats[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb19-11">        axs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'std'</span>)</span>
<span id="cb19-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> average_firing_rate:</span>
<span id="cb19-13">            axs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>].plot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>torch.stack(h.stats[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]).T.mean(dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>))</span>
<span id="cb19-14">            axs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>].set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'average firing rate'</span>)</span>
<span id="cb19-15">            axs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>].set_ylim(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb19-16">        legend.append(h.layer_name)</span>
<span id="cb19-17">    plt.legend(legend)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb19-18"></span>
<span id="cb19-19"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@fc.patch</span>()</span>
<span id="cb19-20"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> plot_hist(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>:ActivationStatsS, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, log<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>):</span>
<span id="cb19-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> figsize <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>: figsize <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.hooks))</span>
<span id="cb19-22">    fig,axs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(math.ceil(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.hooks)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>figsize)</span>
<span id="cb19-23">    axs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> axs.flat</span>
<span id="cb19-24">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i, hook <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.hooks):</span>
<span id="cb19-25">        d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.stack(hook.stats[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]).T</span>
<span id="cb19-26">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> log: d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> d.log1p()</span>
<span id="cb19-27">        axs[i].imshow(d, cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Blues'</span>, origin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lower'</span>, aspect<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'auto'</span>)</span>
<span id="cb19-28">        axs[i].set_title(hook.layer_name)</span>
<span id="cb19-29">        axs[i].set_yticks(np.arange(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), np.arange(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb19-30"></span>
<span id="cb19-31"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@fc.patch</span>()</span>
<span id="cb19-32"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> plot_dead(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>:ActivationStatsS, binary<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb19-33">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> figsize <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>: figsize <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.hooks))</span>
<span id="cb19-34">    fig,axs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(math.ceil(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.hooks)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>figsize)</span>
<span id="cb19-35">    axs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> axs.flat</span>
<span id="cb19-36">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i, hook <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.hooks):</span>
<span id="cb19-37">        d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.stack(hook.stats[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]).T</span>
<span id="cb19-38">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> binary: d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span></span>
<span id="cb19-39">        axs[i].imshow(d, cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Greys'</span>, origin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lower'</span>, aspect<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'auto'</span>)</span>
<span id="cb19-40">        axs[i].set_title(hook.layer_name)</span></code></pre></div>
</details>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">set_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb20-2"></span>
<span id="cb20-3">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cnn_layers()</span>
<span id="cb20-4"></span>
<span id="cb20-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># show activation stats on all ReLU layers</span></span>
<span id="cb20-6">modules <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [module <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> module <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> model.modules() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(module, nn.ReLU)]</span>
<span id="cb20-7">act_stats <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ActivationStatsS(modules)</span>
<span id="cb20-8"></span>
<span id="cb20-9">subs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [act_stats,</span>
<span id="cb20-10">        DeviceS(device)]</span>
<span id="cb20-11"></span>
<span id="cb20-12">l <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MomentumLearner(model, dls, F.cross_entropy, torch.optim.SGD, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, subs)</span>
<span id="cb20-13">l.fit(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
</div>
<p>Let’s have a look at the mean and std’s of the layers as we progressively train the model. On the horizontal axis the number of batches are displayed and the coloured lines depict the mean and std respectively of the activations in the layers we are tracking (all the ReLU layers in our model):</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">act_stats.plot()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://lucasvw.github.io/posts/11_nntrain_activations/index_files/figure-html/cell-16-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>These plots show a similar problem to what we saw in the loss plots: two large spikes during training. In the beginning the means are nice and small (around 0), but the std’s are way too small (also around 0). There is thus very little variation in our activations. The std then increases exponentially (<em>exactly as we have seen in the iterative matrix multiplication example above!</em>) and crashes back to zero. This patterns repeats once again, and then finally the std’s stabilize around a value somewhat in the range of 1.</p>
<p>Let’s also have a look at the histogram plots, these plots show a single histogram <strong>vertically</strong>. On the horizontal axis we have again number of batches. Vertically we display a histogram as a heatmap (to help with the colorscale, we actually display the log of the histogram counts): high counts in a bin correspond to a dark blue color. The histogram records values on the vertical axis from -10 to 10. Since we are tracking the stats of ReLU layers there are no counts below zero.</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">act_stats.plot_hist()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://lucasvw.github.io/posts/11_nntrain_activations/index_files/figure-html/cell-17-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>Finally, we can also have a look at the percentage of “dead activations” of our ReLU neurons. Remember that a ReLU neuron passes the data directly through if the data is larger than 0, and outputs 0 whenever the data is below 0. Whenever the data is clipped at zero, it’s gradient will also be zero (since the derivative of a horizontal line is zero). For backpropagation this means that all the upstream gradient components that flow through this neuron will all be zero, which translates to no updates.</p>
<p>In principle it’s not a problem when for some samples the ReLU output is zero, this is actually totally normal and part of what the ReLY should do. Wowever when this happens for all batches in a the (training) epoch, we have a neuron which never activates for any of our data-points, and thus never passes any gradient to upstream components. This is what Andrej Karpathy calls a “dead neuron”, and signals some kind of “permanent brain damage of a neural net”.</p>
<p>We are tracking this by <strong>computing the “none-firing-rate” per ReLU activation</strong> over the batch: if none of the samples in a batch have a positive ReLU output we record a value of 1.0, if for 50% of the samples the ReLU output is positive we record a value of 0.5.</p>
<p>With the following plots, we display those neurons that don’t fire a single time in a minibatch (black) vs those neurons that fire at least for one sample in the batch (white). Horizontally the batches, vertically the activations per layer (CxHxW)</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">act_stats.plot_dead(binary<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://lucasvw.github.io/posts/11_nntrain_activations/index_files/figure-html/cell-18-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>As expected, we are seeing a very large number of black clusters. Especially starting from the two spikes we identified above, we see many neurons being totally thrown of and never recover anymore from it. This is a sign of severe training problems.</p>
</section>
<section id="initialization" class="level2">
<h2 class="anchored" data-anchor-id="initialization">Initialization</h2>
<p>We have seen the importance of keeping the activations stable throughout training, and we have seen how we can monitor these activations.</p>
<p>A first effort at stabilizing the activations, is by taking care of the initialization of the network, which is the process of setting the weights <em>before</em> they are trained. Above we showed that if the std of the weights is too large, our activations explode over time and if the std is too small the activations vanish. Can we set the std to a value that is just right, and makes sure the std of the activations stays roughly 1?</p>
<p>With Xavier initialization, the weight matrices are initialized in such a way that activations taken from a unit gaussian don’t explode or vanish as we have seen above. It turns out, that we have to scale the standard deviation by <img src="https://latex.codecogs.com/png.latex?1/%5Csqrt%7Bn_%7Bin%7D%7D"></p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>) </span>
<span id="cb24-2"></span>
<span id="cb24-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># reduce the standard deviation by a factor of 1/sqrt(10)</span></span>
<span id="cb24-4">w3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>math.sqrt(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))</span>
<span id="cb24-5"></span>
<span id="cb24-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>):</span>
<span id="cb24-7">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>w3</span>
<span id="cb24-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'"x" multiplied </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:02d}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> times: mean=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>mean()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>item()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:10.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">,   std=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>std()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>item()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:15.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>"x" multiplied 09 times: mean=    -0.002,   std=          0.882</code></pre>
</div>
</div>
<p>However, this doesn’t cover the full story. During training of a neural network we also have <em>activation functions</em> sitting in between our matrix mulitplies. And activations typically squash the activations coming out of the (linear, convolutional..) layer. See for example what happens to our activations, after multiplying with Xavier initialized weights and adding a ReLU non-linearity:</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>) </span>
<span id="cb26-2"></span>
<span id="cb26-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># reduce the standard deviation by a factor of 1/sqrt(10)</span></span>
<span id="cb26-4">w4 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>math.sqrt(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))</span>
<span id="cb26-5"></span>
<span id="cb26-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>):</span>
<span id="cb26-7">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>w3).relu()</span>
<span id="cb26-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'"x" multiplied </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:02d}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> times: mean=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>mean()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>item()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:10.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">,   std=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>std()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>item()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:15.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>"x" multiplied 09 times: mean=     0.004,   std=          0.009</code></pre>
</div>
</div>
<p>And as expected, everyhing has imploded to zero. It turns out that we can correct for this squashing by adding a gain. This is called Kaiming initialization. For example the gain for ReLU is <img src="https://latex.codecogs.com/png.latex?%5Csqrt%7B2%7D">:</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb28-2"></span>
<span id="cb28-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># add a gain of sqrt(2)</span></span>
<span id="cb28-4">w4 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> math.sqrt(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb28-5"></span>
<span id="cb28-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>):</span>
<span id="cb28-7">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.nn.functional.relu((x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>w4))</span>
<span id="cb28-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'"x" multiplied </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:02d}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> times: mean=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>mean()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>item()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:10.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">,   std=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>std()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>item()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:15.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>"x" multiplied 09 times: mean=     0.332,   std=          0.688</code></pre>
</div>
</div>
<p>So let’s apply Kaiming initialization to our model, and see how it performs:</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1"> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| export</span></span>
<span id="cb30-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> init_weights(m):</span>
<span id="cb30-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(m, nn.Conv2d): torch.nn.init.kaiming_normal_(m.weight)</span></code></pre></div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1">set_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb31-2"></span>
<span id="cb31-3">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cnn_layers().<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(init_weights)</span>
<span id="cb31-4"></span>
<span id="cb31-5">modules <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [module <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> module <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> model.modules() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(module, nn.ReLU)]</span>
<span id="cb31-6">act_stats <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ActivationStatsS(modules)</span>
<span id="cb31-7"></span>
<span id="cb31-8">subs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [act_stats,</span>
<span id="cb31-9">        ProgressS(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>),</span>
<span id="cb31-10">        MetricsS(accuracy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>tem.MulticlassAccuracy()),</span>
<span id="cb31-11">        DeviceS(device)]</span>
<span id="cb31-12"></span>
<span id="cb31-13">l <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MomentumLearner(model, dls, F.cross_entropy, torch.optim.SGD, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, subs)</span>
<span id="cb31-14">l.fit(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">
<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">mode</th>
<th data-quarto-table-cell-role="th">loss</th>
<th data-quarto-table-cell-role="th">accuracy</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>train</td>
<td>1.400</td>
<td>0.563</td>
</tr>
<tr class="even">
<td>0</td>
<td>eval</td>
<td>0.622</td>
<td>0.768</td>
</tr>
<tr class="odd">
<td>1</td>
<td>train</td>
<td>0.507</td>
<td>0.815</td>
</tr>
<tr class="even">
<td>1</td>
<td>eval</td>
<td>0.457</td>
<td>0.834</td>
</tr>
<tr class="odd">
<td>2</td>
<td>train</td>
<td>0.413</td>
<td>0.851</td>
</tr>
<tr class="even">
<td>2</td>
<td>eval</td>
<td>0.426</td>
<td>0.845</td>
</tr>
<tr class="odd">
<td>3</td>
<td>train</td>
<td>0.376</td>
<td>0.864</td>
</tr>
<tr class="even">
<td>3</td>
<td>eval</td>
<td>0.389</td>
<td>0.861</td>
</tr>
<tr class="odd">
<td>4</td>
<td>train</td>
<td>0.353</td>
<td>0.872</td>
</tr>
<tr class="even">
<td>4</td>
<td>eval</td>
<td>0.379</td>
<td>0.863</td>
</tr>
</tbody>
</table>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://lucasvw.github.io/posts/11_nntrain_activations/index_files/figure-html/cell-23-output-3.png" class="img-fluid"></p>
</div>
</div>
<p>Propper initialization increases the performance from 82% to around 87%, also the loss graph looks a bit better. Let’s have a look at our activation plots:</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1">act_stats.plot()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://lucasvw.github.io/posts/11_nntrain_activations/index_files/figure-html/cell-24-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1">act_stats.plot_hist()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://lucasvw.github.io/posts/11_nntrain_activations/index_files/figure-html/cell-25-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1">act_stats.plot_dead(binary<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://lucasvw.github.io/posts/11_nntrain_activations/index_files/figure-html/cell-26-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>A lot better indeed, but we still see spikes and “brain damage” occuring after the spikes.</p>
</section>
<section id="normalisation" class="level2">
<h2 class="anchored" data-anchor-id="normalisation">Normalisation</h2>
<p>Besides initializing the weight matrices properly, we can also normalize the data itself. Since the batch size is quite large (1024) let’s do so by taking the statistics of the first batch:</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1">xb_mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> xb.mean()</span>
<span id="cb35-2">xb_std <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> xb.std()</span></code></pre></div>
</div>
<p>Create a small Subscriber that normalizes our inputs before a batch:</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1"> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| export</span></span>
<span id="cb36-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> NormalizationS(Subscriber):</span>
<span id="cb36-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, mean, std):</span>
<span id="cb36-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mean</span>
<span id="cb36-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.std <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> std</span>
<span id="cb36-6">        </span>
<span id="cb36-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> before_batch(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, learn):</span>
<span id="cb36-8">        learn.batch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [(learn.batch[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.mean) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.std, learn.batch[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]</span></code></pre></div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1">set_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb37-2"></span>
<span id="cb37-3">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cnn_layers().<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(init_weights)</span>
<span id="cb37-4"></span>
<span id="cb37-5">modules <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [module <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> module <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> model.modules() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(module, nn.ReLU)]</span>
<span id="cb37-6">act_stats <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ActivationStatsS(modules)</span>
<span id="cb37-7"></span>
<span id="cb37-8">norm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> NormalizationS(xb_mean, xb_std)</span>
<span id="cb37-9"></span>
<span id="cb37-10">subs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [norm, </span>
<span id="cb37-11">        act_stats,</span>
<span id="cb37-12">        ProgressS(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>),</span>
<span id="cb37-13">        MetricsS(accuracy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>tem.MulticlassAccuracy()),</span>
<span id="cb37-14">        DeviceS(device)]</span>
<span id="cb37-15"></span>
<span id="cb37-16">l <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MomentumLearner(model, dls, F.cross_entropy, torch.optim.SGD, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, subs)</span>
<span id="cb37-17">l.fit(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">
<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">mode</th>
<th data-quarto-table-cell-role="th">loss</th>
<th data-quarto-table-cell-role="th">accuracy</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>train</td>
<td>0.905</td>
<td>0.692</td>
</tr>
<tr class="even">
<td>0</td>
<td>eval</td>
<td>0.507</td>
<td>0.813</td>
</tr>
<tr class="odd">
<td>1</td>
<td>train</td>
<td>0.429</td>
<td>0.844</td>
</tr>
<tr class="even">
<td>1</td>
<td>eval</td>
<td>0.407</td>
<td>0.852</td>
</tr>
<tr class="odd">
<td>2</td>
<td>train</td>
<td>0.377</td>
<td>0.863</td>
</tr>
<tr class="even">
<td>2</td>
<td>eval</td>
<td>0.391</td>
<td>0.860</td>
</tr>
<tr class="odd">
<td>3</td>
<td>train</td>
<td>0.341</td>
<td>0.876</td>
</tr>
<tr class="even">
<td>3</td>
<td>eval</td>
<td>0.364</td>
<td>0.868</td>
</tr>
<tr class="odd">
<td>4</td>
<td>train</td>
<td>0.325</td>
<td>0.881</td>
</tr>
<tr class="even">
<td>4</td>
<td>eval</td>
<td>0.366</td>
<td>0.866</td>
</tr>
</tbody>
</table>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://lucasvw.github.io/posts/11_nntrain_activations/index_files/figure-html/cell-29-output-3.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1">act_stats.plot()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://lucasvw.github.io/posts/11_nntrain_activations/index_files/figure-html/cell-30-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1">act_stats.plot_hist()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://lucasvw.github.io/posts/11_nntrain_activations/index_files/figure-html/cell-31-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1">act_stats.plot_dead(binary<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://lucasvw.github.io/posts/11_nntrain_activations/index_files/figure-html/cell-32-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>These are all good improvements. The histogram plots start to look a lot better and the amount of dead neurons is greatly reduced. We still have problems though in the beginning of training.</p>
</section>
<section id="batch-normalization" class="level2">
<h2 class="anchored" data-anchor-id="batch-normalization">Batch Normalization</h2>
<p>So far we have tried to tackle the problems around activations from two sides: weight initialization and normalization of the input data. These are effective measures, but don’t cover the full problem: the weights are updated during training after which they are no longer normalized. Additionally, after we normalize our data we just “have to send it through the network” and see what happens with the activations.</p>
<p>The idea behind batch normalization is remarkably simple: if we know that we need unit gaussian activations <strong>throughout the network</strong>, let’s just make them unit gaussian🤓. This might sound a bit weird, but in fact the normalization operation is perfectly differentiable, and thus the gradients can be backpropagated through a normalization operation. Batch normalization takes the form of a layer and normalizes each batch during training.</p>
<p>Let’s start with the basic functionality, a layer that normalizes a batch of data. Note that Batchnorm normalizes the batch across the batch, height and width but not across the channels. So when passing RGB images through your network, the mean and std would have 3 values each (for a Batchnorm layer that would act directly upon the inputs)</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> BatchNorm(nn.Module):</span>
<span id="cb41-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb41-3">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb41-4">        </span>
<span id="cb41-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, xb):</span>
<span id="cb41-6">        mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> xb.mean(dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), keepdim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb41-7">        std <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> xb.std(dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), keepdim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb41-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> (xb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> mean) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> std</span></code></pre></div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1">xb.mean(dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)), xb.std(dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>(tensor([0.2859]), tensor([0.3539]))</code></pre>
</div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1">out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BatchNorm().forward(xb)</span>
<span id="cb44-2">out.mean(dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)), out.std(dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>(tensor([8.2565e-08]), tensor([1.]))</code></pre>
</div>
</div>
<p>An interesting and somewhat remarkable consequence of this layer, is that the activations of a single sample in the batch are getting coupled to the activations of the other samples in the batch, since the mean and std of the batch are computed across all the samples. This leads to all sort of strange behavior and after batch normalization other normalization layers have been developed which don’t have this property: such as layer, group or instance normalization. But as it turns out, this coupling also has a regularizing effect. Since the coupling of samples acts somewhat similarly to data augmentation.</p>
<p>Additionally, batchnorm defines two parameters <code>mult</code> and <code>add</code> by which the outputs are multiplied by and added to. These parameters are initialized at 1 and 0, meaning that at the very start of training these layers are in fact normalizing the data. However, they are <em>learnable</em> parameters, so during training these values can be changed if the model sees fit. This means that a Batchnorm layer can in fact do something totally different then normalizing the data!</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> BatchNorm(nn.Module):</span>
<span id="cb46-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, nf):</span>
<span id="cb46-3">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb46-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.mult <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.nn.Parameter(torch.ones(nf, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># also computed per channel</span></span>
<span id="cb46-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.add <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.nn.Parameter(torch.zeros(nf, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># also computed per channel</span></span>
<span id="cb46-6">        </span>
<span id="cb46-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, xb):</span>
<span id="cb46-8">        mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> xb.mean(dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), keepdim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb46-9">        std <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> xb.std(dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), keepdim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb46-10">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.mult <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (xb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> mean) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> std <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.add</span></code></pre></div>
</div>
<p>One problem with this, is that during inference we would like to be able to pass in just a single sample. But because of the batchnorm layer which is expecting a full batch of data, it’s no longer clear how to get sensible predictions out of the model. One way to solve this, is to keep <em>running statistics</em> of the mean and std during training and just use these when performing inference. Let’s add that as well:</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb47-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> BatchNorm(nn.Module):</span>
<span id="cb47-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, nf, mom<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>):</span>
<span id="cb47-3">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb47-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.mom <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mom</span>
<span id="cb47-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.mult <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.nn.Parameter(torch.ones(nf, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb47-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.add <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.nn.Parameter(torch.zeros(nf, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb47-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.register_buffer(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'var'</span>,  torch.ones(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,nf,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># make sure they are stored during export</span></span>
<span id="cb47-8">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.register_buffer(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mean'</span>, torch.zeros(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,nf,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># make sure they are stored during export</span></span>
<span id="cb47-9">        </span>
<span id="cb47-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> update_stats(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, xb):</span>
<span id="cb47-11">        mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> xb.mean(dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), keepdim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb47-12">        var <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> xb.var(dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), keepdim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb47-13">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.mean.lerp_(mean, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.mom)                        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># take a weighted average (in place) between self.mean and mean</span></span>
<span id="cb47-14">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.var.lerp_(var, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.mom)                          <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># dito with variance</span></span>
<span id="cb47-15">        </span>
<span id="cb47-16">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, xb):</span>
<span id="cb47-17">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.training:</span>
<span id="cb47-18">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.no_grad(): <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.update_stats(xb)</span>
<span id="cb47-19">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.mult <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> ((xb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.mean) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.var <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-5</span>).sqrt()) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.add</span></code></pre></div>
</div>
<p>To add this to our model we have to redefine some functions:</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb48-1"> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| export</span></span>
<span id="cb48-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> conv_block(in_c, out_c, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, act<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, norm<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>):</span>
<span id="cb48-3">    padding <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> kernel_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb48-4">    stride <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb48-5">    layers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [torch.nn.Conv2d(in_c, out_c, kernel_size, stride, padding, bias<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> norm)]</span>
<span id="cb48-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> norm: layers.append(torch.nn.BatchNorm2d(out_c))</span>
<span id="cb48-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> act: layers.append(torch.nn.ReLU())</span>
<span id="cb48-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> nn.Sequential(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>layers) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(layers)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> layers[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span></code></pre></div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb49-1"> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| export</span></span>
<span id="cb49-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> cnn_layers(act<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>):</span>
<span id="cb49-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> nn.Sequential(                  </span>
<span id="cb49-4">        conv_block(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> , <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>),</span>
<span id="cb49-5">        conv_block(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span> ,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>),</span>
<span id="cb49-6">        conv_block(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>),</span>
<span id="cb49-7">        conv_block(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>),</span>
<span id="cb49-8">        conv_block(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, norm<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, act<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>),</span>
<span id="cb49-9">        nn.Flatten())</span></code></pre></div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb50-1">set_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb50-2"></span>
<span id="cb50-3">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cnn_layers().<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(init_weights)</span>
<span id="cb50-4"></span>
<span id="cb50-5">modules <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [module <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> module <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> model.modules() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(module, nn.ReLU)]</span>
<span id="cb50-6">act_stats <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ActivationStatsS(modules)</span>
<span id="cb50-7"></span>
<span id="cb50-8">norm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> NormalizationS(xb_mean, xb_std)</span>
<span id="cb50-9"></span>
<span id="cb50-10">subs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [norm, </span>
<span id="cb50-11">        act_stats,</span>
<span id="cb50-12">        ProgressS(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>),</span>
<span id="cb50-13">        MetricsS(accuracy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>tem.MulticlassAccuracy()),</span>
<span id="cb50-14">        DeviceS(device)]</span>
<span id="cb50-15"></span>
<span id="cb50-16">l <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MomentumLearner(model, dls, F.cross_entropy, torch.optim.SGD, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.4</span>, subs)</span>
<span id="cb50-17">l.fit(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">
<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">mode</th>
<th data-quarto-table-cell-role="th">loss</th>
<th data-quarto-table-cell-role="th">accuracy</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>train</td>
<td>0.572</td>
<td>0.795</td>
</tr>
<tr class="even">
<td>0</td>
<td>eval</td>
<td>0.413</td>
<td>0.845</td>
</tr>
<tr class="odd">
<td>1</td>
<td>train</td>
<td>0.339</td>
<td>0.877</td>
</tr>
<tr class="even">
<td>1</td>
<td>eval</td>
<td>0.352</td>
<td>0.871</td>
</tr>
<tr class="odd">
<td>2</td>
<td>train</td>
<td>0.305</td>
<td>0.888</td>
</tr>
<tr class="even">
<td>2</td>
<td>eval</td>
<td>0.345</td>
<td>0.871</td>
</tr>
<tr class="odd">
<td>3</td>
<td>train</td>
<td>0.277</td>
<td>0.898</td>
</tr>
<tr class="even">
<td>3</td>
<td>eval</td>
<td>0.340</td>
<td>0.875</td>
</tr>
<tr class="odd">
<td>4</td>
<td>train</td>
<td>0.262</td>
<td>0.903</td>
</tr>
<tr class="even">
<td>4</td>
<td>eval</td>
<td>0.300</td>
<td>0.890</td>
</tr>
</tbody>
</table>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://lucasvw.github.io/posts/11_nntrain_activations/index_files/figure-html/cell-40-output-3.png" class="img-fluid"></p>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>I must be missing something in the Batchnorm layer defined above, because it doesn’t train as well as the Batchnorm2d layer from PyTorch. Let me know if anybody knows what I’m missing</p>
</div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb51-1">act_stats.plot()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://lucasvw.github.io/posts/11_nntrain_activations/index_files/figure-html/cell-41-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb52-1">act_stats.plot_hist()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://lucasvw.github.io/posts/11_nntrain_activations/index_files/figure-html/cell-42-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb53-1">act_stats.plot_dead(binary<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://lucasvw.github.io/posts/11_nntrain_activations/index_files/figure-html/cell-43-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>And this is all looking very good, no more spikes in the loss, histograms are looking good and no or very little permanently dead neurons.</p>
<p>Let’s have a final look at the “dead plot”. Without the <code>binary=True</code> it displays the average dead rate across the samples in in the minibatch.</p>
<p>Additionally we can plot the average firing rate across all neurons:</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb54-1">act_stats.plot_dead()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://lucasvw.github.io/posts/11_nntrain_activations/index_files/figure-html/cell-44-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb55-1">act_stats.plot(average_firing_rate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://lucasvw.github.io/posts/11_nntrain_activations/index_files/figure-html/cell-45-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>From which we see that on average all ReLU neurons fire for around 50% of the samples in a minibatch. Some fire a bit less (darker) some fire a bit more (brighter), but we have very little neurons that never fire (black).</p>
</section>
<section id="final-remarks" class="level2">
<h2 class="anchored" data-anchor-id="final-remarks">Final remarks</h2>
<p>We have again come a long way, and have seen how we can make sure to train a neural network properly. We have learned to look at activations from many angles, and improved our model up to around 89% accuracy by careful initialization and normalization.</p>


</section>

 ]]></description>
  <category>code</category>
  <category>neural network</category>
  <category>deep learning</category>
  <guid>https://lucasvw.github.io/posts/11_nntrain_activations/index.html</guid>
  <pubDate>Sun, 20 Aug 2023 00:00:00 GMT</pubDate>
  <media:content url="https://lucasvw.github.io/posts/11_nntrain_activations/image.png" medium="image" type="image/png" height="89" width="144"/>
</item>
<item>
  <title>nntrain (2/n): Learner</title>
  <dc:creator>Lucas van Walstijn</dc:creator>
  <link>https://lucasvw.github.io/posts/10_nntrain_learner/index.html</link>
  <description><![CDATA[ 



<p>In this series, I want to discuss the creation of a small PyTorch based library for training neural networks: <code>nntrain</code>. It’s based off the excellent <a href="https://course.fast.ai/">part 2</a> of Practical Deep Learning for Coders by Jeremy Howard, in which from lessons 13 to 18 (roughly) the development of the <code>miniai</code> library is discussed.</p>
<p>We’ll try to build everything as much as possible from scratch to understand how things work. Once the main functionality of components is implemented and verified, we can switch over to PyTorch’s version. This is similar to how things are done in the course. However, this is not just a “copy / paste” of the course: on many occasions I take a different route, and most of the code is my own. That is not to say that all of this is meant to be extremely innovative, instead I had the following goals:</p>
<ul>
<li>Deeply understand the training of neural networks with a focus on PyTorch</li>
<li>Try to create an even better narrative then what’s presented in FastAI 🙉🤷‍♂️🙈</li>
<li>Get hands-on experience with creating a library with <a href="https://nbdev.fast.ai/"><code>nb_dev</code></a></li>
</ul>
<p><code>nb_dev</code> is another great project from the fastai community, which allows python libraries to be written in jupyter notebooks. This may sound a bit weird and controversial, but it has the advantage that we can create the source code for our library in the very same environment in which we want to experiment and interact with our methods, objects and structure <strong>while we are building the library</strong>. For more details on why this is a good idea and other nice features of <code>nb_dev</code>, see <a href="https://www.fast.ai/posts/2022-07-28-nbdev2.html">here</a>.</p>
<p>So without further ado, let’s start with where we left off in the previous <a href="https://lucasvw.github.io/posts/09_nntrain_ds/">post</a>:</p>
<section id="end-of-last-post" class="level2">
<h2 class="anchored" data-anchor-id="end-of-last-post">End of last post:</h2>
<p>We finished the last post with exporting the <code>dataloaders</code> module into the <code>nntrain</code> library, which helps transforming a huggingface dataset dictionary into PyTorch dataloaders, so let’s use <a href="https://lucasvw.github.io/nntrain/dataloaders.html">that</a>:</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> datasets <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> load_dataset,load_dataset_builder</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> nntrain.dataloaders <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> DataLoaders, hf_ds_collate_fn</span></code></pre></div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| export</span></span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torchvision.transforms.functional <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> TF</span>
<span id="cb2-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb2-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> nn</span>
<span id="cb2-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn.functional <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> F</span>
<span id="cb2-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> operator <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> attrgetter</span>
<span id="cb2-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> fastcore.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> fc</span>
<span id="cb2-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> math</span>
<span id="cb2-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastprogress <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> progress_bar,master_bar</span>
<span id="cb2-10"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torcheval.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> tem</span>
<span id="cb2-11"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span></code></pre></div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fashion_mnist"</span></span>
<span id="cb3-2">ds_builder <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> load_dataset_builder(name)</span>
<span id="cb3-3">hf_dd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> load_dataset(name)</span>
<span id="cb3-4"></span>
<span id="cb3-5">bs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1024</span></span>
<span id="cb3-6">dls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataLoaders.from_hf_dd(hf_dd, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>bs)</span>
<span id="cb3-7"></span>
<span id="cb3-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># As a reminder, `DataLoaders` expose a PyTorch train and validation dataloader as `train` and `valid` attributes:</span></span>
<span id="cb3-9"></span>
<span id="cb3-10">dls.train, dls.valid</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Reusing dataset fashion_mnist (/root/.cache/huggingface/datasets/fashion_mnist/fashion_mnist/1.0.0/8d6c32399aa01613d96e2cbc9b13638f359ef62bb33612b077b4c247f6ef99c1)</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"0892e52b68f54dc7b71e21cddf536fdd","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<pre><code>(&lt;torch.utils.data.dataloader.DataLoader&gt;,
 &lt;torch.utils.data.dataloader.DataLoader&gt;)</code></pre>
</div>
</div>
</section>
<section id="learner-class" class="level2">
<h2 class="anchored" data-anchor-id="learner-class">Learner Class</h2>
<p>Let’s continue to formalize our training loop into a <code>Learner</code> class with a <code>fit()</code> method. The training loop created so far looks like this:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> fit(epochs):</span>
<span id="cb6-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> epoch <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(epochs):</span>
<span id="cb6-3">        model.train()                                       </span>
<span id="cb6-4">        n_t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_loss_s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>                              </span>
<span id="cb6-5">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> xb, yb <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> dls.train:</span>
<span id="cb6-6">            preds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(xb)</span>
<span id="cb6-7">            train_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> loss_func(preds, yb)</span>
<span id="cb6-8">            train_loss.backward()</span>
<span id="cb6-9">            </span>
<span id="cb6-10">            n_t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(xb)</span>
<span id="cb6-11">            train_loss_s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> train_loss.item() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(xb)</span>
<span id="cb6-12">            </span>
<span id="cb6-13">            opt.step()</span>
<span id="cb6-14">            opt.zero_grad()</span>
<span id="cb6-15">        </span>
<span id="cb6-16">        model.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">eval</span>()                                        </span>
<span id="cb6-17">        n_v <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> valid_loss_s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> acc_s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>                      </span>
<span id="cb6-18">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> xb, yb <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> dls.valid: </span>
<span id="cb6-19">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.no_grad():                           </span>
<span id="cb6-20">                preds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(xb)</span>
<span id="cb6-21">                valid_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> loss_func(preds, yb)</span>
<span id="cb6-22">                </span>
<span id="cb6-23">                n_v <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(xb)</span>
<span id="cb6-24">                valid_loss_s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> valid_loss.item() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(xb)</span>
<span id="cb6-25">                acc_s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> accuracy(preds, yb) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(xb)</span>
<span id="cb6-26">        </span>
<span id="cb6-27">        train_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_loss_s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> n_t                     </span>
<span id="cb6-28">        valid_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> valid_loss_s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> n_v</span>
<span id="cb6-29">        acc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> acc_s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> n_v</span>
<span id="cb6-30">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>epoch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> | </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>train_loss<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> | </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>valid_loss<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> | </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>acc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div>
<p>Let’s build this class in steps. Initialization is straight forward:</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Learner():</span>
<span id="cb7-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, model, dls, loss_fn, metric_fn, optim_class, lr):</span>
<span id="cb7-3">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model</span>
<span id="cb7-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dls</span>
<span id="cb7-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loss_fn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> loss_fn</span>
<span id="cb7-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.metric_fn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> metric_fn</span>
<span id="cb7-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.optim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> optim_class(model.parameters(), lr)</span></code></pre></div>
</div>
<p>Next, let’s implement the training loop. Instead of writing the full loop in a single <code>fit()</code> method, let’s try to break the training loop down into pieces:</p>
<ul>
<li><code>fit()</code> iterates through the epochs</li>
<li>Per epoch we do a training round through the training data and an evaluation round through the validation set. Both rounds are quite similar, so let’s put this functionality in a separate method <code>one_epoch()</code></li>
<li>In each epoch we iterate through the batches of a dataloader, let’s put this functionality in a method <code>one_batch()</code></li>
</ul>
<p>let’s define the outer most call: <code>fit()</code>. In this method we’ll call <code>one_epoch</code> twice, once for the training and once for the validation. Both passes are fairly similar as can be seen from comparing lines 3-8 with 16-21</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@fc.patch</span></span>
<span id="cb8-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> fit(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>:Learner, epochs):</span>
<span id="cb8-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> epoch <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(epochs):                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># iterate through the epochs</span></span>
<span id="cb8-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.one_epoch(epoch, train<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># one epoch through the training dataloader</span></span>
<span id="cb8-5">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.no_grad():                  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for the validation epoch we don't need grads</span></span>
<span id="cb8-6">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.one_epoch(epoch, train<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># one epoch through the validation dataloader</span></span></code></pre></div>
</div>
<p>Next, let’s implement <code>one_epoch()</code>. To make sure each method does one thing, we factor <code>do_batch()</code> out into it’s own method:</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@fc.patch</span></span>
<span id="cb9-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> one_epoch(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>:Learner, epoch, train):</span>
<span id="cb9-3">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.reset_stats()                         <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># reset the stats at beginning of each epoch</span></span>
<span id="cb9-4">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model.train(train)                    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># put the model either in train or validation mode</span></span>
<span id="cb9-5">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dls.train <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> train <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dls.valid <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># reference to the active dataloader</span></span>
<span id="cb9-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.batch <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dl:                 <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># iterate through the active dataloader</span></span>
<span id="cb9-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.one_batch(train)                  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># do one batch</span></span>
<span id="cb9-8">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.print_stats(epoch, train)             <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print stats at the end of the epoch</span></span></code></pre></div>
</div>
<p>And finally the method responsible for dealing with a single batch of data:</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@fc.patch</span></span>
<span id="cb10-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> one_batch(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>:Learner, train):</span>
<span id="cb10-3">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.xb, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.yb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.batch              <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># self.batch is either a training or validation batch</span></span>
<span id="cb10-4">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.preds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.xb)           <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># forward pass through the model</span></span>
<span id="cb10-5">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loss_fn(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.preds, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.yb)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># loss</span></span>
<span id="cb10-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> train:                                  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># only do a backward and weight update if train</span></span>
<span id="cb10-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loss.backward()</span>
<span id="cb10-8">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.optim.step()</span>
<span id="cb10-9">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.optim.zero_grad()</span>
<span id="cb10-10">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.update_stats()                        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># update stats</span></span></code></pre></div>
</div>
<p>And the methods related to the computation of the statistics:</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@fc.patch</span></span>
<span id="cb11-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> update_stats(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>:Learner):</span>
<span id="cb11-3">    n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.xb)</span>
<span id="cb11-4">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loss_s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loss.item() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> n</span>
<span id="cb11-5">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.metric_s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.metric_fn(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.preds, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.yb).item() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> n</span>
<span id="cb11-6">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.counter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> n</span>
<span id="cb11-7"></span>
<span id="cb11-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@fc.patch</span></span>
<span id="cb11-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> reset_stats(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>:Learner):</span>
<span id="cb11-10">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.counter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb11-11">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loss_s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb11-12">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.metric_s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb11-13"></span>
<span id="cb11-14"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@fc.patch</span></span>
<span id="cb11-15"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> print_stats(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>:Learner, epoch, train):</span>
<span id="cb11-16">    loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loss_s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.counter</span>
<span id="cb11-17">    metric <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.metric_s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.counter</span>
<span id="cb11-18">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>epoch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:02d}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> | </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"train"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> train <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"eval"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:&lt;5}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> | </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>loss<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> | </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>metric<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div>
</div>
<p>Let’s try it out on the data:</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">n_in <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span></span>
<span id="cb12-2">n_h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span></span>
<span id="cb12-3">n_out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb12-4">lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span></span>
<span id="cb12-5"></span>
<span id="cb12-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> accuracy(preds, targs):</span>
<span id="cb12-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> (preds.argmax(dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> targs).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>().mean()</span>
<span id="cb12-8"></span>
<span id="cb12-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> get_model():</span>
<span id="cb12-10">    layers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [nn.Linear(n_in, n_h), nn.ReLU(), nn.Linear(n_h, n_out)]</span>
<span id="cb12-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> nn.Sequential(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>layers)</span>
<span id="cb12-12"></span>
<span id="cb12-13">l <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Learner(get_model(), dls, F.cross_entropy, accuracy, torch.optim.SGD, lr)</span>
<span id="cb12-14"></span>
<span id="cb12-15">l.fit(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>epoch=00 | train | loss=2.202 | metric=0.240
epoch=00 | eval  | loss=2.078 | metric=0.378
epoch=01 | train | loss=1.943 | metric=0.464
epoch=01 | eval  | loss=1.802 | metric=0.538
epoch=02 | train | loss=1.667 | metric=0.578
epoch=02 | eval  | loss=1.543 | metric=0.601
epoch=03 | train | loss=1.435 | metric=0.628
epoch=03 | eval  | loss=1.346 | metric=0.639
epoch=04 | train | loss=1.266 | metric=0.652
epoch=04 | eval  | loss=1.207 | metric=0.651</code></pre>
</div>
</div>
</section>
<section id="callbacks-pubsub-and-event-handlers" class="level2">
<h2 class="anchored" data-anchor-id="callbacks-pubsub-and-event-handlers">Callbacks, pubsub and event handlers</h2>
<p>On the one side we want to keep the <code>Learner</code> and its training loop generic on the other side we need to be able to tweak the dynamics of the training loop depending on the use-case. One way to customize the training loop, without having to re-write the training loop would be to add a publish/subscribe (pubsub) mechanism. In the FastAI course, they are referred to as “callbacks”, and although callbacks, event handlers and pubsub are all related and basically refer to any logic (encapsulated in a function) which we want to specify <em>now</em>, and execute at a later point in time whenever some condition arises. In my vocabulary a callback is a function that is passed to another function, and is executed whenever that other function is finished.</p>
<p>For the purposes of training neural networks we have the following requirements:</p>
<ul>
<li>The Learner framework defines a number of “events” that are published:
<ul>
<li><code>before_fit</code>, <code>after_fit</code></li>
<li><code>before_epoch</code>, <code>after_epoch</code></li>
<li><code>before_batch</code>, <code>after_batch</code></li>
</ul></li>
<li>Subscribers are classes that implement methods (e.g.&nbsp;<code>before_fit()</code>) that will be triggered whenever the associated event is published. They also have an <code>order</code> attribute which determines the order in which they are called in case multiple Subscribers subscribed to the same event.</li>
<li>As an additional feature, subscribers will be able to redirect flow, but we will come back to that later</li>
</ul>
<p>So let’s implement this. First, we will need to store a list of subscribers in the Learner class:</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Learner():</span>
<span id="cb14-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, model, dls, loss_fn, metric_fn, optim_class, lr, subs):</span>
<span id="cb14-3">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model</span>
<span id="cb14-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dls</span>
<span id="cb14-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loss_fn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> loss_fn</span>
<span id="cb14-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.metric_fn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> metric_fn</span>
<span id="cb14-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.optim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> optim(model.parameters(), lr)</span>
<span id="cb14-8">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.subs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> subs</span></code></pre></div>
</div>
<p>Next, let’s define a method for publishing events. The method will go through the registered subscribers and if a method with the name of the event is declared, call that method passing the <code>learner</code> object as an argument:</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@fc.patch</span></span>
<span id="cb15-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> publish(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>:Learner, event):</span>
<span id="cb15-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> sub <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.subs, key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>attrgetter(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'order'</span>)):</span>
<span id="cb15-4">        method <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">getattr</span>(sub, name, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb15-5">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> method <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>: method(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>)</span></code></pre></div>
</div>
<p>With the <code>before_x</code> / <code>after_x</code> events, realize that we have three times the same construct:</p>
<pre><code>publish "before_event" event
do event
publish "after_event" event</code></pre>
<p>With <code>event</code> being either <code>fit</code>, <code>epoch</code> or <code>batch</code>. So instead of adding this construct multiple times in the training loop let’s define a class we can use as a decorater wrapping the <code>do_event</code> logic:</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| export</span></span>
<span id="cb17-2"></span>
<span id="cb17-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> PublishEvents():</span>
<span id="cb17-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, event): </span>
<span id="cb17-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.event <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> event</span>
<span id="cb17-6">    </span>
<span id="cb17-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__call__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, decorated_fn):</span>
<span id="cb17-8">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> decorated_fn_with_publishing(learner, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs):</span>
<span id="cb17-9">            learner.publish(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'before_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>event<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb17-10">            decorated_fn(learner, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs)</span>
<span id="cb17-11">            learner.publish(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'after_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>event<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb17-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> decorated_fn_with_publishing</span></code></pre></div>
</div>
<p>To implement this into the <code>Learner</code> we have to factor out the exact code we want to be executed in between the publishing of the <code>before</code> and <code>after</code>, see the additional <code>_one_epoch()</code> method.</p>
<p>Note that we are taking out the logic concerning the statistics, this will be implemented as a Subscriber as we’ll see.</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Learner():</span>
<span id="cb18-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, model, dls, loss_fn, metric_fn, optim_class, lr, subs):</span>
<span id="cb18-3">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model</span>
<span id="cb18-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dls</span>
<span id="cb18-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loss_fn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> loss_fn</span>
<span id="cb18-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.metric_fn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> metric_fn</span>
<span id="cb18-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.optim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> optim_class(model.parameters(), lr)</span>
<span id="cb18-8">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.subs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> subs</span>
<span id="cb18-9">    </span>
<span id="cb18-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@PublishEvents</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'fit'</span>)</span>
<span id="cb18-11">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> fit(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, epochs):</span>
<span id="cb18-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> epoch <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(epochs):</span>
<span id="cb18-13">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.one_epoch(epoch, train<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb18-14">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb18-15">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.one_epoch(epoch, train<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb18-16"></span>
<span id="cb18-17">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> one_epoch(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, epoch, train):</span>
<span id="cb18-18">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model.train(train)</span>
<span id="cb18-19">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dls.train <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> train <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dls.valid</span>
<span id="cb18-20">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._one_epoch(epoch, train)</span>
<span id="cb18-21">        </span>
<span id="cb18-22">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@PublishEvents</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'epoch'</span>)</span>
<span id="cb18-23">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _one_epoch(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, epoch, train):</span>
<span id="cb18-24">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.batch <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dl:</span>
<span id="cb18-25">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.xb, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.yb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.batch</span>
<span id="cb18-26">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.one_batch(train)</span>
<span id="cb18-27">    </span>
<span id="cb18-28">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@PublishEvents</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'batch'</span>)</span>
<span id="cb18-29">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> one_batch(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, train):</span>
<span id="cb18-30">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.preds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.xb)           </span>
<span id="cb18-31">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loss_fn(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.preds, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.yb)</span>
<span id="cb18-32">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> train:                                  </span>
<span id="cb18-33">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loss.backward()</span>
<span id="cb18-34">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.optim.step()</span>
<span id="cb18-35">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.optim.zero_grad()</span>
<span id="cb18-36">        </span>
<span id="cb18-37">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> publish(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, event):</span>
<span id="cb18-38">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> sub <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.subs, key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>attrgetter(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'order'</span>)):</span>
<span id="cb18-39">            method <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">getattr</span>(sub, event, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb18-40">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> method <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>: method(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>)            </span></code></pre></div>
</div>
<p>Let’s create a dummy subscriber and test it out:</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| export</span></span>
<span id="cb19-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Subscriber():</span>
<span id="cb19-3">    order <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb19-4"></span>
<span id="cb19-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> DummyS(Subscriber):</span>
<span id="cb19-6">    </span>
<span id="cb19-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> before_fit(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, learn):</span>
<span id="cb19-8">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'before fit👋'</span>)</span>
<span id="cb19-9">        </span>
<span id="cb19-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> after_fit(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, learn):</span>
<span id="cb19-11">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'after fit👋'</span>)</span>
<span id="cb19-12">        </span>
<span id="cb19-13">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> before_epoch(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, learn):</span>
<span id="cb19-14">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'before epoch 💥'</span>)</span>
<span id="cb19-15">        </span>
<span id="cb19-16">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> after_epoch(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, learn):</span>
<span id="cb19-17">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'after epoch 💥'</span>)</span></code></pre></div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">l <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Learner(get_model(), dls, F.cross_entropy, accuracy, torch.optim.SGD, lr, [DummyS()])</span>
<span id="cb20-2">l.fit(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>before fit👋
before epoch 💥
after epoch 💥
before epoch 💥
after epoch 💥
after fit👋</code></pre>
</div>
</div>
</section>
<section id="subscribers-can-cancel-execution" class="level2">
<h2 class="anchored" data-anchor-id="subscribers-can-cancel-execution">Subscribers can cancel execution</h2>
<p>Now let’s add the last component of our pubsub system: subscribers should be able to cancel processing. For example, a a subscriber that would implement Early Stopping, will have to be able to cancel any further epochs when the validation loss starts increasing. One way to implement this, is with the help of <code>Exceptions</code> and <code>try</code> / <code>except</code> blocks:</p>
<p>It’s actually very easy to implement this logic, we only need to define custom <code>Exceptions</code>, and update the <code>PublishEvents</code> class to catch the exceptions that are thrown in any subscriber:</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> CancelFitException(<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">Exception</span>): <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">pass</span></span>
<span id="cb22-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> CancelEpochException(<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">Exception</span>): <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">pass</span></span>
<span id="cb22-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> CancelBatchException(<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">Exception</span>): <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">pass</span></span>
<span id="cb22-4"></span>
<span id="cb22-5"></span>
<span id="cb22-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> PublishEvents():</span>
<span id="cb22-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, name): </span>
<span id="cb22-8">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> name</span>
<span id="cb22-9">    </span>
<span id="cb22-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__call__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, decorated_fn):</span>
<span id="cb22-11">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> decorated_fn_with_publishing(learner, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs):</span>
<span id="cb22-12">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">try</span>:</span>
<span id="cb22-13">                learner.publish(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'before_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb22-14">                decorated_fn(learner, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs)</span>
<span id="cb22-15">                learner.publish(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'after_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb22-16">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">except</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">globals</span>()[<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Cancel</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>title()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">Exception'</span>]: <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">pass</span></span>
<span id="cb22-17">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> decorated_fn_with_publishing</span></code></pre></div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> DummyS(Subscriber):</span>
<span id="cb23-2">    </span>
<span id="cb23-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> before_fit(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, learn): <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'before fit👋'</span>)</span>
<span id="cb23-4">        </span>
<span id="cb23-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> before_epoch(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, learn): <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> CancelFitException</span>
<span id="cb23-6">    </span>
<span id="cb23-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> after_fit(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, learn): <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'after fit 👋'</span>)</span></code></pre></div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">l <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Learner(get_model(), dls, F.cross_entropy, accuracy, torch.optim.SGD, lr, [DummyS()])</span>
<span id="cb24-2">l.fit(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>before fit👋</code></pre>
</div>
</div>
<p>And indeed, the <code>after_fit</code> event is never called, since the fit was cancelled during <code>before_epoch</code> by the dummy subscriber</p>
</section>
<section id="final-version-of-learner" class="level2">
<h2 class="anchored" data-anchor-id="final-version-of-learner">Final version of <code>Learner</code></h2>
<p>We are going to make some final changes to the Learner class:</p>
<ul>
<li>factor out the computation of the following logic. This is practical to create subclasses of <code>Learner</code> with custom behavior:
<ul>
<li>prediction: <code>self.predict()</code></li>
<li>loss: <code>self.get_loss()</code></li>
<li>backward pass: <code>self.backward()</code></li>
<li>stepping of weights: <code>self.step()</code></li>
<li>zeroing of gradients: <code>self.zero_grad()</code></li>
</ul></li>
<li>add a Subscriber argument to <code>fit</code>, these subs will only be added for the duration of the fit, and afterwards removed</li>
<li>add a couple of additional events (<code>after_predict</code>, <code>after_loss</code>, <code>after_backward</code> and <code>after_step</code>) to which subscribers can listen</li>
</ul>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| export</span></span>
<span id="cb26-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Learner():</span>
<span id="cb26-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, model, dls, loss_fn, optim_class, lr, subs):</span>
<span id="cb26-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model</span>
<span id="cb26-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dls</span>
<span id="cb26-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loss_fn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> loss_fn</span>
<span id="cb26-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.optim_class <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> optim_class</span>
<span id="cb26-8">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lr</span>
<span id="cb26-9">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.subs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> subs</span>
<span id="cb26-10">    </span>
<span id="cb26-11">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> fit(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, epochs, train<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, valid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, subs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[], lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb26-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> sub <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> subs: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.subs.append(sub)</span>
<span id="cb26-13">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.n_epochs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> epochs</span>
<span id="cb26-14">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.epochs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.n_epochs)</span>
<span id="cb26-15">        lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lr <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> lr <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> lr</span>
<span id="cb26-16">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.opt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.optim_class(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model.parameters(), lr)</span>
<span id="cb26-17">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">try</span>:</span>
<span id="cb26-18">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._fit(train, valid)</span>
<span id="cb26-19">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">finally</span>:</span>
<span id="cb26-20">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> sub <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> subs: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.subs.remove(sub)</span>
<span id="cb26-21">                    </span>
<span id="cb26-22">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@PublishEvents</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'fit'</span>)</span>
<span id="cb26-23">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _fit(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, train, valid):</span>
<span id="cb26-24">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.epoch <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.epochs:</span>
<span id="cb26-25">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> train: </span>
<span id="cb26-26">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.one_epoch(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb26-27">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> valid:</span>
<span id="cb26-28">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb26-29">                    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.one_epoch(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb26-30">        </span>
<span id="cb26-31">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> one_epoch(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, train):</span>
<span id="cb26-32">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model.train(train)</span>
<span id="cb26-33">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dls.train <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> train <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dls.valid</span>
<span id="cb26-34">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._one_epoch()</span>
<span id="cb26-35">        </span>
<span id="cb26-36">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@PublishEvents</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'epoch'</span>)</span>
<span id="cb26-37">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _one_epoch(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb26-38">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.batch <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dl: </span>
<span id="cb26-39">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.one_batch()</span>
<span id="cb26-40">    </span>
<span id="cb26-41">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@PublishEvents</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'batch'</span>)</span>
<span id="cb26-42">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> one_batch(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb26-43">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.predict()</span>
<span id="cb26-44">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.publish(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'after_predict'</span>)</span>
<span id="cb26-45">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.get_loss()</span>
<span id="cb26-46">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.publish(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'after_loss'</span>)</span>
<span id="cb26-47">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model.training:</span>
<span id="cb26-48">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.backward()</span>
<span id="cb26-49">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.publish(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'after_backward'</span>)</span>
<span id="cb26-50">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.step()</span>
<span id="cb26-51">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.publish(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'after_step'</span>)</span>
<span id="cb26-52">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.zero_grad()</span>
<span id="cb26-53">        </span>
<span id="cb26-54">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> publish(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, event):</span>
<span id="cb26-55">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> sub <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.subs, key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>attrgetter(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'order'</span>)):</span>
<span id="cb26-56">            method <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">getattr</span>(sub, event, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb26-57">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> method <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>: method(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>)</span>
<span id="cb26-58">            </span>
<span id="cb26-59">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> predict(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>): </span>
<span id="cb26-60">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.preds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.batch[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb26-61">        </span>
<span id="cb26-62">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> get_loss(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>): </span>
<span id="cb26-63">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loss_fn(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.preds, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.batch[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb26-64">        </span>
<span id="cb26-65">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> backward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>): <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loss.backward()</span>
<span id="cb26-66">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> step(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>): <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.opt.step()</span>
<span id="cb26-67">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> zero_grad(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>): <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.opt.zero_grad()</span></code></pre></div>
</div>
</section>
<section id="metrics-subscriber" class="level2">
<h2 class="anchored" data-anchor-id="metrics-subscriber">Metrics Subscriber</h2>
<p>Since we took out the metrics, let’s create a subscriber that adds that. We want the subscriber to be generic, to it should be able to accept one or multiple metrics. Let’s make sure that it can accept the metrics from the <code>torcheval</code> library:</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">metric <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tem.Mean()</span>
<span id="cb27-2"></span>
<span id="cb27-3">metric.update(torch.tensor([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># update() adds data</span></span>
<span id="cb27-4">metric.update(torch.tensor([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>]))  </span>
<span id="cb27-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(metric.compute())               <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># compute() computes the metric</span></span>
<span id="cb27-6"></span>
<span id="cb27-7">metric.reset()                        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># remove all data</span></span>
<span id="cb27-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(metric.compute())</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>WARNING:root:No calls to update() have been made - returning 0.0</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>tensor(3.5000, dtype=torch.float64)
tensor(0., dtype=torch.float64)</code></pre>
</div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1"> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#|export</span></span>
<span id="cb30-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> MetricsS(Subscriber):</span>
<span id="cb30-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>metrics):</span>
<span id="cb30-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.metrics <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> metrics</span>
<span id="cb30-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tem.Mean()</span>
<span id="cb30-6">        </span>
<span id="cb30-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> before_fit(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, learn): </span>
<span id="cb30-8">        learn.metrics <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span></span>
<span id="cb30-9">    </span>
<span id="cb30-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> before_epoch(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, learn):</span>
<span id="cb30-11">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> m <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.metrics.values(): m.reset()</span>
<span id="cb30-12">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loss.reset()</span>
<span id="cb30-13">    </span>
<span id="cb30-14">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> after_batch(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, learn):</span>
<span id="cb30-15">        x,y,<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>_ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.to_cpu(learn.batch)</span>
<span id="cb30-16">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> m <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.metrics.values(): m.update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.to_cpu(learn.preds), y)</span>
<span id="cb30-17">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loss.update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.to_cpu(learn.loss), weight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(x))</span>
<span id="cb30-18">        </span>
<span id="cb30-19">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> after_epoch(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, learn):</span>
<span id="cb30-20">        log <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb30-21">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'epoch'</span>: learn.epoch,</span>
<span id="cb30-22">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mode'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> learn.model.training <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'eval'</span>,</span>
<span id="cb30-23">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'loss'</span> : <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>loss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>compute()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span></span>
<span id="cb30-24">        }</span>
<span id="cb30-25">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> k, v <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.metrics.items():</span>
<span id="cb30-26">            log[k] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>v<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>compute()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span></span>
<span id="cb30-27">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.output(log)</span>
<span id="cb30-28">        </span>
<span id="cb30-29">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> to_cpu(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x):</span>
<span id="cb30-30">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(x, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>): <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.to_cpu(el) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> el <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> x)</span>
<span id="cb30-31">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> x.detach().cpu()</span>
<span id="cb30-32">        </span>
<span id="cb30-33">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> output(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, log): <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(log)</span></code></pre></div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1">metrics_s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MetricsS(accuracy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>tem.MulticlassAccuracy())</span>
<span id="cb31-2"></span>
<span id="cb31-3">l <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Learner(get_model(), dls, F.cross_entropy, torch.optim.SGD, lr, [metrics_s])</span>
<span id="cb31-4">l.fit(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{'epoch': 0, 'mode': 'train', 'loss': '2.220', 'accuracy': '0.206'}
{'epoch': 0, 'mode': 'eval', 'loss': '2.121', 'accuracy': '0.352'}</code></pre>
</div>
</div>
</section>
<section id="device-subscriber" class="level2">
<h2 class="anchored" data-anchor-id="device-subscriber">Device Subscriber</h2>
<p>It’s time we start training on the GPU, to do that we have to move the model (and it’s parameters) as well as all the data onto the GPU. We can easily do this with a Subscriber:</p>
<ul>
<li>move the model (and all it’s trainable parameters) to the device <strong>before fit</strong></li>
<li>move each batch to the device <strong>before batch</strong></li>
</ul>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1"> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| export</span></span>
<span id="cb33-2"></span>
<span id="cb33-3">device <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.device(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cuda"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> torch.cuda.is_available() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cpu"</span>)</span>
<span id="cb33-4">    </span>
<span id="cb33-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> DeviceS(Subscriber):</span>
<span id="cb33-6">    </span>
<span id="cb33-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, device):</span>
<span id="cb33-8">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.device <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> device</span>
<span id="cb33-9">    </span>
<span id="cb33-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> before_fit(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, learn):</span>
<span id="cb33-11">        learn.model.to(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.device)</span>
<span id="cb33-12">    </span>
<span id="cb33-13">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> before_batch(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, learn):</span>
<span id="cb33-14">        learn.batch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [x.to(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.device) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> learn.batch]</span></code></pre></div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1">device_s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DeviceS(device)</span>
<span id="cb34-2"></span>
<span id="cb34-3">l <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Learner(get_model(), dls, F.cross_entropy, torch.optim.SGD, lr, [metrics_s, device_s])</span>
<span id="cb34-4">l.fit(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{'epoch': 0, 'mode': 'train', 'loss': '2.209', 'accuracy': '0.256'}
{'epoch': 0, 'mode': 'eval', 'loss': '2.115', 'accuracy': '0.306'}</code></pre>
</div>
</div>
</section>
<section id="learning-rate-finder" class="level2">
<h2 class="anchored" data-anchor-id="learning-rate-finder">Learning Rate Finder</h2>
<p>The learning rate finder is very simple technique that can be used to find a good learning rate for training a network. It works like this:</p>
<ul>
<li>Start with a very small learning rate</li>
<li>Do a forward pass through the network of a single batch of data and record the loss</li>
<li>Increase the learning rate with constant factor</li>
<li>Do another forward pass through the network of a single batch and record the loss</li>
<li>Continue to do this until at some point the loss “explodes”: for example because the current loss is 3 times as large as the minimum loss recorded so far</li>
</ul>
<p>After this, we plot the learning rate vs the recorded losses and look for a learning rate at which the loss is decreasing the most (i.e.&nbsp;the point where the loss has the smallest derivative).</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1"> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| export</span></span>
<span id="cb36-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> LRFindS(Subscriber):</span>
<span id="cb36-3">    </span>
<span id="cb36-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, mult<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.25</span>):</span>
<span id="cb36-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.mult <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mult</span>
<span id="cb36-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> math.inf</span>
<span id="cb36-7">        </span>
<span id="cb36-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> before_epoch(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, learn):</span>
<span id="cb36-9">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> learn.model.training: <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> CancelFitException</span>
<span id="cb36-10">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.losses <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb36-11">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lrs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb36-12">    </span>
<span id="cb36-13">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> after_loss(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, learn):</span>
<span id="cb36-14">        lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> learn.opt.param_groups[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lr'</span>]</span>
<span id="cb36-15">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lrs.append(lr)</span>
<span id="cb36-16">        loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> learn.loss.detach().cpu()</span>
<span id="cb36-17">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.losses.append(loss)</span>
<span id="cb36-18">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> loss</span>
<span id="cb36-19">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>: <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> CancelFitException()</span>
<span id="cb36-20">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> g <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> learn.opt.param_groups: g[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lr'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.mult</span>
<span id="cb36-21">        </span>
<span id="cb36-22">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> plot(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb36-23">        plt.plot(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lrs, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.losses)</span>
<span id="cb36-24">        plt.xscale(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'log'</span>)</span></code></pre></div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1">l <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Learner(get_model(), dls, F.cross_entropy, torch.optim.SGD, lr, [metrics_s, device_s])</span>
<span id="cb37-2"></span>
<span id="cb37-3">lrfind_s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LRFindS()</span>
<span id="cb37-4">l.fit(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-4</span>, subs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[lrfind_s])</span></code></pre></div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1">lrfind_s.plot()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://lucasvw.github.io/posts/10_nntrain_learner/index_files/figure-html/cell-28-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>From which we see that a learning rate of around 0.2 would be best</p>
</section>
<section id="momentumlearner" class="level2">
<h2 class="anchored" data-anchor-id="momentumlearner">MomentumLearner</h2>
<p>Additionally, we can easily subclass <code>Learner</code>, and implement custom functionality into any of its 5 main functionalities:</p>
<ul>
<li>prediction: <code>self.predict()</code></li>
<li>loss: <code>self.get_loss()</code></li>
<li>backward pass: <code>self.backward()</code></li>
<li>stepping of weights: <code>self.step()</code></li>
<li>zeroing of gradients: <code>self.zero_grad()</code></li>
</ul>
<p>For example we can create a <code>MomentumLearner</code> which doesn’t just use the gradient of the last backward pass, but uses an exponentially weighted average of all previously computed gradients. We can do this by not zeroing out the gradients, but just reduce them by a factor between 0 and 1 (the momentum parameter). This way the “gradient with momentum” at time <img src="https://latex.codecogs.com/png.latex?t"> (<img src="https://latex.codecogs.com/png.latex?m_t">), will be a function of the normal gradient (<img src="https://latex.codecogs.com/png.latex?g_t">):</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Am_t%20=%20g_t%20+%20c%20%5Ccdot%20g_%7Bt-1%7D%20+%20c%5E2%20%5Ccdot%20g_%7Bt-2%7D%20+%20...%0A"></p>
<p>This is called momentum and the idea is to add a sense of “inertia” to the gradients, i.e.&nbsp;if in one step we are moving through the loss manifold in a certain direction, then in the next step we want to keep moving somewhat in that direction irrespective of the gradient of the current step.</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1"> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| export</span></span>
<span id="cb39-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> MomentumLearner(Learner):</span>
<span id="cb39-3">    </span>
<span id="cb39-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, model, dls, loss_fn, optim_class, lr, subs, mom<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.85</span>):</span>
<span id="cb39-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.mom <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mom</span>
<span id="cb39-6">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(model, dls, loss_fn, optim_class, lr, subs)</span>
<span id="cb39-7">        </span>
<span id="cb39-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> zero_grad(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb39-9">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb39-10">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model.parameters(): p.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.mom</span></code></pre></div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1">l <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MomentumLearner(get_model(), dls, F.cross_entropy, torch.optim.SGD, lr, [metrics_s, device_s])</span>
<span id="cb40-2">l.fit(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{'epoch': 0, 'mode': 'train', 'loss': '1.657', 'accuracy': '0.481'}
{'epoch': 0, 'mode': 'eval', 'loss': '1.105', 'accuracy': '0.647'}
{'epoch': 1, 'mode': 'train', 'loss': '0.925', 'accuracy': '0.685'}
{'epoch': 1, 'mode': 'eval', 'loss': '0.831', 'accuracy': '0.695'}
{'epoch': 2, 'mode': 'train', 'loss': '0.763', 'accuracy': '0.732'}
{'epoch': 2, 'mode': 'eval', 'loss': '0.736', 'accuracy': '0.739'}
{'epoch': 3, 'mode': 'train', 'loss': '0.686', 'accuracy': '0.764'}
{'epoch': 3, 'mode': 'eval', 'loss': '0.675', 'accuracy': '0.766'}
{'epoch': 4, 'mode': 'train', 'loss': '0.635', 'accuracy': '0.784'}
{'epoch': 4, 'mode': 'eval', 'loss': '0.634', 'accuracy': '0.779'}</code></pre>
</div>
</div>
<p>And this simple technique has a pretty good effect on training our model: the accuracy on the validation set is increasing (even with this simple linear model) from 66% with normal SGD to 78% with momentum.</p>
</section>
<section id="closing-remarks" class="level2">
<h2 class="anchored" data-anchor-id="closing-remarks">Closing remarks</h2>
<p>In this post we have again covered a lot of ground. We have created a very flexible Learner framework, making heavy use of a pubsub system to customize the training loop. As examples we have seen a Subscriber that enables training on the GPU, and another one that takes care of tracking the loss and the metrics while we are training. Additionally we have implement the learning rate finder as a Subscriber, and last but not least we have seen how we can subclass the Learner class to create custom learners that for example implement momentum. Below I have added one additional Subscriber that displays the progress of the loss a bit nicer in a graph, as well as puts the outputs in a table. It has been copied from the miniai library as is (with some minor changes to make it work for <code>nntrain</code>).</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1"> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| export</span></span>
<span id="cb42-2"></span>
<span id="cb42-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> ProgressS(Subscriber):</span>
<span id="cb42-4">    order <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MetricsS.order<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb42-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, plot<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>): <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.plot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plot</span>
<span id="cb42-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> before_fit(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, learn):</span>
<span id="cb42-7">        learn.epochs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.mbar <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> master_bar(learn.epochs)</span>
<span id="cb42-8">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.first <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb42-9">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">hasattr</span>(learn, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'metrics'</span>): learn.metrics.output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.output</span>
<span id="cb42-10">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.losses <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb42-11">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.val_losses <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb42-12"></span>
<span id="cb42-13">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> output(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, d):</span>
<span id="cb42-14">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.first:</span>
<span id="cb42-15">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.mbar.write(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(d), table<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb42-16">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.first <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb42-17">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.mbar.write(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(d.values()), table<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb42-18"></span>
<span id="cb42-19">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> before_epoch(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, learn): learn.dl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> progress_bar(learn.dl, leave<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, parent<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.mbar)</span>
<span id="cb42-20">    </span>
<span id="cb42-21">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> after_batch(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, learn):</span>
<span id="cb42-22">        learn.dl.comment <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>learn<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>loss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span></span>
<span id="cb42-23">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.plot <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">hasattr</span>(learn, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'metrics'</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> learn.model.training:</span>
<span id="cb42-24">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.losses.append(learn.loss.item())</span>
<span id="cb42-25">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.val_losses: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.mbar.update_graph([[fc.L.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.losses), <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.losses],[fc.L.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(learn.epoch).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> x: (x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(learn.dls.train)), <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.val_losses]])</span>
<span id="cb42-26">    </span>
<span id="cb42-27">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> after_epoch(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, learn): </span>
<span id="cb42-28">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> learn.model.training:</span>
<span id="cb42-29">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.plot <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">hasattr</span>(learn, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'metrics'</span>): </span>
<span id="cb42-30">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.val_losses.append(learn.metrics.loss.compute())</span>
<span id="cb42-31">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.mbar.update_graph([[fc.L.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.losses), <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.losses],[fc.L.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(learn.epoch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> x: (x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(learn.dls.train)), <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.val_losses]])</span></code></pre></div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1">progress_s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ProgressS(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb43-2"></span>
<span id="cb43-3">l <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MomentumLearner(get_model(), dls, F.cross_entropy, torch.optim.SGD, lr, [metrics_s, device_s, progress_s])</span>
<span id="cb43-4">l.fit(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">
<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">mode</th>
<th data-quarto-table-cell-role="th">loss</th>
<th data-quarto-table-cell-role="th">accuracy</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>train</td>
<td>1.818</td>
<td>0.425</td>
</tr>
<tr class="even">
<td>0</td>
<td>eval</td>
<td>1.192</td>
<td>0.640</td>
</tr>
<tr class="odd">
<td>1</td>
<td>train</td>
<td>0.965</td>
<td>0.676</td>
</tr>
<tr class="even">
<td>1</td>
<td>eval</td>
<td>0.845</td>
<td>0.693</td>
</tr>
<tr class="odd">
<td>2</td>
<td>train</td>
<td>0.772</td>
<td>0.730</td>
</tr>
<tr class="even">
<td>2</td>
<td>eval</td>
<td>0.740</td>
<td>0.737</td>
</tr>
<tr class="odd">
<td>3</td>
<td>train</td>
<td>0.690</td>
<td>0.762</td>
</tr>
<tr class="even">
<td>3</td>
<td>eval</td>
<td>0.676</td>
<td>0.765</td>
</tr>
<tr class="odd">
<td>4</td>
<td>train</td>
<td>0.636</td>
<td>0.784</td>
</tr>
<tr class="even">
<td>4</td>
<td>eval</td>
<td>0.634</td>
<td>0.780</td>
</tr>
</tbody>
</table>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://lucasvw.github.io/posts/10_nntrain_learner/index_files/figure-html/cell-32-output-3.png" class="img-fluid"></p>
</div>
</div>


</section>

 ]]></description>
  <category>code</category>
  <category>neural network</category>
  <category>deep learning</category>
  <guid>https://lucasvw.github.io/posts/10_nntrain_learner/index.html</guid>
  <pubDate>Wed, 16 Aug 2023 00:00:00 GMT</pubDate>
  <media:content url="https://lucasvw.github.io/posts/10_nntrain_learner/image.png" medium="image" type="image/png" height="97" width="144"/>
</item>
<item>
  <title>nntrain (1/n): Datasets and Dataloaders</title>
  <dc:creator>Lucas van Walstijn</dc:creator>
  <link>https://lucasvw.github.io/posts/09_nntrain_ds/index.html</link>
  <description><![CDATA[ 



<p>In this series, I want to discuss the creation of a small PyTorch based library for training neural networks: <code>nntrain</code>. It’s based off the excellent <a href="https://course.fast.ai/">part 2</a> of Practical Deep Learning for Coders by Jeremy Howard, in which from lessons 13 to 18 (roughly) the development of the <code>miniai</code> library is discussed.</p>
<p>We’ll try to build everything as much as possible from scratch to understand how things work. Once the main functionality of components is implemented and verified, we can switch over to PyTorch’s version. This is similar to how things are done in the course. However, this is not just a “copy / paste” of the course: on many occasions I take a different route, and most of the code is my own. That is not to say that all of this is meant to be extremely innovative, instead I had the following goals:</p>
<ul>
<li>Deeply understand the training of neural networks with a focus on PyTorch</li>
<li>Try to create an even better narrative then what’s presented in FastAI 🙉🤷‍♂️🙈</li>
<li>Get hands-on experience with creating a library with <a href="https://nbdev.fast.ai/"><code>nb_dev</code></a></li>
</ul>
<p><code>nb_dev</code> is another great project from the fastai community, which allows python libraries to be written in jupyter notebooks. This may sound a bit weird and controversial, but it has the advantage that we can create the source code for our library in the very same environment in which we want to experiment and interact with our methods, objects and structure <strong>while we are building the library</strong>. For more details on why this is a good idea and other nice features of <code>nb_dev</code>, see <a href="https://www.fast.ai/posts/2022-07-28-nbdev2.html">here</a>.</p>
<p>So without further ado, let’s start with where we left off in the previous <a href="https://lucasvw.github.io/posts/08_nntrain_setup/">post</a>:</p>
<section id="end-of-last-post" class="level2">
<h2 class="anchored" data-anchor-id="end-of-last-post">End of last post:</h2>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> datasets <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> load_dataset,load_dataset_builder</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torchvision.transforms.functional <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> TF</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> nn</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn.functional <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> F</span>
<span id="cb1-6"></span>
<span id="cb1-7">name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fashion_mnist"</span></span>
<span id="cb1-8">ds_builder <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> load_dataset_builder(name)</span>
<span id="cb1-9">ds_hf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> load_dataset(name, split<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train'</span>)</span>
<span id="cb1-10"></span>
<span id="cb1-11">x_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.stack([TF.to_tensor(i).view(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> ds_hf[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'image'</span>]])</span>
<span id="cb1-12">y_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.stack([torch.tensor(i) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> ds_hf[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>]])</span>
<span id="cb1-13"></span>
<span id="cb1-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> fit(epochs):</span>
<span id="cb1-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> epoch <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(epochs):</span>
<span id="cb1-16">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(x_train), bs):</span>
<span id="cb1-17">            xb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_train[i:i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>bs]</span>
<span id="cb1-18">            yb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y_train[i:i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>bs]</span>
<span id="cb1-19"></span>
<span id="cb1-20">            preds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(xb)</span>
<span id="cb1-21">            acc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> accuracy(preds, yb)</span>
<span id="cb1-22">            loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> loss_func(preds, yb)</span>
<span id="cb1-23">            loss.backward()</span>
<span id="cb1-24"></span>
<span id="cb1-25">            opt.step()</span>
<span id="cb1-26">            opt.zero_grad()</span>
<span id="cb1-27">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>epoch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> | </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>loss<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> | </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>acc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb1-28"></span>
<span id="cb1-29"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> accuracy(preds, targs):</span>
<span id="cb1-30">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> (preds.argmax(dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> targs).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>().mean()        </span>
<span id="cb1-31"></span>
<span id="cb1-32"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> get_model_opt():</span>
<span id="cb1-33">    layers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [nn.Linear(n_in, n_h), nn.ReLU(), nn.Linear(n_h, n_out)]</span>
<span id="cb1-34">    model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Sequential(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>layers)</span>
<span id="cb1-35">    </span>
<span id="cb1-36">    opt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.optim.SGD(model.parameters(), lr)</span>
<span id="cb1-37">    </span>
<span id="cb1-38">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> model, opt</span>
<span id="cb1-39"></span>
<span id="cb1-40">n_in  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span></span>
<span id="cb1-41">n_h   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span></span>
<span id="cb1-42">n_out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb1-43">lr    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span></span>
<span id="cb1-44">bs    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1024</span></span>
<span id="cb1-45">loss_func <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.cross_entropy</span>
<span id="cb1-46"></span>
<span id="cb1-47">model, opt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_model_opt()</span>
<span id="cb1-48">fit(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
</section>
<section id="datasets" class="level2">
<h2 class="anchored" data-anchor-id="datasets">Datasets:</h2>
<p>All the stuff in this post will be based on tackling the minibatch construct we currently have in the training loop on lines 16-18:</p>
<div class="sourceCode" id="cb2" data-startfrom="15" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python" style="counter-reset: source-line 14;"><span id="cb2-15">...</span>
<span id="cb2-16"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(x_train), bs):</span>
<span id="cb2-17">    xb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_train[i:i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>bs]</span>
<span id="cb2-18">    yb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y_train[i:i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>bs]</span>
<span id="cb2-19">...</span></code></pre></div>
<p>And the first refactor will be to create a Dataset object, which allows us to simplify:</p>
<div class="sourceCode" id="cb3" data-startfrom="15" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python" style="counter-reset: source-line 14;"><span id="cb3-15">...</span>
<span id="cb3-16"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(x_train), bs):</span>
<span id="cb3-17">    xb, yb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset[i:i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>bs]</span>
<span id="cb3-18">...</span></code></pre></div>
<p>This is pretty straight-forward, a Dataset is something that holds our data and upon “indexing into” it returns a sample of the data:</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Dataset():</span>
<span id="cb4-2">    </span>
<span id="cb4-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x_train, y_train):</span>
<span id="cb4-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_train</span>
<span id="cb4-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y_train</span>
<span id="cb4-6">        </span>
<span id="cb4-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__getitem__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, i):</span>
<span id="cb4-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x_train[i], <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y_train[i]</span>
<span id="cb4-9">    </span>
<span id="cb4-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__len__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb4-11">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x_train)</span></code></pre></div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">ds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Dataset(x_train, y_train)</span>
<span id="cb5-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>([i.shape <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> ds[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[torch.Size([784]), torch.Size([])]</code></pre>
</div>
</div>
<p>Next, we want to further improve the training loop and get to this behavior:</p>
<div class="sourceCode" id="cb7" data-startfrom="15" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python" style="counter-reset: source-line 14;"><span id="cb7-15">...</span>
<span id="cb7-16"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> xb, yb <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> dataloader:</span>
<span id="cb7-17">...</span></code></pre></div>
<p>So our dataloader needs to wrap the dataset, and provide some kind of an iterator returning batches of data, based on the specified batch size. Let’s create one:</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> DataLoader():</span>
<span id="cb8-2">    </span>
<span id="cb8-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, dataset, batch_size):</span>
<span id="cb8-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset</span>
<span id="cb8-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.batch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> batch_size</span>
<span id="cb8-6">        </span>
<span id="cb8-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__iter__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb8-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dataset),<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.batch_size):</span>
<span id="cb8-9">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">yield</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dataset[i:i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.batch_size]</span></code></pre></div>
</div>
<p>Now the training loop is simplified to:</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> fit(epochs):</span>
<span id="cb9-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> epoch <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(epochs):</span>
<span id="cb9-3">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> xb, yb <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> dl:</span>
<span id="cb9-4">            preds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(xb)</span>
<span id="cb9-5">            acc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> accuracy(preds, yb)</span>
<span id="cb9-6">            loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> loss_func(preds, yb)</span>
<span id="cb9-7">            loss.backward()</span>
<span id="cb9-8"></span>
<span id="cb9-9">            opt.step()</span>
<span id="cb9-10">            opt.zero_grad()</span>
<span id="cb9-11">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>epoch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> | </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>loss<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> | </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>acc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">dl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataLoader(ds, bs)</span>
<span id="cb10-2"></span>
<span id="cb10-3">model, opt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_model_opt()</span>
<span id="cb10-4">fit(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>epoch=0 | loss=2.062 | acc=0.441
epoch=1 | loss=1.785 | acc=0.597
epoch=2 | loss=1.531 | acc=0.637
epoch=3 | loss=1.334 | acc=0.645
epoch=4 | loss=1.190 | acc=0.660</code></pre>
</div>
</div>
</section>
<section id="next-up-shuffling-the-data" class="level2">
<h2 class="anchored" data-anchor-id="next-up-shuffling-the-data">Next up: shuffling the data</h2>
<p>The above training loop already looks pretty good, it’s small and concise, and fairly generic. The next improvement we are going to make is something that doesn’t improve the code of the training loop, but improves training of the model. So far during training, we cycle each epoch through the data in the exact same order. This means that all training samples are always batched together with the exact same other samples. This is not good for training our model, instead we want to shuffle the data up. So that each epoch, we have batches of data that have not yet been batched up together. This additional variation helps the model to generalize as we will see.</p>
<p>The simplest implementation would be to create a list of indices, which we put in between the dataset and the sampling of the mini-batches. In case we don’t need to shuffle, this list will just be <code>[0, 1, ... len(dataset)]</code>.</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random</span>
<span id="cb12-2"></span>
<span id="cb12-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> DataLoader():</span>
<span id="cb12-4">    </span>
<span id="cb12-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, dataset, batch_size, shuffle):</span>
<span id="cb12-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset</span>
<span id="cb12-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.batch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> batch_size</span>
<span id="cb12-8">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.shuffle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> shuffle</span>
<span id="cb12-9">        </span>
<span id="cb12-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__iter__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb12-11">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dataset)))</span>
<span id="cb12-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.shuffle: </span>
<span id="cb12-13">            random.shuffle(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.indices)</span>
<span id="cb12-14">            </span>
<span id="cb12-15">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dataset),<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.batch_size):</span>
<span id="cb12-16">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">yield</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dataset[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.indices[i:i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.batch_size]]</span></code></pre></div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">model, opt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_model_opt()</span>
<span id="cb13-2">dl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataLoader(ds, bs, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb13-3">fit(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>epoch=0 | loss=2.067 | acc=0.429
epoch=1 | loss=1.800 | acc=0.515
epoch=2 | loss=1.539 | acc=0.592
epoch=3 | loss=1.358 | acc=0.618
epoch=4 | loss=1.187 | acc=0.692</code></pre>
</div>
</div>
<p>This works just fine, but let’s see if we can encapsulate this logic in a separate class. We start with a simple <code>Sampler</code> class that we can iterate through and either gives indices in order, or shuffled:</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Sampler():</span>
<span id="cb15-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, ds, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>):</span>
<span id="cb15-3">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(ds)))</span>
<span id="cb15-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.shuffle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> shuffle</span>
<span id="cb15-5">        </span>
<span id="cb15-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__iter__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb15-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.shuffle: random.shuffle(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>)</span>
<span id="cb15-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>:</span>
<span id="cb15-9">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">yield</span> i</span></code></pre></div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Sampler(ds, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)           <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># shuffle = False</span></span>
<span id="cb16-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i, sample <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(s): </span>
<span id="cb16-3">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(sample, end<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">', '</span>)</span>
<span id="cb16-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>: <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">break</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>0, 1, 2, 3, 4, 5, </code></pre>
</div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Sampler(ds, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># shuffle = TRUE</span></span>
<span id="cb18-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i, sample <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(s): </span>
<span id="cb18-3">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(sample, end<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">', '</span>)</span>
<span id="cb18-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>: <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">break</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>58844, 19394, 36509, 38262, 51037, 46835, </code></pre>
</div>
</div>
<p>Next, let’s create a BatchSampler that does the same, but returns the indexes in batches. For that we can use the <code>islice()</code> function from the <code>itertools</code> module:</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> itertools <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> islice</span>
<span id="cb20-2"></span>
<span id="cb20-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> printlist(this): <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(this))</span>
<span id="cb20-4"></span>
<span id="cb20-5">lst <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))         <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create a list of 10 numbers</span></span>
<span id="cb20-6"></span>
<span id="cb20-7">printlist(islice(lst, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># with islice we can get a slice out of the list</span></span>
<span id="cb20-8">printlist(islice(lst, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[0, 1, 2]
[5, 6, 7, 8, 9]</code></pre>
</div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">printlist(islice(lst, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># we can also get the "next" 4 elements</span></span>
<span id="cb22-2">printlist(islice(lst, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># doing that twice gives the same first 4 elements</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[0, 1, 2, 3]
[0, 1, 2, 3]</code></pre>
</div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">lst <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">iter</span>(lst)                  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># however if we put an iterator on the list:</span></span>
<span id="cb24-2"></span>
<span id="cb24-3">printlist(islice(lst, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># first 4 elements</span></span>
<span id="cb24-4">printlist(islice(lst, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># second 4 elements</span></span>
<span id="cb24-5">printlist(islice(lst, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># remaining 2 elements</span></span>
<span id="cb24-6">printlist(islice(lst, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># iterator has finished..</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[0, 1, 2, 3]
[4, 5, 6, 7]
[8, 9]
[]</code></pre>
</div>
</div>
<p>And thus we create our <code>BatchSampler</code>:</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> BatchSampler():</span>
<span id="cb26-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, sampler, batch_size):</span>
<span id="cb26-3">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.sampler <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sampler</span>
<span id="cb26-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.batch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> batch_size</span>
<span id="cb26-5">        </span>
<span id="cb26-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__iter__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb26-7">        it <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">iter</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.sampler)</span>
<span id="cb26-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>:</span>
<span id="cb26-9">            res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(islice(it, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.batch_size))</span>
<span id="cb26-10">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(res) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># return when the iterator has finished          </span></span>
<span id="cb26-11">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span>           </span>
<span id="cb26-12">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">yield</span> res</span></code></pre></div>
</div>
<p>Let’s see the BatchSamepler in action:</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Sampler(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)), shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb27-2">batchs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BatchSampler(s, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb27-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> batchs:</span>
<span id="cb27-4">    printlist(i)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[0, 1, 2, 3]
[4, 5, 6, 7]
[8, 9]</code></pre>
</div>
</div>
<p>And let’s incorporate it into the DataLoader:</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> DataLoader():</span>
<span id="cb29-2">    </span>
<span id="cb29-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, dataset, batch_sampler):</span>
<span id="cb29-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset</span>
<span id="cb29-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.batch_sampler <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> batch_sampler</span>
<span id="cb29-6">        </span>
<span id="cb29-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__iter__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb29-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> batch <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.batch_sampler:</span>
<span id="cb29-9">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">yield</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dataset[batch]</span></code></pre></div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Sampler(ds, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb30-2">dl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataLoader(ds, BatchSampler(s, bs))</span>
<span id="cb30-3"></span>
<span id="cb30-4">model, opt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_model_opt()</span>
<span id="cb30-5">fit(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>epoch=0 | loss=1.981 | acc=0.462
epoch=1 | loss=1.698 | acc=0.567
epoch=2 | loss=1.468 | acc=0.620
epoch=3 | loss=1.346 | acc=0.613
epoch=4 | loss=1.202 | acc=0.656</code></pre>
</div>
</div>
</section>
<section id="collation" class="level2">
<h2 class="anchored" data-anchor-id="collation">Collation</h2>
<p>And this works pretty good. However, there is one caveat. In the very beginning of this post we did:</p>
<div class="sourceCode" id="cb32" data-startfrom="11" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python" style="counter-reset: source-line 10;"><span id="cb32-11">x_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.stack([TF.to_tensor(i).view(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> ds_hf[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'image'</span>]])</span>
<span id="cb32-12">y_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.stack([torch.tensor(i) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> ds_hf[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>]])</span></code></pre></div>
<p>And we ideally would like these transformations to be part of the Dataloaders / Dataset paradigm. So instead of first transforming the Huggingface Dataset into <code>x_train</code> and <code>y_train</code>, we want to directly use the dataset. We can do so by adding a <strong>collate function</strong>. This wraps around a list of individual samples into the datasets, and receives a list of individual x,y tuples (<code>[(x1,y1), (x2,y2), ..]</code>) as argument. In that function, we can determine how to treat these items and parse it in a way that is suitable to our needs. i.e.:</p>
<ul>
<li>batch the <code>x</code> and <code>y</code>, so that we transform from <code>[(x1,y1), (x2,y2), ..]</code> to <code>[(x_1,x_2, ..), (y_1,y_2, ..)]</code></li>
<li>move individual items <code>x_i</code> and <code>y_i</code> to tensors</li>
<li>stack the <code>x</code> tensors and <code>y</code> tensors respectively into one big tensor</li>
</ul>
<p>So let’s update our DataLoader with a <code>collate_func</code> that wraps around individual samples:</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> DataLoader():</span>
<span id="cb33-2">    </span>
<span id="cb33-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, dataset, batch_sampler, collate_func):</span>
<span id="cb33-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset</span>
<span id="cb33-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.batch_sampler <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> batch_sampler</span>
<span id="cb33-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.collate_func <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> collate_func</span>
<span id="cb33-7">        </span>
<span id="cb33-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__iter__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb33-9">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> batch <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.batch_sampler:</span>
<span id="cb33-10">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">yield</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.collate_func(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dataset[sample] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> sample <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> batch)</span></code></pre></div>
</div>
<p>And now let’s create a custom collate function to deal with our data. Specifically, remember that a sample of our huggingface dataset is a dictionary (and not a tuple) with keys <code>image</code> and <code>label</code> holding a <code>PIL.Image.image</code> object and a number (representing any out of 10 classes) respectively.</p>
<p>So our <code>collate_func</code> should:</p>
<ol type="1">
<li>transform the dictionary into a tuple</li>
<li>move everything to a tensor</li>
<li>zip the results so that <code>x</code> and <code>y</code> are batched</li>
<li>and combine the list of tensors for <code>x</code> and <code>y</code> respectively into one big tensor</li>
</ol>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> collate_func(data):</span>
<span id="cb34-2">    data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [(TF.to_tensor(sample[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'image'</span>]).view(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), torch.tensor(sample[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>])) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> sample <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> data]</span>
<span id="cb34-3">    x, y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>data)</span>
<span id="cb34-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> torch.stack(x), torch.stack(y)</span></code></pre></div>
</div>
<p>And let’s see it in action, now using the huggingface dataset <code>ds_hf</code>:</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1">s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Sampler(ds_hf, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb35-2">dl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataLoader(ds_hf, BatchSampler(s, bs), collate_func)</span>
<span id="cb35-3"></span>
<span id="cb35-4">model, opt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_model_opt()</span>
<span id="cb35-5">fit(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>epoch=0 | loss=2.125 | acc=0.345
epoch=1 | loss=1.899 | acc=0.497
epoch=2 | loss=1.635 | acc=0.609
epoch=3 | loss=1.389 | acc=0.640
epoch=4 | loss=1.260 | acc=0.641</code></pre>
</div>
</div>
<p>Not bad, we have replicated the main logic of PyTorch’s DataLoader. The version from PyTorch has a slightly different API as we don’t have to specify the <code>BatchSampler</code>, instead we can just pass <code>shuffle=True</code>:</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.utils.data <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> DataLoader</span>
<span id="cb37-2"></span>
<span id="cb37-3">s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Sampler(ds_hf, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb37-4">dl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataLoader(ds_hf, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>bs, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, collate_fn<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>collate_func)</span>
<span id="cb37-5"></span>
<span id="cb37-6">model, opt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_model_opt()</span>
<span id="cb37-7">fit(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>epoch=0 | loss=2.107 | acc=0.434
epoch=1 | loss=1.840 | acc=0.620
epoch=2 | loss=1.605 | acc=0.641
epoch=3 | loss=1.354 | acc=0.641
epoch=4 | loss=1.258 | acc=0.618</code></pre>
</div>
</div>
</section>
<section id="validation-set" class="level2">
<h2 class="anchored" data-anchor-id="validation-set">Validation set</h2>
<p>Let’s add a validation set to make sure we validate on data we are not training on. For that we are going to pull the data from the datasets library without the <code>splits</code> argument, which will give us a dataset dictionary containing both a training and a test dataset:</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1">hf_dd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> load_dataset(name)</span>
<span id="cb39-2">hf_dd</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Reusing dataset fashion_mnist (/root/.cache/huggingface/datasets/fashion_mnist/fashion_mnist/1.0.0/8d6c32399aa01613d96e2cbc9b13638f359ef62bb33612b077b4c247f6ef99c1)</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"17183763453740089b95f79c7cbabd59","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<pre><code>DatasetDict({
    train: Dataset({
        features: ['image', 'label'],
        num_rows: 60000
    })
    test: Dataset({
        features: ['image', 'label'],
        num_rows: 10000
    })
})</code></pre>
</div>
</div>
<p>And let’s create two dataloaders, one for the train and one for the validation set. For the validation loader we can double the batch size since we won’t be computing gradients for the forward pass:</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1">train_loader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataLoader(hf_dd[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train'</span>], batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>bs, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, collate_fn<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>collate_func)</span>
<span id="cb42-2">valid_loader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataLoader(hf_dd[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test'</span>], batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>bs, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, collate_fn<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>collate_func)</span></code></pre></div>
</div>
<p>We change the training loop in a couple of ways:</p>
<ul>
<li>compute loss and metrics more correctly, by taking care of the batch-size and taking the average over all data</li>
<li>add a seperate forward pass for the validation set</li>
</ul>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> fit(epochs):</span>
<span id="cb43-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> epoch <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(epochs):</span>
<span id="cb43-3">        model.train()                                       <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># put the model in "train" mode</span></span>
<span id="cb43-4">        n_t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_loss_s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>                              <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># initialize variables for computing averages</span></span>
<span id="cb43-5">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> xb, yb <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> train_loader:</span>
<span id="cb43-6">            preds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(xb)</span>
<span id="cb43-7">            train_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> loss_func(preds, yb)</span>
<span id="cb43-8">            train_loss.backward()</span>
<span id="cb43-9">            </span>
<span id="cb43-10">            n_t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(xb)</span>
<span id="cb43-11">            train_loss_s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> train_loss.item() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(xb)</span>
<span id="cb43-12">            </span>
<span id="cb43-13">            opt.step()</span>
<span id="cb43-14">            opt.zero_grad()</span>
<span id="cb43-15">        </span>
<span id="cb43-16">        model.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">eval</span>()                                        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># put the model in "eval" mode</span></span>
<span id="cb43-17">        n_v <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> valid_loss_s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> acc_s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>                      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># initialize variables for computing averages</span></span>
<span id="cb43-18">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> xb, yb <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> valid_loader:</span>
<span id="cb43-19">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.no_grad():                           <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># no need to compute gradients on validation set</span></span>
<span id="cb43-20">                preds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(xb)</span>
<span id="cb43-21">                valid_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> loss_func(preds, yb)</span>
<span id="cb43-22">                </span>
<span id="cb43-23">                n_v <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(xb)</span>
<span id="cb43-24">                valid_loss_s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> valid_loss.item() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(xb)</span>
<span id="cb43-25">                acc_s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> accuracy(preds, yb) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(xb)</span>
<span id="cb43-26">        </span>
<span id="cb43-27">        train_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_loss_s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> n_t                     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># compute averages of loss and metrics</span></span>
<span id="cb43-28">        valid_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> valid_loss_s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> n_v</span>
<span id="cb43-29">        acc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> acc_s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> n_v</span>
<span id="cb43-30">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>epoch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> | </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>train_loss<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> | </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>valid_loss<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> | </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>acc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1">model, opt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_model_opt()</span>
<span id="cb44-2"></span>
<span id="cb44-3">fit(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>epoch=0 | train_loss=2.198 | valid_loss=2.095 | acc=0.276
epoch=1 | train_loss=1.980 | valid_loss=1.852 | acc=0.539
epoch=2 | train_loss=1.718 | valid_loss=1.591 | acc=0.617
epoch=3 | train_loss=1.481 | valid_loss=1.387 | acc=0.624
epoch=4 | train_loss=1.305 | valid_loss=1.241 | acc=0.637</code></pre>
</div>
</div>
<p>And that’s it for this post (almost)! We have seen a lot of details on Datasets, Dataloaders and the transformation of data. We have used these concepts to improve our training loop: shuffling the training data on each epoch, and the computation of the metrics on the validation set. But before we close off, let’s make our very first exports into the library, so that next time we can continue where we finished off.</p>
</section>
<section id="first-exports" class="level2">
<h2 class="anchored" data-anchor-id="first-exports">First exports</h2>
<p>When exporting code to a module with <code>nbdev</code> the first thing we need to do is declare the <code>default_exp</code> directive. This makes sure that when we run the export, the module will be exported to <code>dataloaders.py</code></p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1"> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| default_exp dataloaders</span></span></code></pre></div>
</div>
<p>Next, we can export any code into the module by adding <code>#|export</code> on top of the cell we want to export. For example:</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb47-1"> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| export</span></span>
<span id="cb47-2"></span>
<span id="cb47-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> print_hello():</span>
<span id="cb47-4">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'hello'</span>)</span></code></pre></div>
</div>
<p>To export, we simply execute:</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb48-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> nbdev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> nbdev.nbdev_export()</span></code></pre></div>
</div>
<p>This will create a file called <code>dataloaders.py</code> in the library folder (in my case <code>nntrain</code>) with the contents:</p>
<div class="sourceCode" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb49-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/01_dataloaders.ipynb.</span></span>
<span id="cb49-2"></span>
<span id="cb49-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># %% auto 0</span></span>
<span id="cb49-4">__all__ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'func'</span>]</span>
<span id="cb49-5"></span>
<span id="cb49-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># %% ../nbs/01_dataloaders.ipynb 59</span></span>
<span id="cb49-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> print_hello():</span>
<span id="cb49-8">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'hello'</span>)</span></code></pre></div>
<p>So what do we want to export here? Let’s see if we can create some generic code for loading data from the Huggingface datasets library into a PyTorch Dataloader:</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb50-1"> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#|export</span></span>
<span id="cb50-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torchvision.transforms.functional <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> TF</span>
<span id="cb50-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.utils.data <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> DataLoader</span>
<span id="cb50-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb50-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> PIL</span></code></pre></div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb51-1"> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#|export</span></span>
<span id="cb51-2"></span>
<span id="cb51-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> hf_ds_collate_fn(data, flatten<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>):</span>
<span id="cb51-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">'''</span></span>
<span id="cb51-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Collation function for building a PyTorch DataLoader from a a huggingface dataset.</span></span>
<span id="cb51-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Tries to put all items from an entry into the dataset to tensor.</span></span>
<span id="cb51-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    PIL images are converted to tensor, either flattened or not </span></span>
<span id="cb51-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    '''</span></span>
<span id="cb51-9"></span>
<span id="cb51-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> to_tensor(i, flatten):</span>
<span id="cb51-11">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(i, PIL.Image.Image):</span>
<span id="cb51-12">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> flatten:</span>
<span id="cb51-13">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> torch.flatten(TF.to_tensor(i))</span>
<span id="cb51-14">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> TF.to_tensor(i)</span>
<span id="cb51-15">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb51-16">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> torch.tensor(i)</span>
<span id="cb51-17">    </span>
<span id="cb51-18">    to_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> partial(to_tensor, flatten<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>flatten)      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># partially apply to_tensor() with flatten arg</span></span>
<span id="cb51-19">    data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(to_tensor, el.values()) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> el <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> data]  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># map each item from a dataset entry through to_tensor()</span></span>
<span id="cb51-20">    data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>data)                                    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># zip data of any length not just (x,y) but also (x,y,z)</span></span>
<span id="cb51-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> (torch.stack(i) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> data)</span></code></pre></div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb52-1"> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#|export</span></span>
<span id="cb52-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> DataLoaders:</span>
<span id="cb52-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, train, valid):</span>
<span id="cb52-4">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">'''Class that exposes two PyTorch dataloaders as train and valid arguments'''</span></span>
<span id="cb52-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train</span>
<span id="cb52-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.valid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> valid</span>
<span id="cb52-7">    </span>
<span id="cb52-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@classmethod</span></span>
<span id="cb52-9">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _get_dls(cls, train_ds, valid_ds, bs, collate_fn, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs):</span>
<span id="cb52-10">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">'''Helper function returning 2 PyTorch Dataloaders as a tuple for 2 Datasets. **kwargs are passed to the DataLoader'''</span></span>
<span id="cb52-11">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> (DataLoader(train_ds, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>bs, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, collate_fn<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>collate_fn, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs),</span>
<span id="cb52-12">                DataLoader(valid_ds, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>bs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, collate_fn<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>collate_fn, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs))</span>
<span id="cb52-13">        </span>
<span id="cb52-14">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@classmethod</span></span>
<span id="cb52-15">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> from_hf_dd(cls, dd, batch_size, collate_fn<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>hf_ds_collate_fn, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs):</span>
<span id="cb52-16">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">'''Factory method to create a Dataloaders object for a Huggingface Dataset dict,</span></span>
<span id="cb52-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        uses the `hf_ds_collate_func` collation function by default, **kwargs are passes to the DataLoaders'''</span></span>
<span id="cb52-18">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> cls(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>cls._get_dls(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>dd.values(), batch_size, collate_fn, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs))</span></code></pre></div>
</div>
<p>With <code>show_doc()</code> we can include the documentations of class methods:</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb53-1"> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#|hide</span></span>
<span id="cb53-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> nbdev.showdoc <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span></code></pre></div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb54-1">show_doc(DataLoaders.from_hf_dd)</span></code></pre></div>
<div class="cell-output cell-output-display">
<hr>
<section id="dataloaders.from_hf_dd" class="level3">
<h3 class="anchored" data-anchor-id="dataloaders.from_hf_dd">DataLoaders.from_hf_dd</h3>
<blockquote class="blockquote">
<pre><code> DataLoaders.from_hf_dd (dd, batch_size, collate_fn=&lt;function
                         hf_ds_collate_fn&gt;, **kwargs)</code></pre>
</blockquote>
<p>Factory method to create a Dataloaders object for a Huggingface Dataset dict, uses the <code>hf_ds_collate_func</code> collation function by default, **kwargs are passes to the DataLoaders</p>
</section>
</div>
</div>
<p>Example usage:</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb56-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> fit(epochs):</span>
<span id="cb56-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> epoch <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(epochs):</span>
<span id="cb56-3">        model.train()                                       </span>
<span id="cb56-4">        n_t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_loss_s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>                              </span>
<span id="cb56-5">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> xb, yb <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> dls.train:</span>
<span id="cb56-6">            preds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(xb)</span>
<span id="cb56-7">            train_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> loss_func(preds, yb)</span>
<span id="cb56-8">            train_loss.backward()</span>
<span id="cb56-9">            </span>
<span id="cb56-10">            n_t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(xb)</span>
<span id="cb56-11">            train_loss_s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> train_loss.item() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(xb)</span>
<span id="cb56-12">            </span>
<span id="cb56-13">            opt.step()</span>
<span id="cb56-14">            opt.zero_grad()</span>
<span id="cb56-15">        </span>
<span id="cb56-16">        model.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">eval</span>()                                        </span>
<span id="cb56-17">        n_v <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> valid_loss_s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> acc_s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>                      </span>
<span id="cb56-18">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> xb, yb <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> dls.valid: </span>
<span id="cb56-19">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.no_grad():                           </span>
<span id="cb56-20">                preds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(xb)</span>
<span id="cb56-21">                valid_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> loss_func(preds, yb)</span>
<span id="cb56-22">                </span>
<span id="cb56-23">                n_v <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(xb)</span>
<span id="cb56-24">                valid_loss_s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> valid_loss.item() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(xb)</span>
<span id="cb56-25">                acc_s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> accuracy(preds, yb) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(xb)</span>
<span id="cb56-26">        </span>
<span id="cb56-27">        train_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_loss_s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> n_t                     </span>
<span id="cb56-28">        valid_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> valid_loss_s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> n_v</span>
<span id="cb56-29">        acc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> acc_s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> n_v</span>
<span id="cb56-30">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>epoch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> | </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>train_loss<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> | </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>valid_loss<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> | </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>acc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb57-1">hf_dd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> load_dataset(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'fashion_mnist'</span>)</span>
<span id="cb57-2">bs    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1024</span></span>
<span id="cb57-3">dls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataLoaders.from_hf_dd(hf_dd, bs)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Reusing dataset fashion_mnist (/root/.cache/huggingface/datasets/fashion_mnist/fashion_mnist/1.0.0/8d6c32399aa01613d96e2cbc9b13638f359ef62bb33612b077b4c247f6ef99c1)</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"812c4c34962d4e1aba8baa1b1f2204d1","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb59-1">model, opt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_model_opt()</span>
<span id="cb59-2"></span>
<span id="cb59-3">fit(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>epoch=0 | loss=2.094 | acc=0.431</code></pre>
</div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb61" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb61-1"> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#|hide</span></span>
<span id="cb61-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> nbdev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> nbdev.nbdev_export()</span></code></pre></div>
</div>
<p>And that’s it. We have created our first module of the <code>nntrain</code> library🕺. Links:</p>
<ul>
<li><a href="https://github.com/lucasvw/nntrain/blob/main/nbs/01_dataloaders.ipynb">Dataloaders Notebook</a>: the “source” of the source code</li>
<li><a href="https://github.com/lucasvw/nntrain/blob/main/nntrain/dataloaders.py">Dataloaders module</a>: the <code>.py</code> source code exported from the notebook</li>
<li><a href="https://lucasvw.github.io/nntrain/dataloaders.html">Documentation</a>: automatically created from the notebook and hosted on Github</li>
</ul>


</section>

 ]]></description>
  <category>code</category>
  <category>neural network</category>
  <category>deep learning</category>
  <guid>https://lucasvw.github.io/posts/09_nntrain_ds/index.html</guid>
  <pubDate>Mon, 14 Aug 2023 00:00:00 GMT</pubDate>
  <media:content url="https://lucasvw.github.io/posts/09_nntrain_ds/image.png" medium="image" type="image/png" height="58" width="144"/>
</item>
<item>
  <title>nntrain (0/n): Preliminaries</title>
  <dc:creator>Lucas van Walstijn</dc:creator>
  <link>https://lucasvw.github.io/posts/08_nntrain_setup/index.html</link>
  <description><![CDATA[ 



<p>In this series, I want to discuss the creation of a small PyTorch based library for training neural networks: <code>nntrain</code>. It’s based off the excellent <a href="https://course.fast.ai/">part 2</a> of Practical Deep Learning for Coders by Jeremy Howard, in which from lessons 13 to 18 (roughly) the development of the <code>miniai</code> library is discussed.</p>
<p>We’ll try to build everything as much as possible from scratch to understand how things work. Once the main functionality of components is implemented and verified, we can switch over to PyTorch’s version. This is similar to how things are done in the course. However, this is not just a “copy / paste” of the course: on many occasions I take a different route, and most of the code is my own. That is not to say that all of this is meant to be extremely innovative, instead I had the following goals:</p>
<ul>
<li>Deeply understand the training of neural networks with a focus on PyTorch</li>
<li>Try to create an even better narrative then what’s presented in FastAI 🙉🤷‍♂️🙈</li>
<li>Get hands-on experience with creating a library with <a href="https://nbdev.fast.ai/"><code>nb_dev</code></a></li>
</ul>
<p><code>nb_dev</code> is another great project from the fastai community, which allows python libraries to be written in jupyter notebooks. This may sound a bit weird and controversial, but it has the advantage that we can create the source code for our library in the very same environment in which we want to experiment and interact with our methods, objects and structure <strong>while we are building the library</strong>. For more details on why this is a good idea and other nice features of <code>nb_dev</code>, see <a href="https://www.fast.ai/posts/2022-07-28-nbdev2.html">here</a>.</p>
<p>So without further ado, let’s start with some data!</p>
<section id="data" class="level2">
<h2 class="anchored" data-anchor-id="data">Data</h2>
<p>To keep things simple, let’s use the fashion-mnist dataset. We can get the data from the huggingface datasets library:</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> datasets <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> load_dataset,load_dataset_builder</span>
<span id="cb1-2"></span>
<span id="cb1-3">name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fashion_mnist"</span></span>
<span id="cb1-4">ds_builder <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> load_dataset_builder(name)</span>
<span id="cb1-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(ds_builder.info.description)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"c5560f33795d4f909a836d1f45406647","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"c83cbfb7d8c94ec0aea4b283cfe45bbd","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Fashion-MNIST is a dataset of Zalando's article images—consisting of a training set of
60,000 examples and a test set of 10,000 examples. Each example is a 28x28 grayscale image,
associated with a label from 10 classes. We intend Fashion-MNIST to serve as a direct drop-in
replacement for the original MNIST dataset for benchmarking machine learning algorithms.
It shares the same image size and structure of training and testing splits.
</code></pre>
</div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">ds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> load_dataset(name, split<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Downloading and preparing dataset fashion_mnist/fashion_mnist (download: 29.45 MiB, generated: 34.84 MiB, post-processed: Unknown size, total: 64.29 MiB) to /root/.cache/huggingface/datasets/fashion_mnist/fashion_mnist/1.0.0/8d6c32399aa01613d96e2cbc9b13638f359ef62bb33612b077b4c247f6ef99c1...
Dataset fashion_mnist downloaded and prepared to /root/.cache/huggingface/datasets/fashion_mnist/fashion_mnist/1.0.0/8d6c32399aa01613d96e2cbc9b13638f359ef62bb33612b077b4c247f6ef99c1. Subsequent calls will reuse this data.</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"96135b6e859f40feb917a91d2d632d3d","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"ceb12d93da8d47338206756873c30a38","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"5f3f6ddcc7f44c8dbe1b3b24222a1a7a","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"8a23bbe688274c5ba8260579c9899aea","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"bf2b57bcc16b402aa7d0ba9132af4aa4","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"1ac53f4aa94c4a988d373db11c1d127f","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
</div>
<p><code>ds</code> is a <code>Dataset</code> object. These kind of objects appear in many Deep Learning libraries and have two main functionalities: you can index into them and they have a length:</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">ds[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>{'image': &lt;PIL.PngImagePlugin.PngImageFile image mode=L size=28x28&gt;,
 'label': 9}</code></pre>
</div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(ds)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>60000</code></pre>
</div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">ds</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>Dataset({
    features: ['image', 'label'],
    num_rows: 60000
})</code></pre>
</div>
</div>
<p>Hugginface datasets (as opposed to PyTorch datasets) also have some properties, in this case <code>num_rows</code>, which is the length of the dataset (60000) and <code>features</code>, a dictionary giving metadata on what is returned when we index into the dataset:</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">ds.features</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>{'image': Image(decode=True, id=None),
 'label': ClassLabel(num_classes=10, names=['T - shirt / top', 'Trouser', 'Pullover', 'Dress', 'Coat', 'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot'], id=None)}</code></pre>
</div>
</div>
<p>Let’s visualize one single item:</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb13-2"></span>
<span id="cb13-3">image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ds[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'image'</span>]</span>
<span id="cb13-4">label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ds[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>]</span>
<span id="cb13-5"></span>
<span id="cb13-6">figure, axs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots()</span>
<span id="cb13-7"></span>
<span id="cb13-8">axs.imshow(ds[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'image'</span>], cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Greys'</span>)</span>
<span id="cb13-9">axs.set_title(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Image of the first item in the dataset: label=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>label<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> -&gt; "</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>ds<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>features[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"label"</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>int2str(label)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb13-10">axs.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'off'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://lucasvw.github.io/posts/08_nntrain_setup/index_files/figure-html/cell-8-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>Since we want to start simple, and only later get to Datsets and Dataloaders: let’s pull out the data into a tensor so we can build simple linear layers.</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torchvision.transforms.functional <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> TF   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># to transform from PIL to tensor</span></span>
<span id="cb14-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb14-3"></span>
<span id="cb14-4">x_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [TF.to_tensor(i).view(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> ds[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'image'</span>]]</span>
<span id="cb14-5">y_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [torch.tensor(i) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> ds[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>]]</span>
<span id="cb14-6"></span>
<span id="cb14-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(x_train), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(y_train), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(x_train[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>(60000, 60000, 784)</code></pre>
</div>
</div>
<p>So <code>x_train</code> and <code>y_train</code> are both lists of length 60000, and an element in <code>x_train</code> has length 784 (28x28 pixels).</p>
</section>
<section id="linear-layers" class="level2">
<h2 class="anchored" data-anchor-id="linear-layers">Linear layers</h2>
<p>Now that we have the data, let’s create our very first network operation: a linear layer which takes the 784 long flattened out image vector, and maps it to an output vector of length 10</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb16-2"></span>
<span id="cb16-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> lin(x, a, b):</span>
<span id="cb16-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b</span>
<span id="cb16-5"></span>
<span id="cb16-6">a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">784</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb16-7">b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb16-8"></span>
<span id="cb16-9">out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lin(x_train[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], a, b)</span>
<span id="cb16-10">out.shape</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>torch.Size([10])</code></pre>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>For details on matrix multiplications, check out this <a href="https://lucasvw.github.io/posts/04_matmul/">post</a> I wrote earlier.</p>
</div>
</div>
<p>Let’s do the same for all our training data at once:</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">x_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.stack(x_train)</span>
<span id="cb18-2">out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lin(x_train, a,b)</span>
<span id="cb18-3">out.shape</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>torch.Size([60000, 10])</code></pre>
</div>
</div>
<p>Nice, that’s basically a forward pass through our model on all our training data!</p>
<p>Now if we want to increase the depth of our network by adding an additional layer, we need to add a non-linearity in the middle. Why? See for example the first paragraphs of this <a href="https://stats.stackexchange.com/a/335972">answer</a>.</p>
<p>Let’s add a ReLu nonlinearity:</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> relu(x):</span>
<span id="cb20-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> x.clamp_min(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>)</span></code></pre></div>
</div>
<p>And let’s combine these into our first “model”, consisting of two linear layers and a relu nonlinearity in the middle:</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">n_in <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">784</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># number of input units (28x28)</span></span>
<span id="cb21-2">n_h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># number of hidden units</span></span>
<span id="cb21-3">n_out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># number of output units</span></span>
<span id="cb21-4"></span>
<span id="cb21-5">w1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(n_in, n_h)</span>
<span id="cb21-6">b1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros(n_h)</span>
<span id="cb21-7">w2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(n_h, n_out)</span>
<span id="cb21-8">b2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros(n_out)</span>
<span id="cb21-9"></span>
<span id="cb21-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> model(x):</span>
<span id="cb21-11">    a1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lin(x, w1, b1)</span>
<span id="cb21-12">    z1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> relu(a1)</span>
<span id="cb21-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> lin(z1, w2, b2)</span></code></pre></div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(x_train)</span></code></pre></div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">out.shape</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>torch.Size([60000, 10])</code></pre>
</div>
</div>
<p>Our “model” currently only does a forward pass through the network. And as a matter of fact, it’s doing a forward pass with random weights. When training a neural network, we want to change these parameters in a way that the outputs of the network align with the outputs (<code>y_train</code>). I will not go into the details of this, but here is a great <a href="https://youtu.be/VMj-3S1tku0">video</a> by Andrej Karpathy which in my opinion gives one of the best explanations into how this works.</p>
<p>Before doing a backward pass, we first have to calculate the loss. Since the outputs represent any of the 10 classes the image corresponds with, cross entropy is a straight forward loss function. Some details about cross entropy loss can be found in a <a href="https://lucasvw.github.io/posts/05_crossentropy/">post</a> I wrote earlier. However, since we want to add the backpropagation ourselves and I don’t know how to backpropagate through cross entropy (and I don’t feel like spending a lot of time on it), let’s use a much easier loss function for now: mean squared error (MSE). This obviously doesn’t make any sense in the context of our data, but mathematically it’s possible. We just have to end up with a single activation of our model instead of 10:</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">n_out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># number of output units changed to 1</span></span>
<span id="cb25-2"></span>
<span id="cb25-3">w2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(n_h, n_out)</span>
<span id="cb25-4">b2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros(n_out)</span>
<span id="cb25-5"></span>
<span id="cb25-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> model(x):</span>
<span id="cb25-7">    a1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lin(x, w1, b1)</span>
<span id="cb25-8">    z1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> relu(a1)</span>
<span id="cb25-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> lin(z1, w2, b2)</span>
<span id="cb25-10"></span>
<span id="cb25-11">out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(x_train)</span></code></pre></div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">out.shape</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>torch.Size([60000, 1])</code></pre>
</div>
</div>
<p>From which we see that the outputs have an empty trailing dimension. <code>y_train</code> doesn’t have this, so we have to squeeze out this empty dimension when computing the MSE:</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> mse(pred, targ): </span>
<span id="cb28-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> (pred.squeeze(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>targ).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">pow</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>).mean() </span>
<span id="cb28-3"></span>
<span id="cb28-4">y_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.stack(y_train)</span>
<span id="cb28-5">mse(out, y_train)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>tensor(3015.2351)</code></pre>
</div>
</div>
<p>The next step will be to add the backward pass. But let’s refactor our code to put things into classes, that way the backward pass can be added more easily:</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Linear():</span>
<span id="cb30-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, n_in, n_out):</span>
<span id="cb30-3">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(n_in, n_out)</span>
<span id="cb30-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros(n_out)</span>
<span id="cb30-5">    </span>
<span id="cb30-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__call__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x):</span>
<span id="cb30-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.inp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x                      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># storing this for the backward pass</span></span>
<span id="cb30-8">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>self.w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.b      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># storing this for the backward pass</span></span>
<span id="cb30-9">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.out</span>
<span id="cb30-10">    </span>
<span id="cb30-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Relu():</span>
<span id="cb30-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__call__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x):</span>
<span id="cb30-13">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.inp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x                      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># storing this for the backward pass</span></span>
<span id="cb30-14">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x.clamp_min(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>)        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># storing this for the backward pass</span></span>
<span id="cb30-15">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.out</span>
<span id="cb30-16">    </span>
<span id="cb30-17"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> MSE():</span>
<span id="cb30-18">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__call__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, pred, targ):</span>
<span id="cb30-19">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pred                   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># storing this for the backward pass</span></span>
<span id="cb30-20">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.targ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> targ                   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># storing this for the backward pass</span></span>
<span id="cb30-21">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (pred.squeeze(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>targ).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">pow</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>).mean()</span>
<span id="cb30-22">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.out</span>
<span id="cb30-23">    </span>
<span id="cb30-24"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Model():</span>
<span id="cb30-25">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, n_in, n_h, n_out):</span>
<span id="cb30-26">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.layers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [Linear(n_in, n_h), Relu(), Linear(n_h, n_out)]</span>
<span id="cb30-27">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MSE()</span>
<span id="cb30-28">        </span>
<span id="cb30-29">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__call__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x, y):</span>
<span id="cb30-30">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> l <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.layers: x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> l(x)</span>
<span id="cb30-31">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loss(x, y)</span></code></pre></div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1">x_train.shape</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>torch.Size([60000, 784])</code></pre>
</div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1">m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Model(n_in, n_h, n_out)</span>
<span id="cb33-2">l <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> m(x_train, y_train)</span></code></pre></div>
</div>
<p>To add in the functionality for the backward pass, redefining the whole class is a nuisance. So instead we’ll <code>patch</code> the classes. We can do this very easily by using the <code>fastcore</code> library. Let’s see a small example:</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> fastcore.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> fc</span>
<span id="cb34-2"></span>
<span id="cb34-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> A():</span>
<span id="cb34-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> hi(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>): <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'hello 😎'</span>)</span>
<span id="cb34-5">    </span>
<span id="cb34-6">a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> A()</span>
<span id="cb34-7">a.hi()</span>
<span id="cb34-8"></span>
<span id="cb34-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@fc.patch</span></span>
<span id="cb34-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> hi(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>:A): <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'howdy 🤠'</span>)</span>
<span id="cb34-11"></span>
<span id="cb34-12">a.hi()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>hello 😎
howdy 🤠</code></pre>
</div>
</div>
<p>So with <code>fc.patch</code> we can extend or change the behavior of Classes that have been defined elsewhere, even on instances of the objects that are already created. Nice!</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@fc.patch</span></span>
<span id="cb36-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> backward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>: Linear):</span>
<span id="cb36-3">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.inp.g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.out.g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w.t()</span>
<span id="cb36-4">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w.g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.inp.t() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.out.g</span>
<span id="cb36-5">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.b.g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.out.g.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb36-6">    </span>
<span id="cb36-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@fc.patch</span></span>
<span id="cb36-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> backward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>: Relu):</span>
<span id="cb36-9">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.inp.g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.inp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.out.g</span>
<span id="cb36-10">    </span>
<span id="cb36-11"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@fc.patch</span></span>
<span id="cb36-12"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> backward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>: MSE):</span>
<span id="cb36-13">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pred.g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pred.squeeze() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.targ).unsqueeze(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.targ.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb36-14">    </span>
<span id="cb36-15"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@fc.patch</span></span>
<span id="cb36-16"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> backward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>: Model):</span>
<span id="cb36-17">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loss.backward()</span>
<span id="cb36-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> l <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">reversed</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.layers): l.backward()</span></code></pre></div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1">m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Model(n_in, n_h, n_out)</span>
<span id="cb37-2">l <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> m(x_train, y_train)</span>
<span id="cb37-3">m.backward()</span></code></pre></div>
</div>
<p>Now the actual operations in the backward methods you will just have to take for granted as I am not going to derive them. If you want, you can have some fun (?) to try and derive it yourself. What I think is most important about these formulas:</p>
<ol type="1">
<li>Notice that each layer has a reference to it’s inputs and it’s outputs</li>
<li>During the backward pass, each layer uses the gradient from the <em>outputs</em> and uses it to set the gradient on the <em>inputs</em></li>
<li>The inputs from layer <img src="https://latex.codecogs.com/png.latex?n"> are the outputs from layer <img src="https://latex.codecogs.com/png.latex?n-1">, so when the gradients are being set on the inputs from layer <img src="https://latex.codecogs.com/png.latex?n">, this means that layer <img src="https://latex.codecogs.com/png.latex?n-1"> it’s outputs are being set at the same time</li>
<li>This is the fundamental point about backpropagation of the gradient: in reverse order, layer by layer the gradients are being <em>propagated back</em> through the network using the chain rule</li>
<li>Although we don’t derive the operations, we can see that that there <em>exist</em> operations that do this. These operations are not magical, they are just the result of calculus: not very different from the fact that if <img src="https://latex.codecogs.com/png.latex?f(x)%20=%20x%5E2"> then <img src="https://latex.codecogs.com/png.latex?f'(x)%20=%202x"> and if <img src="https://latex.codecogs.com/png.latex?h(x)%20=%20f(g(x))"> then <img src="https://latex.codecogs.com/png.latex?h'(x)%20=%20f'(g(x))%20*%20g'(x)"></li>
</ol>
</section>
<section id="first-refactor-module-baseclass-and-training-loop" class="level2">
<h2 class="anchored" data-anchor-id="first-refactor-module-baseclass-and-training-loop">First refactor: <code>Module</code> baseclass and training loop</h2>
<p>Now let’s see how we can make this a little better. One thing that seems a bit silly is that in each of the <code>Linear</code>, <code>MSE</code> and <code>Relu</code> classes, we are storing explicitly the inputs and outputs when doing a forward call. As mentioned, we need this to backpropagate the gradients. However, we rather not store that explicitly all the time when creating a new layer.</p>
<p>So let’s create a base class that takes care of this:</p>
<ul>
<li>Pack the forward functionality of each layer in a dedicated <code>forward</code> method</li>
<li>let the storing of inputs and ouputs be done in the <code>__call__</code> method of the baseclass, and call the <code>self.forward</code> method in between.</li>
</ul>
<p>This works, but there is one caveat: most layers just have one input when they are called (<code>x</code>), but the loss has 2 (<code>pred</code> and <code>targ</code>). To make this storing of the inputs generic we can store them as an array on the base class, and also pass them as positional arguments to <code>_backward</code>. This way, <code>forward</code> and <code>_backward</code> have the same arguments.</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Module():</span>
<span id="cb38-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__call__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args):</span>
<span id="cb38-3">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.args <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> args</span>
<span id="cb38-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.forward(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args)</span>
<span id="cb38-5">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.out</span>
<span id="cb38-6">    </span>
<span id="cb38-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> backward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>): <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._backward(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.args)</span>
<span id="cb38-8"></span>
<span id="cb38-9">    </span>
<span id="cb38-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Linear(Module):</span>
<span id="cb38-11">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, n_in, n_out):</span>
<span id="cb38-12">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(n_in, n_out)</span>
<span id="cb38-13">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros(n_out)</span>
<span id="cb38-14">    </span>
<span id="cb38-15">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x):</span>
<span id="cb38-16">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>self.w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.b</span>
<span id="cb38-17">    </span>
<span id="cb38-18">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _backward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, inp):</span>
<span id="cb38-19">        inp.g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.out.g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w.t()</span>
<span id="cb38-20">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w.g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> inp.t() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.out.g</span>
<span id="cb38-21">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.b.g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.out.g.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb38-22">    </span>
<span id="cb38-23">    </span>
<span id="cb38-24"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Relu(Module):</span>
<span id="cb38-25">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x):</span>
<span id="cb38-26">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> x.clamp_min(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>)</span>
<span id="cb38-27">    </span>
<span id="cb38-28">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _backward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, inp):</span>
<span id="cb38-29">        inp.g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (inp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.out.g</span>
<span id="cb38-30"></span>
<span id="cb38-31">    </span>
<span id="cb38-32"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> MSE(Module):</span>
<span id="cb38-33">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, pred, targ):</span>
<span id="cb38-34">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> (pred.squeeze(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>targ).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">pow</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>).mean()</span>
<span id="cb38-35">    </span>
<span id="cb38-36">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _backward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, pred, targ):</span>
<span id="cb38-37">        pred.g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (pred.squeeze() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> targ).unsqueeze(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> targ.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb38-38">    </span>
<span id="cb38-39">    </span>
<span id="cb38-40"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Model(Module):</span>
<span id="cb38-41">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, n_in, n_h, n_out):</span>
<span id="cb38-42">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.layers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [Linear(n_in, n_h), Relu(), Linear(n_h, n_out)]</span>
<span id="cb38-43">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MSE()</span>
<span id="cb38-44">        </span>
<span id="cb38-45">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x, y):</span>
<span id="cb38-46">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> l <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.layers: x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> l(x)</span>
<span id="cb38-47">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loss(x, y)</span>
<span id="cb38-48">    </span>
<span id="cb38-49">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> backward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb38-50">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loss.backward()</span>
<span id="cb38-51">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> l <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">reversed</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.layers): l.backward()</span></code></pre></div>
</div>
<p>With these objects, let’s create our first training loop:</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1">epochs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>                              <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># train for nr of epochs</span></span>
<span id="cb39-2">bs     <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1024</span>                           <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># batch-size</span></span>
<span id="cb39-3">lr     <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>                           <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># learning rate</span></span>
<span id="cb39-4">m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Model(n_in, n_h, n_out)             <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># instantiate our model</span></span>
<span id="cb39-5"></span>
<span id="cb39-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> epoch <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(epochs):             <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># iterate through epochs</span></span>
<span id="cb39-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(x_train), bs): <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># iterate through the batches</span></span>
<span id="cb39-8">        xb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_train[i:i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>bs]            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># get minibatch </span></span>
<span id="cb39-9">        yb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y_train[i:i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>bs]</span>
<span id="cb39-10">        </span>
<span id="cb39-11">        loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> m(xb, yb)                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># forward pass</span></span>
<span id="cb39-12">        m.backward()                    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># backward pass</span></span>
<span id="cb39-13">        </span>
<span id="cb39-14">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> l <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> m.layers:              <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># iterate through the layers</span></span>
<span id="cb39-15">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(l, Linear):   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># only update the linear layers</span></span>
<span id="cb39-16">                l.w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> l.w.g     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># update the weights</span></span>
<span id="cb39-17">                l.b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> l.b.g     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># update the bias</span></span>
<span id="cb39-18"></span>
<span id="cb39-19">                l.w.g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># reset the gradients</span></span>
<span id="cb39-20">                l.b.g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb39-21">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>epoch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> | </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>loss<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.1f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>epoch=0 | loss=14242.1
epoch=1 | loss=1329.6
epoch=2 | loss=135.2
epoch=3 | loss=21.2
epoch=4 | loss=9.7</code></pre>
</div>
</div>
<p>Awesome, the loss is decreasing i.e.&nbsp;the model is training!</p>
</section>
<section id="second-refactor-simplify-the-weight-update" class="level2">
<h2 class="anchored" data-anchor-id="second-refactor-simplify-the-weight-update">Second refactor: simplify the weight update</h2>
<p>Let’s try to simplify our training loop, and make it more generic. By adding functionality to our Module class so that it has a reference to it’s trainable parameters, we can update the weights as shown below.</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> fit(epochs):</span>
<span id="cb41-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> epoch <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(epochs):</span>
<span id="cb41-3">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(x_train), bs):</span>
<span id="cb41-4">            xb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_train[i:i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>bs]</span>
<span id="cb41-5">            yb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y_train[i:i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>bs]</span>
<span id="cb41-6"></span>
<span id="cb41-7">            loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> m(xb, yb)</span>
<span id="cb41-8">            m.backward()</span>
<span id="cb41-9"></span>
<span id="cb41-10">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> m.parameters():    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># model has a reference to the trainable parameters</span></span>
<span id="cb41-11">                p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> p.g           </span>
<span id="cb41-12">            m.zero_grad()               <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># model can reset the gradients</span></span>
<span id="cb41-13">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>epoch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> | </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>loss<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.1f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div>
</div>
<p>To do so, we will create a new baseclass (<code>NNModule</code>), from which our model and all the layers will inherit. We have the following conditions and properties:</p>
<ol type="1">
<li>The class will hold a dictionary <code>_named_args</code>, in which all the named arguments are stored that are set on the Module.</li>
<li>This is done by defining a <code>__setattr__</code> method, which stores any named argument that doesn’t start with an <code>_</code> in this dictionary</li>
<li>For the <code>Linear</code>, these named arguments will be the parameters <code>w</code> and <code>b</code></li>
<li>For the <code>Model</code>, these named arguments will be <code>layers</code> (an array containing the layer objects) and <code>loss</code> containing the <code>MSE</code> object.</li>
<li>Because we want to get the parameters directly out of a layer, as well as out of the model, we need to implement some logic in <code>_parameters()</code> to iterate through the lowest “level” and get the actual parameters out</li>
<li>Last but not least we have to implement a <code>zero_grad()</code> method to zero the gradients on the parameters</li>
</ol>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> NNModule:</span>
<span id="cb42-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb42-3">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._named_args <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}                           <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># [1]</span></span>
<span id="cb42-4">        </span>
<span id="cb42-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__setattr__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, name, value):                 <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># [2]</span></span>
<span id="cb42-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> name.startswith(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_"</span>): <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._named_args[name] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> value</span>
<span id="cb42-7">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__setattr__</span>(name, value)</span>
<span id="cb42-8">        </span>
<span id="cb42-9">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _parameters(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, obj):                         <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># [5]</span></span>
<span id="cb42-10">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> obj:</span>
<span id="cb42-11">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(i, torch.Tensor): <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">yield</span> i</span>
<span id="cb42-12">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(i, NNModule):</span>
<span id="cb42-13">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">yield</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">from</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">iter</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._parameters(i._named_args.values()))</span>
<span id="cb42-14">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(i, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>):</span>
<span id="cb42-15">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">yield</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">from</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">iter</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._parameters(i))</span>
<span id="cb42-16">        </span>
<span id="cb42-17">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> parameters(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb42-18">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._parameters(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._named_args.values()))</span>
<span id="cb42-19">    </span>
<span id="cb42-20">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> zero_grad(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb42-21">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.parameters():</span>
<span id="cb42-22">            p.g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>                                   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># [6]</span></span>
<span id="cb42-23">        </span>
<span id="cb42-24">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__call__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args):</span>
<span id="cb42-25">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._args <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> args                                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># NOT stored under _named_args as \</span></span>
<span id="cb42-26">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.forward(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args)                  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># it starts with "_"</span></span>
<span id="cb42-27">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._out</span>
<span id="cb42-28">    </span>
<span id="cb42-29">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> backward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>): <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._backward(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._args)</span></code></pre></div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Linear(NNModule):</span>
<span id="cb43-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, n_in, n_out):</span>
<span id="cb43-3">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb43-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(n_in, n_out)               <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># [3] stored under _named_args </span></span>
<span id="cb43-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros(n_out)                     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># [3] stored under _named_args</span></span>
<span id="cb43-6">    </span>
<span id="cb43-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x):</span>
<span id="cb43-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>self.w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.b</span>
<span id="cb43-9">    </span>
<span id="cb43-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _backward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, inp):</span>
<span id="cb43-11">        inp.g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._out.g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w.t()</span>
<span id="cb43-12">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w.g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> inp.t() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._out.g</span>
<span id="cb43-13">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.b.g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._out.g.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb43-14">        </span>
<span id="cb43-15">        </span>
<span id="cb43-16"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Relu(NNModule):</span>
<span id="cb43-17">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x):</span>
<span id="cb43-18">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> x.clamp_min(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>)</span>
<span id="cb43-19">    </span>
<span id="cb43-20">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _backward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, inp):</span>
<span id="cb43-21">        inp.g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (inp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._out.g</span>
<span id="cb43-22"></span>
<span id="cb43-23">    </span>
<span id="cb43-24"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> MSE(NNModule):</span>
<span id="cb43-25">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, pred, targ):</span>
<span id="cb43-26">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> (pred.squeeze(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>targ).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">pow</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>).mean()</span>
<span id="cb43-27">    </span>
<span id="cb43-28">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _backward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, pred, targ):</span>
<span id="cb43-29">        pred.g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (pred.squeeze() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> targ).unsqueeze(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> targ.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb43-30">        </span>
<span id="cb43-31">        </span>
<span id="cb43-32"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Model(NNModule):</span>
<span id="cb43-33">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, n_in, n_h, n_out):</span>
<span id="cb43-34">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb43-35">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.layers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [Linear(n_in, n_h), Relu(), Linear(n_h, n_out)]</span>
<span id="cb43-36">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MSE()                              <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># [4] &lt; and ^ are stored under _named_args</span></span>
<span id="cb43-37">        </span>
<span id="cb43-38">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x, y):</span>
<span id="cb43-39">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> l <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.layers: x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> l(x)</span>
<span id="cb43-40">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loss(x, y)</span>
<span id="cb43-41">    </span>
<span id="cb43-42">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> backward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb43-43">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loss.backward()</span>
<span id="cb43-44">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> l <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">reversed</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.layers): l.backward()</span></code></pre></div>
</div>
<p>And now we can indeed call <code>parameters</code> on both the model as well as on individual layers:</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1">m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Model(n_in, n_h, n_out)</span>
<span id="cb44-2">[p.shape <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> m.parameters()]</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>[torch.Size([784, 50]), torch.Size([50]), torch.Size([50, 1]), torch.Size([1])]</code></pre>
</div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1">[p.shape <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> Linear(n_in, n_h).parameters()]</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>[torch.Size([784, 50]), torch.Size([50])]</code></pre>
</div>
</div>
<p>Let’s fit with our new training loop:</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb48-1">fit(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>epoch=0 | loss=2118316928.0
epoch=1 | loss=195283376.0
epoch=2 | loss=18002500.0
epoch=3 | loss=1659511.5
epoch=4 | loss=152958.9</code></pre>
</div>
</div>
</section>
<section id="third-refactor-use-nn.module" class="level2">
<h2 class="anchored" data-anchor-id="third-refactor-use-nn.module">Third refactor: use <code>nn.Module</code></h2>
<p>Finally we are in a position to use PyTorch’s <code>nn.Module</code>, since we understand all of it’s behavior! We can simplify:</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb50-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> nn</span>
<span id="cb50-2"></span>
<span id="cb50-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Model(nn.Module):</span>
<span id="cb50-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, n_in, n_h, n_out):</span>
<span id="cb50-5">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb50-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.layers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [nn.Linear(n_in, n_h), nn.ReLU(), nn.Linear(n_h, n_out)]</span>
<span id="cb50-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i,l <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.layers):               <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ^ we use the nn.Linear and nn.ReLU from PyTorch</span></span>
<span id="cb50-8">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.add_module(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'layer_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>, l)             <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># we need to register the modules explicitly</span></span>
<span id="cb50-9">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.MSELoss()                         <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># we use the MSELoss from PyTorch</span></span>
<span id="cb50-10">        </span>
<span id="cb50-11">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x, y):</span>
<span id="cb50-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> l <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.layers: x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> l(x)</span>
<span id="cb50-13">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loss(x.squeeze(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), y)</span></code></pre></div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb51-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Autograd needs all tensors to be float</span></span>
<span id="cb51-2">x_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_train.to(torch.float32)</span>
<span id="cb51-3">y_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y_train.to(torch.float32)</span>
<span id="cb51-4">m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Model(n_in, n_h, n_out)</span></code></pre></div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb52-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> fit(epochs):</span>
<span id="cb52-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> epoch <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(epochs):</span>
<span id="cb52-3">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(x_train), bs):</span>
<span id="cb52-4">            xb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_train[i:i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>bs]</span>
<span id="cb52-5">            yb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y_train[i:i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>bs]</span>
<span id="cb52-6"></span>
<span id="cb52-7">            loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> m(xb, yb)</span>
<span id="cb52-8">            loss.backward()</span>
<span id="cb52-9"></span>
<span id="cb52-10">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb52-11">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> m.parameters():</span>
<span id="cb52-12">                    p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> p.grad</span>
<span id="cb52-13">                m.zero_grad()</span>
<span id="cb52-14">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>epoch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> | </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>loss<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.1f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div>
</div>
</section>
<section id="fourth-refactor-nn.modulelist-and-nn.sequential" class="level2">
<h2 class="anchored" data-anchor-id="fourth-refactor-nn.modulelist-and-nn.sequential">Fourth refactor: <code>nn.ModuleList</code> and <code>nn.Sequential</code></h2>
<p>To simplify the storing of the layers array and the registration of the modules, we can use <code>nn.ModuleList</code>. Up till now, we compute the loss as part of the forward pass of the model, let’s change that and let the model return the predictions. With these predictions we can now also compute a metric: accuracy, which will represent the percentage of images correctly classified by the model.</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb53-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Model(nn.Module):</span>
<span id="cb53-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, n_in, n_h, n_out):</span>
<span id="cb53-3">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb53-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.layers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.ModuleList([nn.Linear(n_in, n_h), nn.ReLU(), nn.Linear(n_h, n_out)])</span>
<span id="cb53-5">        </span>
<span id="cb53-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x, y):</span>
<span id="cb53-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> l <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.layers: x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> l(x)</span>
<span id="cb53-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> x</span></code></pre></div>
</div>
<p>This turns out to be such an elementary operation, that PyTorch has a module for it: <code>nn.Sequential</code>.</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb54-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn.functional <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> F</span>
<span id="cb54-2"></span>
<span id="cb54-3"></span>
<span id="cb54-4">layers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [nn.Linear(n_in,n_h), nn.ReLU(), nn.Linear(n_h, n_out)]</span>
<span id="cb54-5">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Sequential(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>layers)</span></code></pre></div>
</div>
<p>And let’s update our training loop as we mentioned:</p>
<ul>
<li>The loss needs to be computed separately, since we took it out of the model</li>
<li>Let’s now also use a loss function that actually makes sense: cross entropy loss instead of MSE</li>
<li>We then need to switch back to using 10 output activations conforming with the 10 categories</li>
</ul>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb55-1">n_out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb55-2"></span>
<span id="cb55-3">layers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [nn.Linear(n_in,n_h), nn.ReLU(), nn.Linear(n_h, n_out)]</span>
<span id="cb55-4">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Sequential(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>layers)</span></code></pre></div>
</div>
<p>Let’s also add a metric: accuracy, to see how our model is doing. For this, we need to find the class that our model predicts. However, the model is outputting not a single class, it outputs <em>logits</em>: the unweighted predictions for any of the 10 classes. When applying a softmax to these logits, we turn them into 10 probabilities: the probability that our model assigns to each class.</p>
<p>When computing the accuracy, we don’t actually just use the logits instead of the probabilities, since the softmax is a monotonically increasing we largest logit, will also have the largest probability.</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb56-1">x0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_train[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb56-2">logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(x0)</span>
<span id="cb56-3"></span>
<span id="cb56-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>logits<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)                           <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Logit output of the model</span></span>
<span id="cb56-5"></span>
<span id="cb56-6">probs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> logits.softmax(dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb56-7"></span>
<span id="cb56-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>probs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)                            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># class probabilites</span></span>
<span id="cb56-9"></span>
<span id="cb56-10"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">assert</span> torch.allclose(probs.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(),            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># probabilities sum to 1</span></span>
<span id="cb56-11">                      torch.tensor(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>))      </span>
<span id="cb56-12"></span>
<span id="cb56-13"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">assert</span> torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span>(probs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)                   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># no negative probabilities</span></span>
<span id="cb56-14"></span>
<span id="cb56-15"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">assert</span> (logits.argmax() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> probs.argmax())</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>logits=tensor([-0.1345,  0.1549, -0.0635,  0.0619,  0.0516, -0.0358,  0.1625, -0.0322,
        -0.0614,  0.1931], grad_fn=&lt;AddBackward0&gt;)
probs=tensor([0.0844, 0.1127, 0.0906, 0.1027, 0.1016, 0.0931, 0.1136, 0.0935, 0.0908,
        0.1171], grad_fn=&lt;SoftmaxBackward0&gt;)</code></pre>
</div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb58-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> accuracy(preds, targs):</span>
<span id="cb58-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> (preds.argmax(dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> targs).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>().mean()</span></code></pre></div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb59-1">loss_func <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.cross_entropy</span>
<span id="cb59-2">y_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y_train.to(torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">long</span>)</span>
<span id="cb59-3"></span>
<span id="cb59-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> epoch <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(epochs):</span>
<span id="cb59-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(x_train), bs):</span>
<span id="cb59-6">        xb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_train[i:i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>bs]</span>
<span id="cb59-7">        yb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y_train[i:i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>bs]</span>
<span id="cb59-8"></span>
<span id="cb59-9">        preds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(xb)</span>
<span id="cb59-10">        acc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> accuracy(preds, yb)</span>
<span id="cb59-11">        loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> loss_func(preds, yb)</span>
<span id="cb59-12">        loss.backward()</span>
<span id="cb59-13"></span>
<span id="cb59-14">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb59-15">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> model.parameters():</span>
<span id="cb59-16">                p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> p.grad</span>
<span id="cb59-17">            model.zero_grad()</span>
<span id="cb59-18">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>epoch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> | </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>loss<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> | </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>acc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>epoch=0 | loss=1.071 | acc=0.684
epoch=1 | loss=0.992 | acc=0.681
epoch=2 | loss=0.934 | acc=0.688
epoch=3 | loss=0.889 | acc=0.697
epoch=4 | loss=0.853 | acc=0.706</code></pre>
</div>
</div>
</section>
<section id="fifth-refactor-add-an-optimizer" class="level2">
<h2 class="anchored" data-anchor-id="fifth-refactor-add-an-optimizer">Fifth refactor: add an Optimizer</h2>
<p>We can further refactor the model by adding an Optimizer, this is an object that will have access to the <code>parameters</code> and does the updating of the weights (<code>step</code>) and zeroing the gradient. Most notably, we want to go from:</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb61" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb61-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ...</span></span>
<span id="cb61-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># with torch.no_grad():</span></span>
<span id="cb61-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     for p in model.parameters():</span></span>
<span id="cb61-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#         p -= lr * p.grad</span></span>
<span id="cb61-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     model.zero_grad()</span></span>
<span id="cb61-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ...</span></span></code></pre></div>
</div>
<p>to:</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb62" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb62-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># opt.step()</span></span>
<span id="cb62-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># opt.zero_grad()</span></span></code></pre></div>
</div>
<p>So that the training loop becomes:</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb63" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb63-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> fit(epochs):</span>
<span id="cb63-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> epoch <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(epochs):</span>
<span id="cb63-3">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(x_train), bs):</span>
<span id="cb63-4">            xb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_train[i:i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>bs]</span>
<span id="cb63-5">            yb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y_train[i:i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>bs]</span>
<span id="cb63-6"></span>
<span id="cb63-7">            preds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(xb)</span>
<span id="cb63-8">            acc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> accuracy(preds, yb)</span>
<span id="cb63-9">            loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> loss_func(preds, yb)</span>
<span id="cb63-10">            loss.backward()</span>
<span id="cb63-11"></span>
<span id="cb63-12">            opt.step()                       <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># optimizer takes care of the weight update</span></span>
<span id="cb63-13">            opt.zero_grad()                  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># as well as zeroing the grad</span></span>
<span id="cb63-14">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>epoch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> | </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>loss<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> | </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>acc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div>
</div>
<p>So we introduce the Optimizer, which has exactly these two methods:</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb64" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb64-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Optimizer():</span>
<span id="cb64-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, params, lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>):</span>
<span id="cb64-3">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(params)</span>
<span id="cb64-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lr</span>
<span id="cb64-5">        </span>
<span id="cb64-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> step(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb64-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb64-8">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.params: p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> p.grad</span>
<span id="cb64-9">        </span>
<span id="cb64-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> zero_grad(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb64-11">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb64-12">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.params: p.grad.zero_()</span></code></pre></div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb65" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb65-1">layers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [nn.Linear(n_in,n_h), nn.ReLU(), nn.Linear(n_h, n_out)]</span>
<span id="cb65-2">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Sequential(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>layers)</span>
<span id="cb65-3">opt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Optimizer(model.parameters(), lr)</span></code></pre></div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb66" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb66-1">fit(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>epoch=0 | loss=2.074 | acc=0.447
epoch=1 | loss=1.832 | acc=0.582
epoch=2 | loss=1.571 | acc=0.653
epoch=3 | loss=1.354 | acc=0.676
epoch=4 | loss=1.195 | acc=0.673</code></pre>
</div>
</div>
<p>The optimizer we just created is basically the <code>SGD</code> optimizer from PyTorch so let’s use that:</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb68" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb68-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> get_model():</span>
<span id="cb68-2">    layers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [nn.Linear(n_in, n_h), nn.ReLU(), nn.Linear(n_h, n_out)]</span>
<span id="cb68-3">    model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Sequential(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>layers)</span>
<span id="cb68-4">    </span>
<span id="cb68-5">    opt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.optim.SGD(model.parameters(), lr)</span>
<span id="cb68-6">    </span>
<span id="cb68-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> model, opt</span>
<span id="cb68-8"></span>
<span id="cb68-9">model, opt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_model()</span>
<span id="cb68-10">fit(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>epoch=0 | loss=2.026 | acc=0.456
epoch=1 | loss=1.751 | acc=0.559
epoch=2 | loss=1.502 | acc=0.605
epoch=3 | loss=1.314 | acc=0.630
epoch=4 | loss=1.179 | acc=0.635</code></pre>
</div>
</div>
</section>
<section id="end" class="level2">
<h2 class="anchored" data-anchor-id="end">End</h2>
<p>We have come a long way, and covered a lot of ground. We have seen many of the fundamental components of training a neural network: the data, a simple model, training loops, loss functions, metrics and optimizers. We have seen why things like <code>nn.Module</code> exist, and understand it’s behavior. Furthermore, we have seen that the need for <code>nn.Module</code> and <code>torch.optim</code> comes out of the need for simplifying things in the training loop.</p>
<p>In the next post, we will get to datasets and dataloaders as a way to further improve the training loop, and we will start adding our first things into the <code>nntrain</code> library 🕺.</p>


</section>

 ]]></description>
  <category>code</category>
  <category>neural network</category>
  <category>deep learning</category>
  <guid>https://lucasvw.github.io/posts/08_nntrain_setup/index.html</guid>
  <pubDate>Wed, 09 Aug 2023 00:00:00 GMT</pubDate>
  <media:content url="https://lucasvw.github.io/posts/08_nntrain_setup/image.png" medium="image" type="image/png" height="116" width="144"/>
</item>
<item>
  <title>Introduction to Stable Diffusion - Code</title>
  <dc:creator>Lucas van Walstijn</dc:creator>
  <link>https://lucasvw.github.io/posts/07_stable_diffusion_code/index.html</link>
  <description><![CDATA[ 



<p>In the previous blog <a href="https://lucasvw.github.io/posts/06_stable_diffusion_basics/">post</a>, the main components and some intuition behind Stable Diffusion were introduced. Now, let’s see how we can use the HuggingFace diffusers library to generate images. The content of this blog post is based on <a href="https://course.fast.ai/Lessons/lesson9.html">Lesson 9</a> and <a href="https://course.fast.ai/Lessons/lesson10.html">Lesson 10</a> of Deep Learning for Coders. The end-to-end pipeline is very practical and easy to use, it’s basically a one-liner. We create a diffusion pipeline by downloading pre-trained models from a repo in the HuggingFace hub. Then, we can call this <code>pipe</code> object with a certain prompt:</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># pip install diffusers==0.12.1</span></span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># pip install accelerate</span></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># pip install transformers==4.25.1</span></span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchvision <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> transforms <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> tfms</span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb1-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> diffusers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> StableDiffusionPipeline</span>
<span id="cb1-10"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> PIL <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Image</span>
<span id="cb1-11"></span>
<span id="cb1-12">num_inference_steps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span></span>
<span id="cb1-13">batch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-14"></span>
<span id="cb1-15">pipe <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> StableDiffusionPipeline.from_pretrained(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CompVis/stable-diffusion-v1-4"</span>).to(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cuda"</span>)</span>
<span id="cb1-16"></span>
<span id="cb1-17">prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Homer from the Simpsons on his roadbike climbing a mountain in the Pyrenees"</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"44fb9aaa15514337bfd8381b8c89186d","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>The config attributes {'scaling_factor': 0.18215} were passed to AutoencoderKL, but are not expected and will be ignored. Please verify your config.json configuration file.</code></pre>
</div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">torch.manual_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">114</span>)</span>
<span id="cb3-2">pipe(prompt, num_inference_steps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>num_inference_steps, guidance_scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">7.5</span>).images[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"6a59a45858794244a0e7e5a06fc5db01","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://lucasvw.github.io/posts/07_stable_diffusion_code/index_files/figure-html/cell-3-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>Not bad, but not great either. Let’s dive one layer deeper, and create the components described in the previous <a href="https://lucasvw.github.io/posts/06_stable_diffusion_basics/">post</a>: the Unet, the autoencoder, text encoder and noise scheduler:</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> diffusers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> AutoencoderKL, LMSDiscreteScheduler, UNet2DConditionModel</span>
<span id="cb4-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> transformers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> CLIPTextModel, CLIPTokenizer, logging</span>
<span id="cb4-3"></span>
<span id="cb4-4">logging.set_verbosity_error()</span>
<span id="cb4-5"></span>
<span id="cb4-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Autoencoder, to go from image -&gt; latents (encoder) and back (decoder)</span></span>
<span id="cb4-7">vae <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AutoencoderKL.from_pretrained(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CompVis/stable-diffusion-v1-4"</span>, subfolder<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"vae"</span>).to(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cuda"</span>)</span>
<span id="cb4-8"></span>
<span id="cb4-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># UNet, to predict the noise (latents) from noisy image (latents)</span></span>
<span id="cb4-10">unet <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> UNet2DConditionModel.from_pretrained(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CompVis/stable-diffusion-v1-4"</span>, subfolder<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"unet"</span>).to(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cuda"</span>)</span>
<span id="cb4-11"></span>
<span id="cb4-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Tokenizer and Text encoder to create prompt embeddings</span></span>
<span id="cb4-13">tokenizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CLIPTokenizer.from_pretrained(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"openai/clip-vit-large-patch14"</span>)</span>
<span id="cb4-14">text_encoder <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CLIPTextModel.from_pretrained(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"openai/clip-vit-large-patch14"</span>).to(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cuda"</span>)</span>
<span id="cb4-15"></span>
<span id="cb4-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The noise scheduler</span></span>
<span id="cb4-17">scheduler <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LMSDiscreteScheduler(beta_start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.00085</span>, beta_end<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.012</span>, beta_schedule<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"scaled_linear"</span>, num_train_timesteps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)</span>
<span id="cb4-18">scheduler.set_timesteps(num_inference_steps)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>The config attributes {'scaling_factor': 0.18215} were passed to AutoencoderKL, but are not expected and will be ignored. Please verify your config.json configuration file.</code></pre>
</div>
</div>
<p>To use these components, we have to first tokenize the prompt. Tokenization is nothing more then transforming each word of the prompt into it’s associated integer according to a “vocabulary”. The “vocabulary” is the mapping of words to integers and is thus generally quite large.</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">text_input <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokenizer(prompt,               <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the prompt we want to tokenize</span></span>
<span id="cb6-2">                       padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"max_length"</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># pad the tokenized input to the max length</span></span>
<span id="cb6-3">                       return_tensors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pt"</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># return PyTorch tensors</span></span>
<span id="cb6-4">text_input.input_ids</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>tensor([[49406, 16931,   633,   518, 21092,   525,   787,  4370,  3701,  9877,
           320,  3965,   530,   518, 39744, 49407, 49407, 49407, 49407, 49407,
         49407, 49407, 49407, 49407, 49407, 49407, 49407, 49407, 49407, 49407,
         49407, 49407, 49407, 49407, 49407, 49407, 49407, 49407, 49407, 49407,
         49407, 49407, 49407, 49407, 49407, 49407, 49407, 49407, 49407, 49407,
         49407, 49407, 49407, 49407, 49407, 49407, 49407, 49407, 49407, 49407,
         49407, 49407, 49407, 49407, 49407, 49407, 49407, 49407, 49407, 49407,
         49407, 49407, 49407, 49407, 49407, 49407, 49407]])</code></pre>
</div>
</div>
<p>Above we see the integers that are associated with each word in our prompt. We can decode the integers back into words and see if it matches our prompt. Let’s have a look at the first 5 tokens:</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">[tokenizer.decode(token) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> token <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> text_input.input_ids[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]][:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>['&lt;|startoftext|&gt;', 'homer', 'from', 'the', 'simpsons']</code></pre>
</div>
</div>
<p>We see that all capital letters have been removed by the tokenization, and a special token is inserted at the beginning of the prompt. Also, we see the integer <code>49407</code> is being used to pad our input to the maximum length:</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">tokenizer.decode(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">49407</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>'&lt;|endoftext|&gt;'</code></pre>
</div>
</div>
<p>Next, we will pass these tokens through the text-encoder to turn each token into an embedding vector. Since we have 77 tokens and the embeddings are of size 768, this will be a tensor of shape <code>[77, 768]</code>.</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">text_embeddings <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> text_encoder(text_input.input_ids.to(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cuda"</span>))[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb12-2">text_embeddings.shape</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>torch.Size([1, 77, 768])</code></pre>
</div>
</div>
<p>When generating a completely new image, we start with a fully random noisy latent, so let’s create one:</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">torch.manual_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1024</span>)</span>
<span id="cb14-2">latents <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((batch_size,              <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># batch size: 1</span></span>
<span id="cb14-3">                       unet.config.in_channels, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># input channels of the unet: 4</span></span>
<span id="cb14-4">                       unet.config.sample_size, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># height dimension of the unet: 64</span></span>
<span id="cb14-5">                       unet.config.sample_size) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># width dimension of the unet: 64</span></span>
<span id="cb14-6">                     ).to(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cuda"</span>)               <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># put the tensor on the GPU</span></span>
<span id="cb14-7"></span>
<span id="cb14-8">latents <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> latents <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> scheduler.init_noise_sigma  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># scale the noise</span></span>
<span id="cb14-9"></span>
<span id="cb14-10">latents.shape</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>torch.Size([1, 4, 64, 64])</code></pre>
</div>
</div>
<p>The latents thus carry 4 channels and are of size 64 by 64. Let’s pass this latent iteratively through the Unet, each time subtracting partly the amount of predicted noise (the output of the Unet)</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i, t <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(scheduler.timesteps):</span>
<span id="cb16-2">    inputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> latents</span>
<span id="cb16-3">    inputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> scheduler.scale_model_input(inputs, t)</span>
<span id="cb16-4"></span>
<span id="cb16-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># predict the noise </span></span>
<span id="cb16-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.no_grad(): </span>
<span id="cb16-7">        pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> unet(inputs, t, encoder_hidden_states<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>text_embeddings).sample</span>
<span id="cb16-8"></span>
<span id="cb16-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># update the latents by removing the predicted noise according to the noise schedule</span></span>
<span id="cb16-10">    latents <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> scheduler.step(pred, t, latents).prev_sample</span></code></pre></div>
</div>
<p>Let’s visualize the four channels of this latent representation in grey-scale:</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">fig, axs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span>
<span id="cb17-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> c <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>):</span>
<span id="cb17-3">    axs[c].imshow(latents[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][c].cpu(), cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Greys'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://lucasvw.github.io/posts/07_stable_diffusion_code/index_files/figure-html/cell-11-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>To transform the latent representation to full-size images, we can use the decoder of the VAE. Note that when we do that, we move from a tensor of shape <code>[4, 64, 64]</code> to <code>[3, 512, 512]</code>:</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(latents.shape, vae.decode(latents).sample.shape)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>torch.Size([1, 4, 64, 64]) torch.Size([1, 3, 512, 512])</code></pre>
</div>
</div>
<p>And let’s visualize the result:</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#scale back according to the VAE paper</span></span>
<span id="cb20-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.no_grad(): image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> vae.decode(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.18215</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> latents).sample</span>
<span id="cb20-3"></span>
<span id="cb20-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># move tensor to numpy</span></span>
<span id="cb20-5">image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> image[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].detach().cpu().permute(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>).numpy()</span>
<span id="cb20-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># scale the values to 0-255</span></span>
<span id="cb20-7">image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ((image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>).clip(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>().astype(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"uint8"</span>)</span>
<span id="cb20-8">Image.fromarray(image)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://lucasvw.github.io/posts/07_stable_diffusion_code/index_files/figure-html/cell-13-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>Unfortunately, the result looks very bad and especially much worse then our one-liner. The main reason for this, is that the <code>StableDiffusionPipeline</code> is using something called Classifier Free Diffusion Guidance. So let’s have a look at that. But before we do, let’s add two code snippets to transfrom from the latent representation to the full size image representation and back. We will do this a couple of times, so it helps to keep the code a bit cleaner:</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> latents_to_image(latent):</span>
<span id="cb21-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.no_grad(): </span>
<span id="cb21-3">        image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> vae.decode(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.18215</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> latent).sample</span>
<span id="cb21-4"></span>
<span id="cb21-5">    image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> image[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].detach().cpu().permute(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>).numpy()</span>
<span id="cb21-6">    image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ((image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>).clip(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>().astype(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"uint8"</span>)</span>
<span id="cb21-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> Image.fromarray(image)</span>
<span id="cb21-8">    </span>
<span id="cb21-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> image_to_latent(input_im):</span>
<span id="cb21-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb21-11">        latent <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> vae.encode(torch.Tensor(np.transpose(np.array(input_im) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">255.</span>, (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))).unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>).to(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cuda'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb21-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.18215</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (latent).latent_dist.sample()</span></code></pre></div>
</div>
<section id="classifier-free-diffusion-guidance" class="level2">
<h2 class="anchored" data-anchor-id="classifier-free-diffusion-guidance">Classifier Free Diffusion Guidance</h2>
<p>Classifier Free Guidance refers to a technique in which two images are being constructed at the same time from the same latent. One of the images is being reconstructed based on the specified prompt (conditional generation), the other image is being generated by an empty prompt (unconditional generation). By mixing the two images in the process according to a parameter (called the guidance-scale) the generated image for the prompt is going to look much better:</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">torch.manual_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3016</span>)</span>
<span id="cb22-2"></span>
<span id="cb22-3">cond_input <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokenizer(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Homer from the Simpsons on his roadbike climbing a mountain in the Pyrenees"</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"max_length"</span>, return_tensors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pt"</span>) </span>
<span id="cb22-4">cond_embeddings <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> text_encoder(cond_input.input_ids.to(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cuda"</span>))[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb22-5"></span>
<span id="cb22-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create embeddings for the unconditioned process</span></span>
<span id="cb22-7">uncond_input <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokenizer(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"max_length"</span>, return_tensors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pt"</span>) </span>
<span id="cb22-8">uncond_embeddings <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> text_encoder(uncond_input.input_ids.to(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cuda"</span>))[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb22-9"></span>
<span id="cb22-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Concatenate the embeddings</span></span>
<span id="cb22-11">embeddings <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.cat([cond_embeddings, uncond_embeddings])</span>
<span id="cb22-12"></span>
<span id="cb22-13">guidance_scale <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">7.5</span></span>
<span id="cb22-14"></span>
<span id="cb22-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a "fresh" random latent to start with</span></span>
<span id="cb22-16">latents <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((batch_size, unet.config.in_channels, unet.config.sample_size, unet.config.sample_size)).to(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cuda"</span>)               </span>
<span id="cb22-17">latents <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> latents <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> scheduler.init_noise_sigma</span>
<span id="cb22-18"></span>
<span id="cb22-19"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i, t <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(scheduler.timesteps):</span>
<span id="cb22-20">    inputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.cat([latents, latents]) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># concatenate the latents</span></span>
<span id="cb22-21">    inputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> scheduler.scale_model_input(inputs, t)</span>
<span id="cb22-22"></span>
<span id="cb22-23">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># predict the noise </span></span>
<span id="cb22-24">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.no_grad(): </span>
<span id="cb22-25">        pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> unet(inputs, t, encoder_hidden_states<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>embeddings).sample</span>
<span id="cb22-26">    </span>
<span id="cb22-27">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># pull both images apart again</span></span>
<span id="cb22-28">    pred_cond, pred_uncond <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pred.chunk(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb22-29">    </span>
<span id="cb22-30">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># mix the results according to the guidance scale parameter</span></span>
<span id="cb22-31">    pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pred_uncond <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> guidance_scale <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (pred_cond <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> pred_uncond)</span>
<span id="cb22-32"></span>
<span id="cb22-33">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># update the latents by removing the predicted noise according to the noise schedule</span></span>
<span id="cb22-34">    latents <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> scheduler.step(pred, t, latents).prev_sample</span>
<span id="cb22-35">    </span>
<span id="cb22-36">latents_to_image(latents)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://lucasvw.github.io/posts/07_stable_diffusion_code/index_files/figure-html/cell-15-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>Much better! As you can see, Classifier Free Guidance is a simple technique but it works very well. This morning (03-07-2023) I saw a tweet that introduced the same concept to the world of Large Language Models (LLMs):</p>
<p></p><div id="tweet-66509"></div><script>tweet={"url":"https:\/\/twitter.com\/_akhaliq\/status\/1675676002213584897","author_name":"AK","author_url":"https:\/\/twitter.com\/_akhaliq","html":"\u003Cblockquote class=\"twitter-tweet\" align=\"center\"\u003E\u003Cp lang=\"en\" dir=\"ltr\"\u003EStay on topic with Classifier-Free Guidance\u003Cbr\u003E\u003Cbr\u003Epaper page: \u003Ca href=\"https:\/\/t.co\/yYpAXON3ep\"\u003Ehttps:\/\/t.co\/yYpAXON3ep\u003C\/a\u003E\u003Cbr\u003E\u003Cbr\u003EClassifier-Free Guidance (CFG) has recently emerged in text-to-image generation as a lightweight technique to encourage prompt-adherence in generations. In this work, we demonstrate that CFG can be… \u003Ca href=\"https:\/\/t.co\/qCZHWKw7NO\"\u003Epic.twitter.com\/qCZHWKw7NO\u003C\/a\u003E\u003C\/p\u003E&mdash; AK (@_akhaliq) \u003Ca href=\"https:\/\/twitter.com\/_akhaliq\/status\/1675676002213584897?ref_src=twsrc%5Etfw\"\u003EJuly 3, 2023\u003C\/a\u003E\u003C\/blockquote\u003E\n\u003Cscript async src=\"https:\/\/platform.twitter.com\/widgets.js\" charset=\"utf-8\"\u003E\u003C\/script\u003E\n","width":550,"height":null,"type":"rich","cache_age":"3153600000","provider_name":"Twitter","provider_url":"https:\/\/twitter.com","version":"1.0"};document.getElementById("tweet-66509").innerHTML = tweet["html"];</script><p></p>
</section>
<section id="negative-prompt" class="level2">
<h2 class="anchored" data-anchor-id="negative-prompt">Negative Prompt</h2>
<p>As mentioned, the unconditional image with Classifier Free Guidance is created from an empty prompt. It turns out that we can use the prompt of this second image as a so-called negative prompt. If there are certain elements we don’t want to see in our image, we can specify it in this prompt.</p>
<p>We can see this by rewriting the Classifier Free Guidance equation:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7D%0Ap%20&amp;=%20p_%7Buc%7D%20+%20g%20(p_%7Bc%7D%20-%20p_%7Buc%7D)%20%5C%5C%0Ap%20&amp;=%20g%20p_%7Bc%7D%20+%20(1%20-%20g)%20p_%7Buc%7D%20%5C%5C%0A%5Cend%7Balign%7D"></p>
<p>So with a guidance scale value larger than 1, the unconditional prediction <img src="https://latex.codecogs.com/png.latex?p_%7Buc%7D"> is being subtracted from the conditional prediction <img src="https://latex.codecogs.com/png.latex?p_c">, which has the effect of removing the concept from the conditional image.</p>
<p>An example of Homer Simpson eating lunch:</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">cond_input <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokenizer(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Homer Simpson eating lunch"</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"max_length"</span>, return_tensors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pt"</span>) </span>
<span id="cb23-2">cond_embeddings <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> text_encoder(cond_input.input_ids.to(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cuda"</span>))[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb23-3"></span>
<span id="cb23-4">uncond_input <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokenizer(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"max_length"</span>, return_tensors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pt"</span>) </span>
<span id="cb23-5">uncond_embeddings <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> text_encoder(uncond_input.input_ids.to(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cuda"</span>))[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span></code></pre></div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">torch.manual_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">105</span>)</span>
<span id="cb24-2"></span>
<span id="cb24-3">embeddings <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.cat([cond_embeddings, uncond_embeddings])</span>
<span id="cb24-4"></span>
<span id="cb24-5">guidance_scale <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">7.5</span></span>
<span id="cb24-6"></span>
<span id="cb24-7">latents <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((batch_size, unet.config.in_channels, unet.config.sample_size, unet.config.sample_size)).to(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cuda"</span>)               </span>
<span id="cb24-8">latents <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> latents <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> scheduler.init_noise_sigma</span>
<span id="cb24-9"></span>
<span id="cb24-10"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i, t <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(scheduler.timesteps):</span>
<span id="cb24-11">    inputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.cat([latents, latents]) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># concatenate the latents</span></span>
<span id="cb24-12">    inputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> scheduler.scale_model_input(inputs, t)</span>
<span id="cb24-13"></span>
<span id="cb24-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.no_grad(): </span>
<span id="cb24-15">        pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> unet(inputs, t, encoder_hidden_states<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>embeddings).sample</span>
<span id="cb24-16">    </span>
<span id="cb24-17">    pred_cond, pred_uncond <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pred.chunk(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb24-18">    </span>
<span id="cb24-19">    pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pred_uncond <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> guidance_scale <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (pred_cond <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> pred_uncond)</span>
<span id="cb24-20"></span>
<span id="cb24-21">    latents <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> scheduler.step(pred, t, latents).prev_sample</span>
<span id="cb24-22"></span>
<span id="cb24-23">latents_to_image(latents)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://lucasvw.github.io/posts/07_stable_diffusion_code/index_files/figure-html/cell-17-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>And removing the blue chair by using a negative prompt:</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">uncond_input <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokenizer(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue chair"</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"max_length"</span>, return_tensors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pt"</span>) </span>
<span id="cb25-2">uncond_embeddings <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> text_encoder(uncond_input.input_ids.to(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cuda"</span>))[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span></code></pre></div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">torch.manual_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">105</span>)</span>
<span id="cb26-2"></span>
<span id="cb26-3">embeddings <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.cat([cond_embeddings, uncond_embeddings])</span>
<span id="cb26-4"></span>
<span id="cb26-5">guidance_scale <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">7.5</span></span>
<span id="cb26-6"></span>
<span id="cb26-7">latents <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((batch_size, unet.config.in_channels, unet.config.sample_size, unet.config.sample_size)).to(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cuda"</span>)               </span>
<span id="cb26-8">latents <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> latents <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> scheduler.init_noise_sigma</span>
<span id="cb26-9"></span>
<span id="cb26-10"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i, t <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(scheduler.timesteps):</span>
<span id="cb26-11">    inputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.cat([latents, latents]) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># concatenate the latents</span></span>
<span id="cb26-12">    inputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> scheduler.scale_model_input(inputs, t)</span>
<span id="cb26-13"></span>
<span id="cb26-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.no_grad(): </span>
<span id="cb26-15">        pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> unet(inputs, t, encoder_hidden_states<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>embeddings).sample</span>
<span id="cb26-16">    </span>
<span id="cb26-17">    pred_cond, pred_uncond <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pred.chunk(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb26-18">    </span>
<span id="cb26-19">    pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pred_uncond <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> guidance_scale <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (pred_cond <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> pred_uncond)</span>
<span id="cb26-20"></span>
<span id="cb26-21">    latents <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> scheduler.step(pred, t, latents).prev_sample</span>
<span id="cb26-22"></span>
<span id="cb26-23">image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> latents_to_image(latents)</span>
<span id="cb26-24">image</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://lucasvw.github.io/posts/07_stable_diffusion_code/index_files/figure-html/cell-19-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>And gone is the blue chair! I must admit that this doesn’t always work as great as in this example, in fact I had to try out quite a lot of prompts in combination with negative prompts to find a good example for this post..</p>
</section>
<section id="image-to-image-generation" class="level2">
<h2 class="anchored" data-anchor-id="image-to-image-generation">Image-to-image generation</h2>
<p>Image-to-image generation is another super interesting process, in which we use both a prompt and an image to guide the generation process. This comes in handy, if for example we want to create a variant of an image we already have. Let’s say we have an awesome image of Homer eating a burger, and we want to have a similar image but instead we want Marge to eat the burger, or we want Homer to eat a slice of pizza instead. We can then feed both the correct promt as well as the already existing image to guide the image generation process even more.</p>
<p>The way this works, is by not starting with a completely random latent, but instead build a noisy latent of our existing image.</p>
<p>Let’s start with the image above and add some noise to it, for example by adding the noise for level 15 (we have 50 noise levels in total, so level 15 means that we still have 35 denoising steps to go):</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">latent <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> image_to_latent(image)</span>
<span id="cb27-2">noise_latent <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn_like(latent)</span>
<span id="cb27-3"></span>
<span id="cb27-4">sampling_step <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span></span>
<span id="cb27-5">noised_latent <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> scheduler.add_noise(latent, noise_latent, timesteps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.tensor([scheduler.timesteps[sampling_step]]))</span>
<span id="cb27-6"></span>
<span id="cb27-7">latents_to_pil(noised_latent)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://lucasvw.github.io/posts/07_stable_diffusion_code/index_files/figure-html/cell-20-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>If you squint with your eyes you can already see some structure, in the middle there is some yellow blob sitting around (eating lunch..). Let’s take this noisy latent, and do the remaining 35 denoising steps with a different prompt:</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">torch.manual_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">105</span>)</span>
<span id="cb28-2"></span>
<span id="cb28-3">cond_input <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokenizer(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Homer Simpson eating Hot Pot"</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"max_length"</span>, return_tensors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pt"</span>) </span>
<span id="cb28-4">cond_embeddings <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> text_encoder(cond_input.input_ids.to(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cuda"</span>))[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb28-5"></span>
<span id="cb28-6">uncond_input <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokenizer(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"max_length"</span>, return_tensors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pt"</span>) </span>
<span id="cb28-7">uncond_embeddings <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> text_encoder(uncond_input.input_ids.to(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cuda"</span>))[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb28-8"></span>
<span id="cb28-9">embeddings <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.cat([cond_embeddings, uncond_embeddings])</span>
<span id="cb28-10"></span>
<span id="cb28-11">guidance_scale <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">7.5</span></span>
<span id="cb28-12"></span>
<span id="cb28-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># We start with the noised_latent coming from the image, defined above</span></span>
<span id="cb28-14">latents <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> noised_latent</span>
<span id="cb28-15"></span>
<span id="cb28-16"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i, t <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(scheduler.timesteps):</span>
<span id="cb28-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># we only do the steps starting from the specified level</span></span>
<span id="cb28-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> sampling_step:</span>
<span id="cb28-19">        </span>
<span id="cb28-20">        inputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.cat([latents, latents])</span>
<span id="cb28-21">        inputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> scheduler.scale_model_input(inputs, t)</span>
<span id="cb28-22"></span>
<span id="cb28-23">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.no_grad(): </span>
<span id="cb28-24">            pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> unet(inputs, t, encoder_hidden_states<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>embeddings).sample</span>
<span id="cb28-25"></span>
<span id="cb28-26">        pred_cond, pred_uncond <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pred.chunk(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb28-27">        pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pred_uncond <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> guidance_scale <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (pred_cond <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> pred_uncond)</span>
<span id="cb28-28"></span>
<span id="cb28-29">        latents <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> scheduler.step(pred, t, latents).prev_sample</span>
<span id="cb28-30">    </span>
<span id="cb28-31">latents_to_image(latents)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://lucasvw.github.io/posts/07_stable_diffusion_code/index_files/figure-html/cell-21-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>This image is very similar to what we started with. Color scheme, composition and camera angle are all the same. At the same time, the prompt is also reflected by a change of dishes on the table.</p>
<p>And that’s it, that’s image-to-image generation. As you can see, it’s nothing deeply complicated, it’s just a smart way to re-use the components we have already seen.</p>
<p>I hope this blog post shows how the components that are introduced in the previous <a href="https://lucasvw.github.io/posts/06_stable_diffusion_basics/">post</a>, translate to code. The examples shown here, only touch upon what can be achieved. In fact, the lessons upon which this post is based show a lot more interesting concepts such as textual inversion. If you are interested, have a look <a href="https://course.fast.ai">here</a></p>


</section>

 ]]></description>
  <category>generative</category>
  <category>stable diffusion</category>
  <category>diffusers</category>
  <category>code</category>
  <guid>https://lucasvw.github.io/posts/07_stable_diffusion_code/index.html</guid>
  <pubDate>Mon, 03 Jul 2023 00:00:00 GMT</pubDate>
  <media:content url="https://lucasvw.github.io/posts/07_stable_diffusion_code/image.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Introduction to Stable Diffusion - Concepts</title>
  <dc:creator>Lucas van Walstijn</dc:creator>
  <link>https://lucasvw.github.io/posts/06_stable_diffusion_basics/index.html</link>
  <description><![CDATA[ 



<p>Stable Diffusion, a generative deep learning algorithm developed in 2022, is capable of creating images from prompts. For example, when presented the prompt: <strong>A group of people having lunch on the moon</strong>, the algorithm creates the following image:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lucasvw.github.io/posts/06_stable_diffusion_basics/image.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>And although this image isn’t perfect, it’s pretty amazing that it took less then 30 seconds to create this image. The algorithm “imagined” that people on the moon should be wearing space suits, and that lunch is generally eaten in a sitting position and around a table. Also, the surroundings look indeed pretty moonish. Not bad at all!</p>
<p>In this post, we will have a look at the main components involved in creating this image, and follows largely the steps of <a href="https://course.fast.ai/Lessons/lesson9.html">Lesson 9 of Deep Learning for Coders</a>.</p>
<section id="intuition" class="level2">
<h2 class="anchored" data-anchor-id="intuition">Intuition</h2>
<p>Consider some kind of black box system that takes some input data, and based on it creates some output data. Let’s say, it takes an image of a handwritten digit as input, and outputs the probability that the image is indeed a hand written digit. Visually something like this:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lucasvw.github.io/posts/06_stable_diffusion_basics/intuition-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>In statistics, we would call this a probability density function. It’s a function that takes data as input, and gives the probability that</p>
<ul>
<li>if the input data is coming indeed from the distribution,</li>
<li>what’s the probability that we see this data?</li>
</ul>
<p>Applied to our use-case: if the presented image is indeed from the distribution (of images) that represent hand written digits, what’s the probability that we observe the presented image?</p>
<p>With such a system, we could start with an image made up of pure noise and iteratively do:</p>
<ol type="1">
<li>get the probability <img src="https://latex.codecogs.com/png.latex?p_0"> of the image being a handwritten digit from the black box system</li>
<li>change the value of one of the pixels at random</li>
<li>get the new probability <img src="https://latex.codecogs.com/png.latex?p_1"> whether the image is a handwritten digit from the black box system</li>
<li>when <img src="https://latex.codecogs.com/png.latex?p_1%20%3E%20p_0"> update the image with the changed pixel value</li>
</ol>
<p>When following this procedure long enough and thus updating pixel for pixel, we would gradually change all the values of our pixels of our image, until eventually it will start to resemble a handwritten digit.</p>
<p>In principle, this is the simple intuition behind stable diffusion.</p>
</section>
<section id="the-main-component-unet" class="level2">
<h2 class="anchored" data-anchor-id="the-main-component-unet">The main component: Unet</h2>
<p>So how are we going to create this system that will return the probability that an image is depicting a handwritten digit? Let’s try to create a model, that will do so. To get the training data, we need lots of images that depict handwritten digits. Something like this:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lucasvw.github.io/posts/06_stable_diffusion_basics/mnist.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Since these images represent actual hand-written digits, the system will need to output a probability close to 1 for these images. But how do we get images that “somewhat” or “rarely” represent handwritten digits and are associated with lower probability values? We somehow have to “crappify” these existing images. We can do this by using these same images and sprinkle them with different amounts of noise. The more noise we add, the less the image will resemble a handwritten digit. Visually:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lucasvw.github.io/posts/06_stable_diffusion_basics/intuition-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Now we can train a network which we feed the <em>noisified images</em> as input and use the <em>noise image</em> as label. So instead of predicting the probability that an image depicts a handwritten digit, the model will predict the noise. By using a simple MSE loss on the actual noise (labels) and the predictions the model will learn how to predict the noise from looking at a noisified images.</p>
<p>The idea behind this model is that once this model is trained, we could run inference on some random noise. The model will give us a prediction of all the noise in the image, which when removed from the input, renders an image of a digit.</p>
<p>It turns out that this process works much better if, instead of removing all the noise that was predicted by the model at once, we just remove a little bit of the noise that was predicted. This way, we end up with an image which is just a bit less noisy then what we started with. We then feed this less noisy image again into our network, and thus iteratively remove more and more noise from the image, until after a certain amount of steps (50 for example) we end-up with an image that is free of noise.</p>
<p>One model architecture that is takes images as input and also outputs images is called a Unet and forms the first component of our Stable Diffusion system:</p>
<table class="table">
<colgroup>
<col style="width: 10%">
<col style="width: 25%">
<col style="width: 25%">
</colgroup>
<thead>
<tr class="header">
<th>Component</th>
<th style="text-align: left;">Inputs</th>
<th style="text-align: left;">Outputs</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Unet</td>
<td style="text-align: left;">Noisy images</td>
<td style="text-align: left;">Noise</td>
</tr>
</tbody>
</table>
</section>
<section id="compression-variational-autoencoder" class="level2">
<h2 class="anchored" data-anchor-id="compression-variational-autoencoder">Compression: Variational Autoencoder</h2>
<p>When working with images in neural networks we often reduce the resolution of images or use smaller patches of the original image to make sure everything fits on the GPU. With stable diffusion, we naturally want to output images of high resolution, so we either need very large GPUs, or instead we use a compression trick by making use of a Variational Autoencoder (VAE).</p>
<p>A VAE is a network architecture having an encoder and a decoder. In the encoder the image input is being transformed through a series of convolutional layers into a compressed representation, the latent. In the decoder this compressed latent is passed through a series of layers that are trying to reconstruct the original image. Visually:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lucasvw.github.io/posts/06_stable_diffusion_basics/intuition-3.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>This might look like a boring network architecture at first. But it’s actually a very neat way to compress things: We can feed this model all the different noisified images mentioned earlier, and use an MSE loss on the inputs and outputs. This will train the model to create compressed representations of our images (the latents) that can be used by the decoder to recreate the original image. This means that the latent representation carries close to the same amount of “information” as our full-size images.</p>
<p>With this, we can now train the previously discussed Unet on all the latents instead of the full size images!</p>
<p>During inference the combined architecture looks like this: we run any input first through the encoder returning a highly compressed version of our input (i.e.&nbsp;the latents). We then run it through the Unet, which will output a latent representation of the noise. If we (partly) subtract the noise latent from the noisy image latent, we end up with a latent representation of our image which is a bit less noisy then what we started with. Finally, to move from latent representation to full-size images, we can use the decoder of the VAE. Visually:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lucasvw.github.io/posts/06_stable_diffusion_basics/intuition-4.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>To summarize:</p>
<table class="table">
<colgroup>
<col style="width: 10%">
<col style="width: 25%">
<col style="width: 25%">
</colgroup>
<thead>
<tr class="header">
<th>Component</th>
<th style="text-align: left;">Inputs</th>
<th style="text-align: left;">Outputs</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>VAE encoder</td>
<td style="text-align: left;">Noisy image</td>
<td style="text-align: left;">Noisy image latents</td>
</tr>
<tr class="even">
<td>Unet</td>
<td style="text-align: left;">Noisy image latents</td>
<td style="text-align: left;">Noise latents</td>
</tr>
<tr class="odd">
<td>VAE decoder</td>
<td style="text-align: left;">Noise latents</td>
<td style="text-align: left;">Noise</td>
</tr>
</tbody>
</table>
</section>
<section id="prompting-clip" class="level2">
<h2 class="anchored" data-anchor-id="prompting-clip">Prompting: CLIP</h2>
<p>So how can we create prompting? Let’s start simple and imagine we just want to specify which handwritten digit we would like to generate, so any number between 0 and 9. We could do this by training the Unet not only on the noisy image (input) and noise (output), but instead also give it a representation of the digit we sprinkled the noise on as input. The most generic way to do this, would be to create a one-hot encoded representation of the digit, visually:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lucasvw.github.io/posts/06_stable_diffusion_basics/intuition-5.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>To create an image depicting the digit “three” from pure noise, we would then start with a random noise latent and feed it together with the one-hot encoded representation of the digit into the Unet. This way, the Unet is “guided” to create an image of digit “three” and not just any image, visually:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lucasvw.github.io/posts/06_stable_diffusion_basics/intuition-5-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>To continue, how are we going to scale this for <em>any</em> text prompt besides our 10 digits? We can’t possibly create a one-hot encoding of any possible prompt, that would make our vector infinitely large. Instead, we want to compress the encoding in some finite, high dimensional space, e.g.&nbsp;we want to create an embedding encoding of our prompt.</p>
<p>To create these embeddings, we first of all need again lots of data. For example by capturing a lot of images from the internet, these image generally have a textual description in the HTML tag.</p>
<p>We can feed the text and images into two separate encoders. These encoders take the text and image respectively and output a vector. Next, we can align the vector representations in a matrix and take the dot-product between them. We want the text and image vectors of the same “object” to align, this means their dot-product should be large. Also, we want the vectors of different objects to not align, so their dot-product should be small. Visually:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lucasvw.github.io/posts/06_stable_diffusion_basics/intuition-6.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>A loss function that does exactly this, is called the Contrastive Loss. And the model described here is called Contrastive Language Image Pre-training (CLIP).</p>
<p>During inference, we can use the trained text-encoder and apply it to the prompt. The outputted embedding can then be used as the encoding we feed into our Unet in combination with the noisy image latent.</p>
<p>To summarize:</p>
<table class="table">
<colgroup>
<col style="width: 10%">
<col style="width: 25%">
<col style="width: 25%">
</colgroup>
<thead>
<tr class="header">
<th>Component</th>
<th style="text-align: left;">Inputs</th>
<th style="text-align: left;">Outputs</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>CLIP text encoder</td>
<td style="text-align: left;">Prompt</td>
<td style="text-align: left;">Embedding</td>
</tr>
<tr class="even">
<td>VAE encoder</td>
<td style="text-align: left;">Noisy image</td>
<td style="text-align: left;">Noisy image latents</td>
</tr>
<tr class="odd">
<td>Unet</td>
<td style="text-align: left;">Noisy image latents + Prompt embedding</td>
<td style="text-align: left;">Noise latents</td>
</tr>
<tr class="even">
<td>VAE decoder</td>
<td style="text-align: left;">Noise latents</td>
<td style="text-align: left;">Noise</td>
</tr>
</tbody>
</table>
</section>
<section id="noise-scheduler" class="level2">
<h2 class="anchored" data-anchor-id="noise-scheduler">Noise scheduler</h2>
<p>Above it was stated, that “different” amounts of noise are sprinkled on our images during training, and during inference “some” amount of noise is being subtracted from the image. In the next post, which will be a “code” version of this post, we will see more how this exactly works, but let’s introduce one more concept here:</p>
<p>To formalize the amounts of noise we will use something called a noise schedule, which maps an integer value (called the timestep <img src="https://latex.codecogs.com/png.latex?t">) to an amount of noise we will add to our image. This noise schedule is a monotonically decreasing function of <img src="https://latex.codecogs.com/png.latex?t">, so large values of <img src="https://latex.codecogs.com/png.latex?t"> will add a small amount of noise and small values of <img src="https://latex.codecogs.com/png.latex?t"> add a large amount of noise. A typical noise schedule looks something like this:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lucasvw.github.io/posts/06_stable_diffusion_basics/noise-schedule.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>With this noise schedule, we can pick different amounts of noise during training and add it to the images in the batch. Additionally, we will feed the noise parameter to the Unet, so that it knows how much noise was added to the image. This sould make it easier for the model to reconstruct the noise.</p>
<p>To summarize:</p>
<table class="table">
<colgroup>
<col style="width: 10%">
<col style="width: 25%">
<col style="width: 25%">
</colgroup>
<thead>
<tr class="header">
<th>Component</th>
<th style="text-align: left;">Inputs</th>
<th style="text-align: left;">Outputs</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>CLIP text encoder</td>
<td style="text-align: left;">Prompt</td>
<td style="text-align: left;">Embedding</td>
</tr>
<tr class="even">
<td>VAE encoder</td>
<td style="text-align: left;">Noisy image</td>
<td style="text-align: left;">Noisy image latents</td>
</tr>
<tr class="odd">
<td>Unet</td>
<td style="text-align: left;">Noisy image latents + Prompt embedding + Noise level</td>
<td style="text-align: left;">Noise latents</td>
</tr>
<tr class="even">
<td>VAE decoder</td>
<td style="text-align: left;">Noise latents</td>
<td style="text-align: left;">Noise</td>
</tr>
</tbody>
</table>
<p>That’s it for now! If you came this far, I hope you enjoyed it. For me, it helped a lot in my understanding by writing all this down. In the next blog post, we will have a look at how these concepts translate into code by making use of HuggingFace libraries such as <code>diffusers</code> and <code>transformers</code></p>


</section>

 ]]></description>
  <category>generative</category>
  <category>stable diffusion</category>
  <category>diffusers</category>
  <category>concepts</category>
  <guid>https://lucasvw.github.io/posts/06_stable_diffusion_basics/index.html</guid>
  <pubDate>Sat, 18 Mar 2023 00:00:00 GMT</pubDate>
  <media:content url="https://lucasvw.github.io/posts/06_stable_diffusion_basics/image.png" medium="image" type="image/png" height="131" width="144"/>
</item>
<item>
  <title>Cross entropy any which way</title>
  <dc:creator>Lucas van Walstijn</dc:creator>
  <link>https://lucasvw.github.io/posts/05_crossentropy/index.html</link>
  <description><![CDATA[ 



<p>Cross entropy is one of the most commonly used loss functions. In this post, we will have a look at how it works, and compute it in a couple of different ways.</p>
<p>Consider a network that is build for image classification. During the forward pass, images are passed into the network and the network processes the data layer by layer, until evenually some final activations are being returned by the model. These final activations are called “logits” and represent the unnormalized predictions of our model.</p>
<p>Since we generally use mini-batches during training, these logits are of shape <code>[bs, num_classes]</code></p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn.functional <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> F</span>
<span id="cb1-3"></span>
<span id="cb1-4">g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.manual_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># use a generator for reproducability</span></span>
<span id="cb1-5"></span>
<span id="cb1-6">bs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># batch size of 32</span></span>
<span id="cb1-7">num_classes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># image classification with 3 different classes</span></span>
<span id="cb1-8"></span>
<span id="cb1-9">logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(bs, num_classes), generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># size: [32,3]</span></span>
<span id="cb1-10"></span>
<span id="cb1-11">logits[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># show the logits for the first couple of samples</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>tensor([[ 1.9269,  1.4873,  0.9007],
        [-2.1055,  0.6784, -1.2345],
        [-0.0431, -1.6047, -0.7521],
        [ 1.6487, -0.3925, -1.4036]])</code></pre>
</div>
</div>
<p>Each row of this tensor represents the unnormalized predictions for each of our samples in the batch. We can normalize these predictions by applying a softmax. The softmax function does two things:</p>
<ol type="1">
<li>make all our logits positive, by applying the exponential function, <a href="https://www.wolframalpha.com/input?i=exp%28x%29" target="_blank">wolfram alpha reference</a></li>
<li>divide each value of the exponentiated logits by the sum over all the classes</li>
</ol>
<p>This makes sure that we can treat the output of this as probabilities, because:</p>
<ol type="1">
<li>all individual predictions will be between 0 and 1</li>
<li>the predictions will sum to 1</li>
</ol>
<p>Specifically:</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Unnormalized predictions for our first sample (3 classes)</span></span>
<span id="cb3-2">logits[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>tensor([1.9269, 1.4873, 0.9007])</code></pre>
</div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Exponentiated predictions, making them all positive</span></span>
<span id="cb5-2">exp_logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> logits[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].exp()</span>
<span id="cb5-3">exp_logits</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>tensor([6.8683, 4.4251, 2.4614])</code></pre>
</div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Turn these values into probabilities by dividing by the sum</span></span>
<span id="cb7-2">probs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> exp_logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> exp_logits.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span>
<span id="cb7-3"></span>
<span id="cb7-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># verify that the sum of the probabilities sum to 1</span></span>
<span id="cb7-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">assert</span> torch.allclose(probs.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(), torch.tensor(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>))</span>
<span id="cb7-6"></span>
<span id="cb7-7">probs</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>tensor([0.4993, 0.3217, 0.1789])</code></pre>
</div>
</div>
<p>So, let’s create a softmax function that does this for a whole batch:</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> softmax(logits):</span>
<span id="cb9-2">    exp_logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> logits.exp() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># shape: [32, 3]</span></span>
<span id="cb9-3">    exp_logits_sum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> exp_logits.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, keepdim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># shape: [32, 1]</span></span>
<span id="cb9-4">    </span>
<span id="cb9-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Note: this get's correctly broadcasted, since the exp_logits_sum will </span></span>
<span id="cb9-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># expand to [32, 3], so each value in exp_logits gets divided by the sum over its row</span></span>
<span id="cb9-7">    probs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> exp_logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> exp_logits_sum <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># shape: [32, 3]</span></span>
<span id="cb9-8">    </span>
<span id="cb9-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> probs </span>
<span id="cb9-10"></span>
<span id="cb9-11">probs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> softmax(logits)</span>
<span id="cb9-12">probs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>]</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>tensor([[0.4993, 0.3217, 0.1789],
        [0.0511, 0.8268, 0.1221],
        [0.5876, 0.1233, 0.2891],
        [0.8495, 0.1103, 0.0401]])</code></pre>
</div>
</div>
<p>Next, we want to compute the loss for which also need our <code>labels</code>. These labels represent the ground truth class for each of our samples in the batch. Since we have 3 classes they will be between 0 and 3 (e.g.&nbsp;either 0, 1 or 2)</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.manual_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># use a generator for reproducability</span></span>
<span id="cb11-2"></span>
<span id="cb11-3">labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randint(low<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, high<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>,), generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g)</span>
<span id="cb11-4">labels</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>tensor([0, 2, 1, 1, 0, 2, 1, 2, 1, 2, 1, 1, 2, 0, 0, 1, 2, 1, 0, 1, 1, 2, 1, 2,
        2, 1, 2, 0, 1, 1, 0, 0])</code></pre>
</div>
</div>
<p>For classification we use the Negative Log Likelihood loss function, which is defined as such:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Ctextrm%7BNLL%7D%20=%20-%20%5Csum_%7Bi%7D%7Bq_i%20*%20%5Clog(p_i)%7D%0A"></p>
<p>with <img src="https://latex.codecogs.com/png.latex?i"> being the index that moves along the classes (3 in our example) and <img src="https://latex.codecogs.com/png.latex?q_i"> being the probability that the ground truth label is class <img src="https://latex.codecogs.com/png.latex?i"> (this is a somewhat strange formulation, since this probability is either 1 (for the correct class) or 0 (for all the non-correct classes)). Finally, <img src="https://latex.codecogs.com/png.latex?p_i"> is the probability that the model associated to class <img src="https://latex.codecogs.com/png.latex?i">.</p>
<p>For the very first row of our <code>probs</code> (<code>[0.4993, 0.3217, 0.1789]</code>) and our first label (<code>0</code>) we thus get:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7D%0A%5Ctextrm%7BNLL%7D%20&amp;=%20-%20(%20(1%20%5Ccdot%20%5Clog(0.4993))%20+%20(0%20%5Ccdot%20%5Clog(0.3217))%20+%20(0%20%5Ccdot%20%5Clog(0.1789))%20)%20%5C%5C%0A%5Ctextrm%7BNLL%7D%20&amp;=%20-%20(%20(1%20%5Ccdot%20%5Clog(0.4993))%20)%20%5C%5C%0A%5Ctextrm%7BNLL%7D%20&amp;=%20-%20%5Clog(0.4993)%0A%5Cend%7Balign%7D"></p>
<p>From which we see that it’s just the negative log of the probability associated with the ground truth class.</p>
<p>Since this computes only the NLL per sample, we also need a way to combine the NLL across the samples in our batch. We can do this either by summing or averaging, averaging has the advantage that the size of the loss remains the same when we change the batch-size, so let’s use that:</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> nll(probs, labels):</span>
<span id="cb13-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># probs: shape [32, 3]</span></span>
<span id="cb13-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># labels: shape [32]</span></span>
<span id="cb13-4">    </span>
<span id="cb13-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># this plucks out the probability of the ground truth label per sample, </span></span>
<span id="cb13-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># it uses "numpy's integer array indexing":</span></span>
<span id="cb13-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># https://numpy.org/doc/stable/user/basics.indexing.html#integer-array-indexing</span></span>
<span id="cb13-8">    probs_ground_truth_class <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> probs[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(labels)), labels] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># shape: [32]</span></span>
<span id="cb13-9">    </span>
<span id="cb13-10">    nll <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>torch.log(probs_ground_truth_class).mean() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># shape: []</span></span>
<span id="cb13-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> nll</span></code></pre></div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">nll(probs, labels)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>tensor(1.3465)</code></pre>
</div>
</div>
<section id="using-pytorch" class="level2">
<h2 class="anchored" data-anchor-id="using-pytorch">Using PyTorch</h2>
<p>Instead of using our custom <code>softmax</code>, we can also use the build-in softmax function from PyTorch:</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.softmax(logits, dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># dim=1 --&gt; compute the sum across the columns</span></span>
<span id="cb16-2">nll(p, labels)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>tensor(1.3465)</code></pre>
</div>
</div>
<p>Instead of using our custom <code>nll</code> we can also use the build-in version from PyTorch. However, <code>nll_loss</code> expects the log of the softmax (for numerical stability) so instead of <code>softmax</code> we have to use <code>log_softmax</code>:</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.log_softmax(logits, dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb18-2"></span>
<span id="cb18-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Assert that indeed the log_softmax is just the softmax followed by a log</span></span>
<span id="cb18-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">assert</span> torch.allclose(p, F.softmax(logits, dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).log())</span>
<span id="cb18-5"></span>
<span id="cb18-6">torch.nn.functional.nll_loss(p, labels)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>tensor(1.3465)</code></pre>
</div>
</div>
<p>The combination of <code>softmax</code> and <code>nll</code> is called cross entropy, so we can also use PyTorch’s build-in version of that:</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">F.cross_entropy(logits, labels)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>tensor(1.3465)</code></pre>
</div>
</div>
<p>Instead of the methods in <code>nn.functional</code>, we can also use classes. For that, we first create an instance of the object, and then “call” the instance:</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">ce <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.nn.CrossEntropyLoss() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create a CrossEntropyLoss instance</span></span>
<span id="cb22-2">ce(logits, labels) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># calling the instance with the arguments returns the cross entropy</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>tensor(1.3465)</code></pre>
</div>
</div>
<p>Similarly, we can use classes for the <code>log_softmax</code> and <code>nll_loss</code> functions</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">ls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.nn.LogSoftmax(dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb24-2">nll <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.nn.NLLLoss()</span>
<span id="cb24-3"></span>
<span id="cb24-4">p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ls(logits)</span>
<span id="cb24-5">nll(p, labels)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>tensor(1.3465)</code></pre>
</div>
</div>
<p>This is practical, if we want specify custom behavior of the loss function ahead of time of calling the actual loss function. For example, let’s say we want to compute the cross entropy loss based on ‘sums’ instead of ‘averages’. Then when using the method in <code>F</code> we would do:</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">F.cross_entropy(logits, labels, reduction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sum'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>tensor(43.0866)</code></pre>
</div>
</div>
<p>So whenever we call the loss, we have to specify the additional <code>reduction</code> argument.</p>
<p>Whereas when using the loss classes, we can instantiate the class with that <code>reduction</code> argument, and then call the instance as per usual without passing anything but the logits and the labels:</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># instantiate </span></span>
<span id="cb28-2">ce <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.nn.CrossEntropyLoss(reduction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sum'</span>)</span>
<span id="cb28-3"></span>
<span id="cb28-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># at some other point in your code, compute the loss as per default</span></span>
<span id="cb28-5">ce(logits, labels)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>tensor(43.0866)</code></pre>
</div>
</div>
<p>This is practical when the loss function is getting called by another object to which we don’t have easy access. So that we can’t easily change the arguments for that call. This is for example the case when using the FastAI <code>Learner</code> class, to which we pass the loss function which then get’s called by the <code>Learner</code> object with the default arguments (<code>logits</code> and <code>labels</code>). By using the classes, we can specify the reduction argument ahead of time and pass that instance to the <code>Learner</code> class.</p>


</section>

 ]]></description>
  <category>loss functions</category>
  <category>softmax</category>
  <category>nll</category>
  <category>cross entropy</category>
  <category>code</category>
  <guid>https://lucasvw.github.io/posts/05_crossentropy/index.html</guid>
  <pubDate>Wed, 15 Mar 2023 00:00:00 GMT</pubDate>
  <media:content url="https://lucasvw.github.io/posts/05_crossentropy/image.png" medium="image" type="image/png" height="82" width="144"/>
</item>
<item>
  <title>Fast matrix multiplications</title>
  <dc:creator>Lucas van Walstijn</dc:creator>
  <link>https://lucasvw.github.io/posts/04_matmul/index.html</link>
  <description><![CDATA[ 



<p>Matrix multiplications are kind of boring, so why write a blog post about them? Well, matrix multiplications are the most basic computation that is being performed by neural networks. So it’s probably good to be familiar with them, although we never do them by hand. Also, we are going to focus on speeding them up by doing vectorization. Vectorization is something we often have to do, to make sure everything runs as quickly as possible, and it’s thus a good exercise to understand how to achieve this. Especially since it involves being very familiar with matrices, their shapes, broadcasting operations and the like.</p>
<p>This post follows the first lecture of Part 2 of the FastAI course (2019), I will provide some additional explanations, and present one other optimization that is not presented in the <a href="https://%20youtu.be/4u8FxNEDUeg?t=2392">lecture</a>.</p>
<section id="definition" class="level2">
<h2 class="anchored" data-anchor-id="definition">Definition</h2>
<p>Matrix multiplication is not difficult, it goes like this:</p>
<ul>
<li>For matrix A of size <code>[ar x ac]</code> &nbsp; (<code>[4 x 3]</code> in the image below)</li>
<li>and matrix B of size <code>[br x bc]</code> &nbsp; (<code>[3 x 2]</code> in the image below)</li>
<li>the matrix product <code>A * B</code> is of size <code>[ar x bc]</code> (<code>[4 x 2]</code> in the image below).</li>
<li>So the matrix product is thus only defined when <code>ac == br</code> (<code>3 == 3</code> in the image below)</li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lucasvw.github.io/posts/04_matmul/image.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>So for any valid matrix multiplication, we have three dimensions that need to considered:</p>
<ul>
<li><code>ar</code>: the row dimension of matrix A. The size of this dimension will become the size of the row dimension of the output matrix (black arrow in the image above)</li>
<li><code>bc</code>: the column dimension of matrix B. The size of this dimension will become the size of the column dimension of the output matrix (purple arrow in the image above)</li>
<li><code>ac</code>: the column dimension of Matrix A and <code>br</code>: the row dimension of matrix B: <strong>they need to be equal</strong> (red arrow in the image above)</li>
</ul>
<p>Why do <code>ac</code> and <code>bc</code> need to be equal? Well, because we take the inner product over this dimension when computing the cell values of the new matrix, and inner-products are only defined for vectors of equal length. Below, I will also refer to this dimension as the dimension over which we collapse (or the “collapsible” dimension), since in the output matrix, this dimension is no longer present.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lucasvw.github.io/posts/04_matmul/image1.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>In other words, to compute cell <img src="https://latex.codecogs.com/png.latex?C_%7Bi,j%7D"> we take the inner product between row <code>i</code> of matrix A and column <code>j</code> of matrix B. Let’s have a look at one other cell, to make sure we understand fully what’s going on. In the next figure we compute the value for cell <img src="https://latex.codecogs.com/png.latex?C_%7B3,2%7D">, we thus take the inner-product between row 3 of matrix A and column 2 of matrix B:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lucasvw.github.io/posts/04_matmul/image2.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>Let’s do this in code, to confirm these statements:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb1-2"></span>
<span id="cb1-3">a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb1-4">b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Confirm the shape of the output matrix</span></span>
<span id="cb2-2">(a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>b).shape</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>torch.Size([4, 2])</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Confirm the value of one output cell (C00)</span></span>
<span id="cb4-2">C00_manual <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (a[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> b[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (a[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> b[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (a[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> b[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb4-3">C00_auto <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>b)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb4-4"></span>
<span id="cb4-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">assert</span> torch.allclose(C00_manual, C00_auto)</span></code></pre></div>
</div>
<p>Now, let’s create our own matrix multiplication function:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> matmul(a, b):</span>
<span id="cb5-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># fill in the sizes of the dimensions</span></span>
<span id="cb5-3">    ar, ac <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a.shape</span>
<span id="cb5-4">    br, bc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> b.shape</span>
<span id="cb5-5"></span>
<span id="cb5-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># assert that our matrices can be multiplied </span></span>
<span id="cb5-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">assert</span> ac <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> br</span>
<span id="cb5-8"></span>
<span id="cb5-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create an output tensor of the expected size (ar x bc)</span></span>
<span id="cb5-10">    out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros(ar, bc)</span>
<span id="cb5-11"></span>
<span id="cb5-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># iterate over the rows of the output matrix (--&gt; length ar)</span></span>
<span id="cb5-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(out.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]):</span>
<span id="cb5-14">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># iterate over the columns of the output matrix (--&gt; length bc)</span></span>
<span id="cb5-15">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(out.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]):</span>
<span id="cb5-16">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># iterate over the "collapsed" dimension (--&gt; length ac and length br), </span></span>
<span id="cb5-17">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> k <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(ac):</span>
<span id="cb5-18">                out[i, j] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> a[i, k] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> b[k, j]</span>
<span id="cb5-19">    </span>
<span id="cb5-20">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> out</span>
<span id="cb5-21"></span>
<span id="cb5-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Confirm that the result is correct</span></span>
<span id="cb5-23"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">assert</span> torch.allclose(matmul(a,b), a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>b)</span></code></pre></div>
</div>
<p>Although this is functionally correct, it’s not very efficient. In fact, to compute the value of one cell of the output matrix, we are doing three separate multiplications. In other words, for each cell <code>out[i,j]</code> we are calling three times (once for every value of <code>k</code>):</p>
<pre><code>out[i, j] += a[i, k] * b[k, j]</code></pre>
<p>Let’s try to reduce the computation of one cell to just one single call.</p>
</section>
<section id="first-improvement" class="level2">
<h2 class="anchored" data-anchor-id="first-improvement">First improvement</h2>
<p>To do so, we need to get rid of the loop over the “collapsible” dimension <code>k</code>. We can simply do this by replacing the <code>k</code> with a <code>:</code>, so that we select the whole dimension instead of just one element in that dimension. The multiplication (<code>*</code>) is doing an element wise multiplication, so we have to wrap the result with a <code>.sum()</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> matmul2(a, b):</span>
<span id="cb7-2">    ar, ac <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a.shape</span>
<span id="cb7-3">    br, bc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> b.shape</span>
<span id="cb7-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">assert</span> ac <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> br</span>
<span id="cb7-5"></span>
<span id="cb7-6">    out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros(ar,bc)</span>
<span id="cb7-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># iterate over the rows of the output matrix (i)</span></span>
<span id="cb7-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(out.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]):</span>
<span id="cb7-9">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># iterate over the columns of the output matrix (j)</span></span>
<span id="cb7-10">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(out.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]):</span>
<span id="cb7-11">            out[i, j] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (a[i, :] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> b[:, j]).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span>
<span id="cb7-12">    </span>
<span id="cb7-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> out</span>
<span id="cb7-14"></span>
<span id="cb7-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Confirm that the result is correct</span></span>
<span id="cb7-16"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">assert</span> torch.allclose(matmul(a,b), a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>b)</span></code></pre></div>
</div>
</section>
<section id="second-improvement" class="level2">
<h2 class="anchored" data-anchor-id="second-improvement">Second improvement</h2>
<p>The improvement above, gives us the value of a cell in one single call:</p>
<pre><code>out[i, j] = (a[i, :] * b[:, j]).sum()</code></pre>
<p>This is great, let’s try to vectorize this even further, and get rid of the second loop (the loop over <code>j</code>), this means that we need to compute the values of a single row of the output matrix in one call, e.g.</p>
<pre><code>out[i,:] = ...</code></pre>
<p>We know that the value of cell <img src="https://latex.codecogs.com/png.latex?C_%7Bij%7D"> is the inner product between row <code>i</code> of A and column <code>j</code> of B. We also know that any row of matrix C will have two values. Let’s compute them manually:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">out_00 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (a[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,:] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> b[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span>
<span id="cb10-2">out_01 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (a[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,:] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> b[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span>
<span id="cb10-3"></span>
<span id="cb10-4">C0_manual <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.stack([out_00, out_01])</span>
<span id="cb10-5">C0_auto <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>b)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb10-6"></span>
<span id="cb10-7"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">assert</span> torch.allclose(C0_manual, C0_auto)</span>
<span id="cb10-8"></span>
<span id="cb10-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>out_00<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>out_01<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>C0_manual<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>out_00=tensor(-0.0213)
out_01=tensor(0.3668)
C0_manual=tensor([-0.0213,  0.3668])</code></pre>
</div>
</div>
<p>Observe that for the computation of one row of output, we need:</p>
<ul>
<li>one single row of A (<code>a[0,:]</code>)</li>
<li>the full matrix of B, we need both the first (<code>b[:,0]</code>) column and the second column (<code>b[:,1]</code>).</li>
</ul>
<p>Let’s check the sizes of both and see whether we can use broadcasting:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>a[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,:]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>b<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>a[0,:].shape=torch.Size([3])
b.shape=torch.Size([3, 2])</code></pre>
</div>
</div>
<p>Unfortunately, size <code>[3]</code> and <code>[3,2]</code> don’t broadcast. To make them broadcast, we have to add an empty dimension at the end of the row of the A matrix. Then, the shapes <code>[3, 1]</code> and <code>[3, 2]</code> can be broadcasted to another by duplicating the former in the column direction:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,:].unsqueeze(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># [3, 1]</span></span>
<span id="cb14-2"></span>
<span id="cb14-3">t.broadcast_to(b.shape) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># [3, 2]</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>tensor([[ 0.9193,  0.9193],
        [-0.0426, -0.0426],
        [ 1.3566,  1.3566]])</code></pre>
</div>
</div>
<p>Now that both object are the same size we can do an element-wise multiplication and then sum over the rows to arrive at an output of size <code>[1,2]</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">C0_manual <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>b).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb16-2">C0_auto <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>b)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,:]</span>
<span id="cb16-3"></span>
<span id="cb16-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">assert</span> torch.allclose(C0_manual, C0_auto)</span>
<span id="cb16-5"></span>
<span id="cb16-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>C0_manual<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>C0_manual<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>C0_manual=tensor([-0.0213,  0.3668])
C0_manual.shape=torch.Size([2])</code></pre>
</div>
</div>
<p>So let’s implement this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> matmul3(a, b):</span>
<span id="cb18-2">    ar, ac <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a.shape</span>
<span id="cb18-3">    br, bc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> b.shape</span>
<span id="cb18-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">assert</span> ac <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> br</span>
<span id="cb18-5"></span>
<span id="cb18-6">    out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros(ar,bc)</span>
<span id="cb18-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># iterate over the rows of the output matrix (i)</span></span>
<span id="cb18-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(out.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]):</span>
<span id="cb18-9">        out[i, :] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (a[i, :].unsqueeze(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> b).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb18-10">    </span>
<span id="cb18-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> out</span>
<span id="cb18-12"></span>
<span id="cb18-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Confirm that the result is correct</span></span>
<span id="cb18-14"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">assert</span> torch.allclose(matmul(a,b), a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>b)</span></code></pre></div>
</div>
</section>
<section id="third-improvement" class="level2">
<h2 class="anchored" data-anchor-id="third-improvement">Third improvement</h2>
<p>For the final improvement, we need to get rid of the only remaining loop over the rows of our output matrix (<code>i</code>). So let’s understand very well what we are having at the moment:</p>
<ul>
<li>We are iterating over the (4) rows of our output matrix</li>
<li>For each row, we are computing the (2) values of our row at once by doing <code>out[i, :] = (a[i, :].unsqueeze(-1) * b).sum(dim=0)</code> and let’s break this down once again in steps:
<ol type="1">
<li><code>a[i, :]</code> has shape <code>[3]</code> and represents one row of A</li>
<li>with <code>a[i, :].unsqueeze(-1)</code> we add an extra dimension so that we can broadcast, the result has shape <code>[3, 1]</code></li>
<li><code>b</code> has shape <code>[3, 2]</code> and is the full B matrix</li>
<li>element-wise multiplication of 2. and 3. gives a matrix of shape <code>[3, 2]</code></li>
<li>by summing over the rows (<code>.sum(dim=0)</code>) we arrive at the result of shape <code>[2]</code></li>
</ol></li>
</ul>
<p>We want to improve this by <strong>instead of iterating over the 4 rows, do these computations all at once for all rows</strong>. So let’s start by not selecting one row of A (<code>a[i,:]</code>) but instead just the whole <code>a</code> matrix:</p>
<ol type="1">
<li><code>a</code> has shape <code>[4, 3]</code></li>
<li>similarly to what we did before, we can <code>a.unsqueeze(-1)</code> to add an extra dimension, the result has shape <code>[4, 3, 1]</code></li>
<li>same as before, <code>b</code> has shape <code>[3, 2]</code> and is the full B matrix</li>
<li>broadcasting of 2. and 3. will do the following:
<ul>
<li><code>a.unsqueeze(-1)</code> has shape <code>[4, 3, 1]</code> and get’s expanded to <code>[4, 3, 2]</code> to match the shape of <code>b</code> (<code>[3, 2]</code>)</li>
<li>but <code>b</code> also needs to match <code>a</code>, first an additional empty dimension is added in the front: <code>[1, 3, 2]</code> and then it get’s expanded to <code>[4, 3, 2]</code></li>
<li>Thus, the element-wise multiplication of 2. and 3. gives a matrix (tensor) of shape <code>[4, 3, 2]</code>, let’s call it <code>t</code>. It’s import to realize what this <code>t</code> represents. For that, notice that the first dimension (length 4) and last dimension (length 2) are the dimensions of our output matrix (<code>[4, 2]</code>). <strong>The middle dimension (length 3) represents the element wise multiplications of row i in matrix A and column j of matrix B</strong>. So <code>t[0, :, 0]</code> gives us 3 numbers which represent the element-wise multiplications of the first row of A and the first column of B.</li>
</ul></li>
<li>So to finalize and get to the final matrix product A*B, we collapse (sum) over this middle dimension:</li>
</ol>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> matmul4(a, b):</span>
<span id="cb19-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> (a.unsqueeze(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> b).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb19-3"></span>
<span id="cb19-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Confirm that the result is correct</span></span>
<span id="cb19-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">assert</span> torch.allclose(matmul(a,b), a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>b)</span></code></pre></div>
</div>
</section>
<section id="timings" class="level2">
<h2 class="anchored" data-anchor-id="timings">Timings</h2>
<p>To see what kind of a speed-up we have achieved, let’s look at the timings of our first version with three loops and the timings of our optimized version:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>timeit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>n <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span> matmul(a,b)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>318 µs ± 13.7 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>timeit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>n <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span> matmul4(a,b)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>10.7 µs ± 1.46 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)</code></pre>
</div>
</div>
<p>Nice, our optimized version is about 30 times faster then our un-optimized version with 3 loops! Additionally, let’s check the timings of doing the matrix multiplication with <code>einsum</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>timeit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>n <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span> torch.einsum(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ij,jk-&gt;ik'</span>, a, b)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>25.9 µs ± 3.78 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)</code></pre>
</div>
</div>
<p>Surprisingly, our optimized version is twice as fast as <code>einsum</code>. This is certainly something I didn’t expect.</p>
<p>Finally, let’s also check the timings of using the <code>@</code> operator:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>timeit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>n <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span> a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>b</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>3.29 µs ± 522 ns per loop (mean ± std. dev. of 7 runs, 1,000 loops each)</code></pre>
</div>
</div>
<p>As expected, this is even faster then our optimized version, probably because it runs in optimized C / CUDA code</p>


</section>

 ]]></description>
  <category>foundations</category>
  <category>maths</category>
  <category>vectorization</category>
  <category>linear algebra</category>
  <category>code</category>
  <guid>https://lucasvw.github.io/posts/04_matmul/index.html</guid>
  <pubDate>Tue, 07 Mar 2023 00:00:00 GMT</pubDate>
  <media:content url="https://lucasvw.github.io/posts/04_matmul/image.png" medium="image" type="image/png" height="89" width="144"/>
</item>
<item>
  <title>First competition🏅</title>
  <dc:creator>Lucas van Walstijn</dc:creator>
  <link>https://lucasvw.github.io/posts/03_aiornot/index.html</link>
  <description><![CDATA[ 



<p>In the past couple of weeks I have participated in the first ever Hugging Face competition: <a href="https://huggingface.co/spaces/competitions/aiornot" target="_blank">aiornot</a>. And as a matter of fact, it was also my first competition to participate in! The competition consisted of 62060 images (18618 train and 43442 test images) which were either created by an AI or not (binary image classification).</p>
<p>Today, the competition has finished and the private leaderboard has been made public. I’m super happy (and proud 😇) that I finished in <strong>15th place</strong> (98 participants):</p>
<p><img src="https://lucasvw.github.io/posts/03_aiornot/screenshot.png" class="img-fluid"></p>
<section id="credit-where-credit-is-due" class="level2">
<h2 class="anchored" data-anchor-id="credit-where-credit-is-due">Credit where credit is due:</h2>
<section id="hugging-face" class="level4">
<h4 class="anchored" data-anchor-id="hugging-face"><strong>🤗 Hugging Face</strong></h4>
<p>I would like to thank Hugging Face and in particular <a href="https://twitter.com/abhi1thakur" target="_blank">Abhishek Thakur</a> for organizing this competition. I started looking for a first competition at Kaggle a few weeks back, and was very interested in the <a href="https://www.kaggle.com/competitions/rsna-breast-cancer-detection" target="_blank">RSNA competition</a> but quickly found that it was probably a bit too complicated for my first competition. I then saw a tweet from Abhishek announcing this competition and found it a perfect competition to get started.</p>
</section>
<section id="fastai" class="level4">
<h4 class="anchored" data-anchor-id="fastai"><strong>fastai</strong></h4>
<p>In the past month I have been following the fastai <a href="https://course.fast.ai/" target="_blank">course</a> and I am extremely grateful to <a href="https://twitter.com/jeremyphoward" target="_blank">Jeremy Howard</a> and <a href="https://twitter.com/GuggerSylvain" target="_blank">Sylvain Gugger</a> for creating fastai. The book, the course, the videos and the great community they have built is really something special and is perfectly tailored for anybody who wants to get started with Deep Learning. Without fastai I could never have pulled this off 🙏.</p>
</section>
</section>
<section id="learnings-and-notes" class="level2">
<h2 class="anchored" data-anchor-id="learnings-and-notes">Learnings and notes</h2>
<ul>
<li><p>I quickly learned that data augmentation didn’t work well on this data. Initially I was a bit surprised by this, but upon inspection of the images I arrived at the following intuition. Normally we want to classify images by what’s being displayed in the image. So 2 images of a bike should both be classified as such. However, in this dataset we can have images of the same object but if one is created by an AI, and the other is not then they should be classified differently. So instead of looking at what’s being displayed, it probably has to learn more about the style or the way the image is built up. I can imagine that data augmentation makes this more difficult, especially warping, affine transformations and brightness, contrast augmentations. I was happily surprised to find that the <a href="https://huggingface.co/spaces/competitions/aiornot/discussions/29" target="_blank">2nd</a> and <a href="https://huggingface.co/spaces/competitions/aiornot/discussions/30" target="_blank">4th</a> place solutions also didn’t use these data augmentation!</p></li>
<li><p>Training on larger images works very well. I got a large performance boost for switching to sizes of 416. Jeremy Howard mentioned that this generally works well, and I think because of the nature of these images it worked especially well. To train large models on large images, I heavily relied on Gradient Accumulation to not have to reduce the batchsize.</p></li>
<li><p>Transformer based models such as SWIN and VIT performed not as good as models based on convolutions, I used the convnext models.</p></li>
<li><p>Progressive resizing didn’t work for me.</p></li>
<li><p>I tried training on 5 epochs and 10 epochs. 10 epochs never gave me better results.</p></li>
</ul>
<p>Last but not least:</p>
<p>Participating in competitions is very motivating and rewarding. Working individually through courses, exercises and lecture notes is very interesting, but you don’t get a lot of feedback to how you are doing. <em>Am I doing well? Should I spend more time on investigations into certain areas?</em> When participating in a real-world competition you have a very clear goal, and you get immediate feedback on how you are doing. This type of project based learning has the advantage that it’s very clear what you need to focus on: anything that you encounter during the project.</p>
<p>It’s also great that it has a finite timeline, so that afterwards you can have a sense of achievement which motivates a lot. The Germans have a very nice word for this: <em>Erfolgserlebnis</em>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lucasvw.github.io/posts/03_aiornot/ss2.png" class="img-fluid figure-img" width="500"></p>
<figcaption class="figure-caption">Image for <a href="https://stablediffusionweb.com/#demo">Stable Diffusion</a> prompt: <em>“Sense of achievement when finishing my first ever machine learning competition”</em></figcaption>
</figure>
</div>


</section>

 ]]></description>
  <category>deep learning</category>
  <category>image classification</category>
  <category>competition</category>
  <guid>https://lucasvw.github.io/posts/03_aiornot/index.html</guid>
  <pubDate>Wed, 01 Mar 2023 00:00:00 GMT</pubDate>
  <media:content url="https://lucasvw.github.io/posts/03_aiornot/image.png" medium="image" type="image/png" height="71" width="144"/>
</item>
<item>
  <title>Paperspace setup</title>
  <dc:creator>Lucas van Walstijn</dc:creator>
  <link>https://lucasvw.github.io/posts/02_paperspace_setup/index.html</link>
  <description><![CDATA[ 



<p>Most people don’t have a GPU installed in their working machine that is suited for Deep Learning, and in fact you don’t need to. It’s quite easy to setup a remote GPU server nowadays, and in this blog I will explain how to do so with <a href="https://www.paperspace.com/gradient">Paperspace Gradient</a>.</p>
<p>I started using Paperspace because of a recommendation from Jeremy Howard in his <a href="https://www.youtube.com/playlist?list=PLfYUBJiXbdtSLBPJ1GMx-sQWf6iNhb8mM">Live Coding Videos</a>. If you haven’t seen these lectures, I can highly recommend them. They are a great resource on many things related to getting started with Deep Learning. Jeremy shows a lot of productivity hacks and practical tips on getting a good setup.</p>
<p>However, the Paperspace setup explanations are a bit out-dated which can lead to confusion when following along with the video’s. Also, after the recording of the videos Jeremy created some nice scripts which simplify the setup. This blog will hopefully help others to navigate this and quickly set-up a remote GPU server. I would advice anybody who wants to try Paperspace, to first watch the videos from Jeremy to have a general idea of how it works, and then follow these steps to quickly get set-up.</p>
<p>Once you have signed up to Paperspace, go to their Gradient service and create a new project. Paperspace has a free tier, as well as a pro- ($8/month) and growth-plan ($39/month). I personally signed up for the pro-plan, which has a very good value for money. You get 15Gb persistent storage and free Mid instance types. If available, I use the A4000, which is the fastest and comes with 16GB of GPU memory.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>Paperspace has both free and paid servers. The free ones come with a 6 hour usage limit, after that they are automatically shut down. The paid servers you can use as long as you like. Sometimes the free servers are out of capacity, which is a bit annoying. In my experience however most of the time I’m able to get what I need.</p>
</div>
</div>
<p>With the pro-plan you can create up to 3 servers, or “Notebooks” as they are called by Paperspace (throughout this blog I’ll refer to them as <em>Notebook Servers</em>). So let’s create one:</p>
<ul>
<li>Select the “Fast.AI” runtime</li>
<li>Select a machine, for example the Free-A4000. You can always change this when you restart your machine</li>
<li>Remove the Workspace URL under the advanced options to create a totally empty server</li>
<li>Navigate to JupyterLab</li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lucasvw.github.io/posts/02_paperspace_setup/screenshot.png" class="img-fluid figure-img" width="300"></p>
<figcaption class="figure-caption">Click the JupyterLab icon to open up a JupyterLab environment for your GPU server</figcaption>
</figure>
</div>
<section id="first-look-at-our-notebook-server" class="level2">
<h2 class="anchored" data-anchor-id="first-look-at-our-notebook-server">First look at our Notebook Server</h2>
<p>Next, let’s open a terminal and get familiar with our Server</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Terminal</strong></pre>
</div>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> which <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">python</span></span>
<span id="cb1-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">/usr/local/bin/python</span></span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> python <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">--version</span></span>
<span id="cb1-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Python</span> 3.9.13</span></code></pre></div>
</div>
<p>And let’s also check the <code>PATH</code> variable:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Terminal</strong></pre>
</div>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-overflow-wrap code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> echo <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$PATH</span></span>
<span id="cb2-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">/usr/local/nvidia/bin:/usr/local/cuda/bin:/usr/local/sbin:/usr/local/bin:</span> /usr/sbin:/usr/bin:/sbin:/bin:/root/mambaforge/bin</span></code></pre></div>
</div>
<p>The <code>python</code> command is thus pointing to the system Python installation. However, on the <code>PATH</code> variable we are also seeing an entry at the end mentioning mambaforge.</p>
<p>And indeed we can execute:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Terminal</strong></pre>
</div>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-overflow-wrap code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> mamba <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">list</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grep</span> python</span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">ipython</span>                   8.5.0              pyh41d4057_1    conda-forge</span>
<span id="cb3-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">ipython_genutils</span>          0.2.0                      py_1    conda-forge</span>
<span id="cb3-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">python</span>                    3.10.6          h582c2e5_0_cpython    conda-forge</span>
<span id="cb3-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">python-dateutil</span>           2.8.2              pyhd8ed1ab_0    conda-forge</span>
<span id="cb3-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">python-fastjsonschema</span>     2.16.2             pyhd8ed1ab_0    conda-forge</span>
<span id="cb3-8"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">python_abi</span>                3.10                    2_cp310    conda-forge</span></code></pre></div>
</div>
<p>So we are having both a <code>mamba</code> based Python 3.10.6 and a system installation of Python 3.9.13.</p>
<p>Let’s open a Jupyter Notebook and see which Python version is running:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Untitled.ipynb</strong></pre>
</div>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-overflow-wrap code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">import</span> sys</span>
<span id="cb4-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">sys.version</span></span></code></pre></div>
</div>
<p>Which returns: <code>'3.9.13 (main, May 23 2022, 22:01:06) \n[GCC 9.4.0]'</code>. Jupyter is thus running the system Python installation.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>In the videos Jeremy mentions that we should never use the system Python but instead always create a Mamba installation. However, since we are working here on a virtual machine that is only used for running Python, this shouldn’t be a problem. Just be aware that we are using the system Python which is totally separate from the Mamba setup.</p>
</div>
</div>
<p>Since we are running the system Python version, we can inspect all the packages that are installed:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Terminal</strong></pre>
</div>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-overflow-wrap code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> pip <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">list</span></span>
<span id="cb5-2"></span>
<span id="cb5-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">...</span></span>
<span id="cb5-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">fastai</span>                            2.7.10</span>
<span id="cb5-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">fastapi</span>                           0.92.0</span>
<span id="cb5-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">fastbook</span>                          0.0.28</span>
<span id="cb5-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">fastcore</span>                          1.5.27</span>
<span id="cb5-8"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">fastdownload</span>                      0.0.7</span>
<span id="cb5-9"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">fastjsonschema</span>                    2.15.3</span>
<span id="cb5-10"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">fastprogress</span>                      1.0.3</span>
<span id="cb5-11"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">...</span></span>
<span id="cb5-12"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">torch</span>                             1.12.0+cu116</span>
<span id="cb5-13"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">torchaudio</span>                        0.12.0+cu116</span>
<span id="cb5-14"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">torchvision</span>                       0.13.0+cu116</span>
<span id="cb5-15"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">...</span></span></code></pre></div>
</div>
</section>
<section id="persisted-storage-at-paperspace" class="level2">
<h2 class="anchored" data-anchor-id="persisted-storage-at-paperspace">Persisted Storage at Paperspace</h2>
<p>In general, things are not persisted on Paperspace. So anything we store during a session, will be gone when we restart our Notebook Server. However, Paperspace comes with two special folders that are persisted. It’s important to understand how these folder works since we obviously need to persist our work. Not only that, but we also need to persist our configuration files from services lik GitHub, Kaggle and HuggingFace and potentially any other config files for tools or services we are using.</p>
<p>The persisted folders are called <code>/storage</code> and <code>/notebooks</code>. Anything in our <code>/storage</code> is <strong>shared among all the Notebook Servers</strong> we are running, whereas anything that is stored in the <code>/notebooks</code> folder is only persisted on <strong>that specific Notebook Server</strong>.</p>
</section>
<section id="set-up" class="level2">
<h2 class="anchored" data-anchor-id="set-up">Set up</h2>
<p>In the first few videos, Jeremy shows a lot of tricks on how to install new packages and set up things like Git and GitHub. After the recording of these videos, he made a <a href="https://github.com/fastai/paperspace-setup">GitHub repo</a> which facilitates this setup greatly and makes most of the steps from the videos unnecessary. So let’s use that:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Terminal</strong></pre>
</div>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-overflow-wrap code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> git <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">clone</span> https://github.com/fastai/paperspace-setup.git</span>
<span id="cb6-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> cd <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">paperspace-setup</span></span>
<span id="cb6-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> ./setup.sh</span></code></pre></div>
</div>
<p>To understand what this does, let’s have a look at <code>setup.sh</code>:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>setup.py</strong></pre>
</div>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-overflow-wrap code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!/usr/bin/env bash</span></span>
<span id="cb7-2"></span>
<span id="cb7-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mkdir</span> /storage/cfg</span>
<span id="cb7-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cp</span> pre-run.sh /storage/</span>
<span id="cb7-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cp</span> .bash.local /storage/</span>
<span id="cb7-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> install complete. please start a new instance</span></code></pre></div>
</div>
<p>First it’s creating a new directory inside of our <code>/storage</code> folder called <code>cfg</code>. As we will see, this is where we will store all our configuration files and folders.</p>
<p>Next, the script copies 2 files to our storage folder. Let’s have a closer look at those</p>
<section id="pre-run.sh" class="level4">
<h4 class="anchored" data-anchor-id="pre-run.sh"><strong>pre-run.sh</strong></h4>
<p>During startup of a Notebook Server (upon creation or restart), Paperspace automatically executes the script it finds at <code>/storage/pre-run.sh</code>. This is really neat, since we can create a script at this location to automate our setup!</p>
<p>For the full script, click <a href="https://github.com/fastai/paperspace-setup/blob/master/pre-run.sh">here</a>, and let’s have a closer look at this first snippet:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>pre-run.sh (snippet)</strong></pre>
</div>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash code-overflow-wrap number-lines code-with-copy"><code class="sourceCode bash"><span id="cb8-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> .local .ssh .config .ipython .fastai .jupyter .conda .kaggle</span>
<span id="cb8-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">do</span></span>
<span id="cb8-3">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">[</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">!</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-e</span> /storage/cfg/<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$p</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">]</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">;</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">then</span></span>
<span id="cb8-4">                <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mkdir</span> /storage/cfg/<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$p</span></span>
<span id="cb8-5">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">fi</span></span>
<span id="cb8-6">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rm</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-rf</span> ~/<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$p</span></span>
<span id="cb8-7">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ln</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-s</span> /storage/cfg/<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$p</span> ~/</span>
<span id="cb8-8"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">done</span></span></code></pre></div>
</div>
<p>So we are iterating through a list of folder names (<code>.local .ssh ...</code>) on line 1, and for each one we create a directory inside of <code>/storage/cfg</code> on line 4. We only do this if the directory doesn’t already exist on line 3. Next, each of these folders is symlinked to the home directory (<code>~/</code>) on line 7.</p>
<p>This means that:</p>
<ol type="1">
<li>When we store something in any of these symlinked folders (e.g.&nbsp;<code>~/.local</code>), it’s actually being written to the associated storage folder (e.g.&nbsp;<code>/storage/cfg/.local</code>) because of the symlink.</li>
<li>Whenever we restart our Notebook Server, all the stuff that has previously been persisted (e.g.&nbsp;in <code>/storage/cfg/.local</code>) are made available again in the home directory (e.g.&nbsp;<code>~/.local</code>).</li>
</ol>
<p>This is very nice, because as it turns out: many tools keep their configuration files in this home folder. So by persisting this data, they will keep working across restarts of our Notebook servers.</p>
<p>Let’s a closer look at the folders we are persisting:</p>
<section id="local" class="level5">
<h5 class="anchored" data-anchor-id="local"><strong>.local</strong></h5>
<p>We saw before that the FastAI runtime comes with a number of installed Python packages. If we want to install additional packages, we could do: <code>pip install &lt;package&gt;</code>. However, pip installs the packages in <code>/usr/local/lib</code>, and are thus not persisted. To make sure our packages are persisted, we can instead install with <code>pip install --user &lt;package&gt;</code>. This <code>--user</code> flag, tells <code>pip</code> to install the package only for the current user, and so it installs into the <code>~/.local</code> directory. So by persisting this folder, we make sure that we our custom installed python packages are persisted, awesome!</p>
</section>
<section id="ssh" class="level5">
<h5 class="anchored" data-anchor-id="ssh"><strong>.ssh</strong></h5>
<p>To authenticate with GitHub without using passwords, we use ssh keys. To create a pair of keys, we run: <code>ssh-keygen</code>. This creates the private key (<code>id_rsa</code>) and the public key (<code>id_rsa.pub</code>) to the <code>~/.ssh</code> folder. Once we upload the public key to GitHub we can authenticate with GitHub, and by persisting this folder we can authenticate upon restart!</p>
<p>By now you probably get the idea, any of these folders represent a certain configuration we want to persist:</p>
<ul>
<li><code>.conda</code>: contains conda/mamba installed packages</li>
<li><code>.kaggle</code>: contains a <code>kaggle.json</code> authentication file</li>
<li><code>.fastai</code>: contains downloaded datasets and some other configuration</li>
<li><code>.config</code>, <code>.ipython</code> and <code>.jupyter</code>: contain config files for various pieces of software such as matplotlib, ipython and jupyter.</li>
</ul>
<p>I personally also added <code>.huggingface</code> to this list, to make sure my HuggingFace credentials are also persisted. See <a href="https://github.com/fastai/paperspace-setup/pull/4">here</a> for the PR back into the main repo.</p>
<p>In the second part of the script we do exactly the same thing, but for a number of files instead of directories.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>pre-run.sh (snippet)</strong></pre>
</div>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode bash code-overflow-wrap code-with-copy"><code class="sourceCode bash"><span id="cb9-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> .git-credentials .gitconfig .bash_history</span>
<span id="cb9-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">do</span></span>
<span id="cb9-3">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">[</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">!</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-e</span> /storage/cfg/<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$p</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">]</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">;</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">then</span></span>
<span id="cb9-4">                <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">touch</span> /storage/cfg/<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$p</span></span>
<span id="cb9-5">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">fi</span></span>
<span id="cb9-6">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rm</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-rf</span> ~/<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$p</span></span>
<span id="cb9-7">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ln</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-s</span> /storage/cfg/<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$p</span> ~/</span>
<span id="cb9-8"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">done</span></span></code></pre></div>
</div>
<p>Now that we understand <code>pre-run.sh</code>, let’s have a look at the second file we store in our <code>/storage</code> folder:</p>
</section>
</section>
<section id="bash.local" class="level4">
<h4 class="anchored" data-anchor-id="bash.local"><strong>.bash.local</strong></h4>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>.bash.local</strong></pre>
</div>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode bash code-overflow-wrap code-with-copy"><code class="sourceCode bash"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!/usr/bin/env bash</span></span>
<span id="cb10-2"></span>
<span id="cb10-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">alias</span> mambai=<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mamba install -p ~/.conda '</span></span>
<span id="cb10-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">alias</span> pipi=<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pip install --user '</span></span>
<span id="cb10-5"></span>
<span id="cb10-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">export</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">PATH</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>~/.local/bin:~/.conda/bin/:<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$PATH</span></span></code></pre></div>
</div>
<p>Paperspace runs this script whenever we open a terminal. As you can see it defines two aliases to easily install things persistently with either mamba (<code>mambai</code>) or pip (<code>pipi</code>).</p>
<p>Any <strong>binaries</strong> that are installed this way, are installed in <code>~/.local/bin</code> (through <code>pip</code>) and to <code>~/.conda/bin/</code> (through <code>mamba</code>). We need to add these paths to the <code>PATH</code> variable, to make sure we can call them from the command line.</p>
</section>
<section id="note-on-mamba" class="level3">
<h3 class="anchored" data-anchor-id="note-on-mamba">Note on Mamba</h3>
<p>At this point you might wonder why we have the Mamba installation at all, since we have seen that the system Python is used. In fact, our Mamba environment is totally decoupled from what we are using in our Jupyter notebook, and installing packages through <code>mamba</code> will <strong>not make them available in Jupyter</strong>. Instead, we should install Python packages through <code>pip</code>.</p>
<p>So what do we need Mamba for? I guess Jeremy has done this to be able to install binaries that he wants to use from the Terminal. For example, in the videos he talks about <code>ctags</code> which he installs through <code>mamba</code>. Since installing none-Python specific binaries through pip can be complicated, we can use Mamba instead. In other words, we can use it as a general package manager, somewhat similar to <code>apt-get</code>.</p>
</section>
<section id="final-words" class="level3">
<h3 class="anchored" data-anchor-id="final-words">Final words</h3>
<p>In my opinion Paperspace offers a great product for very fair money, especially if combined with the setup described in this blog!</p>


</section>
</section>

 ]]></description>
  <category>setup</category>
  <category>paperspace</category>
  <category>gpu</category>
  <category>how-to</category>
  <category>mlops</category>
  <guid>https://lucasvw.github.io/posts/02_paperspace_setup/index.html</guid>
  <pubDate>Sun, 26 Feb 2023 00:00:00 GMT</pubDate>
  <media:content url="https://lucasvw.github.io/posts/02_paperspace_setup/image.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Blog setup</title>
  <dc:creator>Lucas van Walstijn</dc:creator>
  <link>https://lucasvw.github.io/posts/01_blog_setup/index.html</link>
  <description><![CDATA[ 



<p>In this blog post I’ll explain how I created this blog, using Quarto and GitHub. In step 4 I’ll show how to setup GitHub Actions, this has advantages over the other ways to publish our blog:</p>
<ol type="1">
<li>Our source code is also stored safely on GitHub</li>
<li>We can easily create blog entries anywhere we want, especially also from our deep learning server without having to install quarto. We can simply push to the remote branch and GitHub Actions will build the blog for us.</li>
</ol>
<p>I’m working on a Macbook, and using VS Code for code editing. If you are on a Linux or Windows machine, be aware that things might be a bit different from what I describe here.</p>
<p>I am assuming you already have a GitHub account, that VS Code is installed and configured to run Python and Jupyter Notebooks.</p>
<section id="step-1-install-quarto" class="level2">
<h2 class="anchored" data-anchor-id="step-1-install-quarto">Step 1: install Quarto</h2>
<p>First of all you need to install Quarto, go <a href="https://quarto.org/docs/get-started/">here</a>, download and install the software. You should do this on the machine that you want to use for writing your blog, in my case my Macbook laptop.</p>
<p>Once installed you will have access to the quarto Command Line Interface (CLI). To make sure everything works as expected, open a terminal and execute:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Terminal</strong></pre>
</div>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">quarto</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--help</span></span></code></pre></div>
</div>
<p>This should render some outputs describing the different commands and options that are part of the Quarto CLI and shows that Quarto is installed successfully.</p>
</section>
<section id="step-2-create-a-github-repo" class="level2">
<h2 class="anchored" data-anchor-id="step-2-create-a-github-repo">Step 2: create a GitHub repo</h2>
<p>To host our blog we will use GitHub Pages, which is a service to host a website from a GitHub repository. Based on the name you pick for your repository you will create a so-called project-website or your unique user-website. For any general repo named <code>my-awesome-repo</code>, the website will be hosted on <code>https://&lt;github-username&gt;.github.io/my-awesome-repo</code>. This is a project-websites and you can create as many as you like.</p>
<p>To create your user-website, you have to name the repo exactly like this: <code>&lt;github-username&gt;.github.io</code>, the user-website will be hosted at <code>https://&lt;github-username&gt;.github.io</code>.</p>
<p>This is exactly what I want, so I create a new repo with the name: <code>lucasvw.github.io</code>.</p>
<p>I find it helpful to add a <code>.gitignore</code> file with a Python template, to which we can later add some more entries to facilitate storing the right files on GitHub. Also make sure that the repo is Public (and not set to Private). Additionally, I added a README file and choose the Apache2 License.</p>
<p>Next, I clone this repo to my machine by running:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Terminal</strong></pre>
</div>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> clone git@github.com:lucasvw/lucasvw.github.io.git</span></code></pre></div>
</div>
</section>
<section id="step-3-add-a-quarto-project-to-the-repo" class="level2">
<h2 class="anchored" data-anchor-id="step-3-add-a-quarto-project-to-the-repo">Step 3: add a Quarto project to the repo</h2>
<p>Next, open VS Code and open the cloned repo. Then access the VS Code terminal and run:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Terminal</strong></pre>
</div>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">quarto</span> create-project <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--type</span> website:blog</span></code></pre></div>
</div>
<p>This will add a number of files to our repo, which represent the basic structure of our blog. Most importantly:</p>
<ul>
<li><code>posts</code>: here we will create our blog entries (one subfolder per blog entry)</li>
<li><code>_quarto.yml</code>: configuration file for our blog such as the theme, name, GitHub and Twitter links</li>
<li><code>about.qmd</code>: source code for the “about” page.</li>
<li><code>index.qmd</code>: source code for the landing page.</li>
</ul>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p><code>.qmd</code> files are like markdown files, but with lots of additional functionality from Quarto. Go <a href="https://www.markdownguide.org/basic-syntax/">here</a> for more information on Markdown syntax and <a href="https://nbdev.fast.ai/tutorials/qmd_intro.html">here</a> for Quarto Markdown</p>
</div>
</div>
<p>To see what we currently have, let’s render our blog locally:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Terminal</strong></pre>
</div>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">quarto</span> preview</span></code></pre></div>
</div>
<p>Alternatively, we can install the Quarto extension in VS Code, which will show a <code>render</code> button in the top right corner on any opened <code>qmd</code> file.</p>
<p>To publish the current contents to GitHub pages, we can run:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Terminal</strong></pre>
</div>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">quarto</span> publish gh-pages</span></code></pre></div>
</div>
<p>When doing so, we get a message that we have to change the branch from which GitHub Pages builds the site. To do this, I go to <a href="https://github.com/lucasvw/lucasvw.github.io/settings/pages">https://github.com/lucasvw/lucasvw.github.io/settings/pages</a> and select <code>gh-pages</code> instead of the <code>main</code> branch.</p>
<p>And voila, in a few moments our blog will be running live at <a href="https://lucasvw.github.io/">https://lucasvw.github.io/</a></p>
</section>
<section id="step-4-finalize-set-up-github-actions" class="level2">
<h2 class="anchored" data-anchor-id="step-4-finalize-set-up-github-actions">Step 4: Finalize set-up: GitHub Actions</h2>
<p>When we run the <code>quarto publish gh-pages</code> command, Quarto processes our files and turns them into web readable files (HTML, JS, CSS etc). It stores these files in our <code>gh-pages</code> branch and pushes them to our remote GitHub repo. This is great, but it means that this doesn’t store our source files.</p>
<p>To do so, let’s first open our <code>.gitignore</code> file and make sure that it contains the following entries so that we don’t check in any files we don’t need.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>.gitignore</strong></pre>
</div>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode txt code-with-copy"><code class="sourceCode default"><span id="cb6-1"># Quarto</span>
<span id="cb6-2">/.quarto/</span>
<span id="cb6-3">_site/</span>
<span id="cb6-4"></span>
<span id="cb6-5"># Mac files</span>
<span id="cb6-6">.DS_Store</span></code></pre></div>
</div>
<p>Next, we can commit all the remaining files to Git and push them to our remote repo. If we ever lose access to our local machine, we can restore everything we need from GitHub.</p>
<p>However, now we have 2 things we need to do whenever we finish our work:</p>
<ul>
<li>store our source files on the main branch and push to GitHub</li>
<li>run the publish command to update the blog</li>
</ul>
<p>This is a bit annoying and it would be much better if we can just push to the main branch and GitHub would take care of building our website and updating it. This also allows us to create blog entries on any machine that has access to git, we don’t need to have quarto installed. This is particularly practical if we want to write blog entries from our deep learning server. So let’s use GitHub actions for this.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>Before you continue make sure you have at least once run a <code>quarto publish gh-pages</code> command, this is necessary for the things below to work</p>
</div>
</div>
<p>First we need to add the following snippet to <code>_quarto.yml</code></p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>_quarto.yml</strong></pre>
</div>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">execute</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb7-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">freeze</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> auto</span></span></code></pre></div>
</div>
<p>This will make sure that GitHub actions doesn’t execute any executable code, but will show the pre-rendered outputs it finds in the <code>_freeze</code> folder.</p>
<p>Finally, create the file <code>.github/workflows/publish.yml</code> and populate it with the following code:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>.github/workflows/publish.yml</strong></pre>
</div>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">on</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb8-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">workflow_dispatch</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb8-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">push</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb8-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">branches</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> main</span></span>
<span id="cb8-5"></span>
<span id="cb8-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Quarto Publish</span></span>
<span id="cb8-7"></span>
<span id="cb8-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">jobs</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb8-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">build-deploy</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb8-10"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runs-on</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ubuntu-latest</span></span>
<span id="cb8-11"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">permissions</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb8-12"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">contents</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> write</span></span>
<span id="cb8-13"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">steps</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb8-14"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Check out repository</span></span>
<span id="cb8-15"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uses</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> actions/checkout@v3</span></span>
<span id="cb8-16"></span>
<span id="cb8-17"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Set up Quarto</span></span>
<span id="cb8-18"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uses</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> quarto-dev/quarto-actions/setup@v2</span></span>
<span id="cb8-19"></span>
<span id="cb8-20"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Render and Publish</span></span>
<span id="cb8-21"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uses</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> quarto-dev/quarto-actions/publish@v2</span></span>
<span id="cb8-22"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb8-23"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">target</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> gh-pages</span></span>
<span id="cb8-24"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">env</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb8-25"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GITHUB_TOKEN</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ${{ secrets.GITHUB_TOKEN }}</span></span></code></pre></div>
</div>
<p>Once we push these things to GitHub, we are good to go. Whenever we push anything to the <code>main</code> branch, this workflow will execute and take care of updating the <code>gh-pages</code> branch and updating the blog.</p>


</section>

 ]]></description>
  <category>blogging</category>
  <category>setup</category>
  <category>how-to</category>
  <guid>https://lucasvw.github.io/posts/01_blog_setup/index.html</guid>
  <pubDate>Fri, 24 Feb 2023 00:00:00 GMT</pubDate>
  <media:content url="https://lucasvw.github.io/posts/01_blog_setup/profile.png" medium="image" type="image/png" height="133" width="144"/>
</item>
</channel>
</rss>
